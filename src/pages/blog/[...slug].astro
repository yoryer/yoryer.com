---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogLayout from "@layouts/BlogLayout.astro";
import ShareButtons from "@ui/ShareButtons.astro";
import { useTranslations } from "@i18n/utils";
import "prismjs/themes/prism-tomorrow.css";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post: CollectionEntry<"blog">) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
const t = useTranslations(post.data.lang);

// Format date based on language
const getLocaleCode = (lang: string) => lang === "es" ? "es-ES" : "en-US";
const formatDate = (date: Date, lang: string) => {
  return date.toLocaleDateString(getLocaleCode(lang), {
    year: "numeric",
    month: "long",
    day: "numeric",
    timeZone: "UTC"
  });
};
---

<BlogLayout title={post.data.title} description={post.data.description} lang={post.data.lang}>
  <main class="min-h-screen bg-gradient-to-br from-blue-50 to-water-50 pt-20">
    <article class="max-w-4xl mx-auto px-6 py-12">
      <!-- Article header -->
      <header class="mb-12 mt-8">

        <h1
          class="text-4xl md:text-5xl font-medium text-white mb-4 leading-tight"
        >
          {post.data.title}
        </h1>

        <p class="text-xl text-silver-blue mb-4 leading-relaxed">
          {post.data.description}
        </p>

        <div class="flex items-center text-light-sky-blue mb-6 text-sm">
          <time datetime={post.data.date.toISOString()}>
            {formatDate(post.data.date, post.data.lang)}
          </time>
        </div>

        <div class="flex flex-wrap items-center gap-2">
          {
            post.data.tags?.map((tag: string) => (
              <span class="px-3 py-1 bg-yankees-blue text-silver-blue text-sm rounded-full">
                {tag}
              </span>
            ))
          }
        </div>
      </header>

      <!-- Article content -->
      <div class="prose prose-xl prose-invert max-w-none">
        <Content />
      </div>

      <!-- Article footer -->
      <footer class="mt-12 py-6 border-yankees-blue border bg-yankees-blue/20 rounded-md">
        <div class="flex flex-col gap-4 justify-center items-center">
          <div class="text-silver text-center text-sm">
            {
              t.common.enjoyedArticle
            }
          </div>

          <ShareButtons 
            url={Astro.url.toString()} 
            title={post.data.title} 
            lang={post.data.lang} 
          />
        </div>
      </footer>
    </article>
  </main>
</BlogLayout>

<script>
  function addCopyButtons() {
    const codeBlocks = document.querySelectorAll("pre");

    codeBlocks.forEach((pre) => {
      // Skip if button already exists
      if (pre.querySelector(".copy-button")) return;

      const code = pre.querySelector("code");
      if (!code) return;

      const button = document.createElement("button");
      button.className = "copy-button not-prose";
      button.innerHTML = "<span>ðŸ“‹</span><span>Copy</span>";
      button.setAttribute("aria-label", "Copy code to clipboard");

      button.addEventListener("click", async () => {
        const text = code.textContent || "";

        try {
          await navigator.clipboard.writeText(text);
          button.innerHTML = "<span>âœ…</span><span>Copied!</span>";
          button.classList.add("copied");

          setTimeout(() => {
            button.innerHTML = "<span>ðŸ“‹</span><span>Copy</span>";
            button.classList.remove("copied");
          }, 2000);
        } catch {
          // Fallback for older browsers
          const textArea = document.createElement("textarea");
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand("copy");
            button.innerHTML = "<span>âœ…</span><span>Copied!</span>";
            button.classList.add("copied");
            setTimeout(() => {
              button.innerHTML = "<span>ðŸ“‹</span><span>Copy</span>";
              button.classList.remove("copied");
            }, 2000);
          } catch (fallbackErr) {
            console.error("Failed to copy code:", fallbackErr);
          }
          document.body.removeChild(textArea);
        }
      });

      pre.appendChild(button);
    });
  }

  // Run on initial load
  addCopyButtons();

  // Run when navigating between pages (for Astro's client-side routing)
  document.addEventListener("astro:page-load", addCopyButtons);
</script>
