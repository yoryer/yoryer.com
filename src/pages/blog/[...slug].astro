---
import { type CollectionEntry, getCollection } from "astro:content";
import BlogLayout from "@layouts/BlogLayout.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import "prismjs/themes/prism-tomorrow.css";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post: CollectionEntry<"blog">) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Format date based on language
const formatDate = (date: Date, locale: string) => {
  return date.toLocaleDateString(locale === "es" ? "es-ES" : "en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};
---

<BlogLayout title={post.data.title} description={post.data.description}>
  <main class="min-h-screen bg-gradient-to-br from-blue-50 to-water-50 pt-20">
    <article class="max-w-4xl mx-auto px-6 py-12">
      <!-- Back to blog link -->
      <nav class="mb-8">
        <a
          href="/#blog"
          class="inline-flex items-center text-blue hover:text-yankees-blue transition-colors duration-200"
        >
          <svg
            class="w-4 h-4 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          {t.blog ? "‚Üê Back to Blog" : "‚Üê Volver al Blog"}
        </a>
      </nav>

      <!-- Article header -->
      <header class="mb-12">
        <div class="flex flex-wrap items-center gap-2 mb-4">
          {
            post.data.tags?.map((tag: string) => (
              <span class="px-3 py-1 bg-water text-blue text-sm rounded-full">
                {tag}
              </span>
            ))
          }
        </div>

        <h1
          class="text-4xl md:text-5xl font-medium text-white mb-4 leading-tight"
        >
          {post.data.title}
        </h1>

        <p class="text-xl text-silver-blue mb-6 leading-relaxed">
          {post.data.description}
        </p>

        <div class="flex items-center text-silver-blue">
          <time datetime={post.data.date.toISOString()}>
            {formatDate(post.data.date, post.data.lang)}
          </time>
        </div>
      </header>

      <!-- Article content -->
      <div class="prose prose-xl prose-invert max-w-none">
        <Content />
      </div>

      <!-- Article footer -->
      <footer class="mt-12 pt-8 border-t border-gray-200">
        <div
          class="flex flex-col md:flex-row md:items-center md:justify-between gap-4"
        >
          <div class="text-black-soft">
            {
              post.data.lang === "es"
                ? "¬øTe gust√≥ este art√≠culo? ¬°Comp√°rtelo!"
                : "Enjoyed this article? Share it!"
            }
          </div>

          <!-- Social sharing buttons could go here -->
          <div class="flex gap-4">
            <a
              href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.data.title)}&url=${encodeURIComponent(Astro.url.toString())}`}
              target="_blank"
              rel="noopener noreferrer"
              class="px-4 py-2 bg-blue text-white rounded-lg hover:bg-yankees-blue transition-colors duration-200"
            >
              {post.data.lang === "es" ? "Compartir" : "Share"}
            </a>
          </div>
        </div>
      </footer>
    </article>
  </main>
</BlogLayout>

<script>
  function addCopyButtons() {
    const codeBlocks = document.querySelectorAll("pre");

    codeBlocks.forEach((pre) => {
      // Skip if button already exists
      if (pre.querySelector(".copy-button")) return;

      const code = pre.querySelector("code");
      if (!code) return;

      const button = document.createElement("button");
      button.className = "copy-button not-prose";
      button.innerHTML = "<span>üìã</span><span>Copy</span>";
      button.setAttribute("aria-label", "Copy code to clipboard");

      button.addEventListener("click", async () => {
        const text = code.textContent || "";

        try {
          await navigator.clipboard.writeText(text);
          button.innerHTML = "<span>‚úÖ</span><span>Copied!</span>";
          button.classList.add("copied");

          setTimeout(() => {
            button.innerHTML = "<span>üìã</span><span>Copy</span>";
            button.classList.remove("copied");
          }, 2000);
        } catch {
          // Fallback for older browsers
          const textArea = document.createElement("textarea");
          textArea.value = text;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand("copy");
            button.innerHTML = "<span>‚úÖ</span><span>Copied!</span>";
            button.classList.add("copied");
            setTimeout(() => {
              button.innerHTML = "<span>üìã</span><span>Copy</span>";
              button.classList.remove("copied");
            }, 2000);
          } catch (fallbackErr) {
            console.error("Failed to copy code:", fallbackErr);
          }
          document.body.removeChild(textArea);
        }
      });

      pre.appendChild(button);
    });
  }

  // Run on initial load
  addCopyButtons();

  // Run when navigating between pages (for Astro's client-side routing)
  document.addEventListener("astro:page-load", addCopyButtons);
</script>
