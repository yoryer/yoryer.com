---
import SectionContainer from "@ui/SectionContainer.astro";
import SectionTitle from "@ui/SectionTitle.astro";

const skills = [
  {
    title: "Frontend",
    icon: "/img/frontend_icon.svg",
    description:
      "I care about UI/UX. I build responsive and dynamic web applications using HTML, CSS, JavaScript and React.",
  },
  {
    title: "Backend",
    icon: "/img/backend_icon.svg",
    description:
      "I develop server-side applications and RESTful APIs. I work with databases and implement business logic with various frameworks and languages.",
  },
  {
    title: "Mobile",
    icon: "/img/mobile_icon.svg",
    description:
      "I create cross-platform mobile applications using frameworks like Flutter, delivering native-like experiences on iOS and Android.",
  },
];

const experiences = [
  {
    id: "messagebird",
    company: "MessageBird",
    role: "Front-end Engineer",
    period: "February 2021 - Present",
    tasks: [
      "Desarrollo de 6 aplicaciones móviles para entidades financieras utilizando Flutter, 3 de ellas ya publicadas.",
      "Análisis y programación de una RESTful API en Spring Boot para gestionar usuarios y transacciones del área de empresas de un banco.",
      "Implementación de pasarelas de pago aplicaciones móviles y web.",
      "Programación y optimización de un sistema SMS Premium para atender a más de 100.000 suscriptores.",
      "Creación de una aplicación de rastreo de dispositivos Android para prevenir que sean robados.",
      "Coordinación de un equipo de 5 programadores para el desarrollo de una aplicación para una operadora de telefonía.",
    ],
    tags: ["PHP", "HTML", "CSS", "JS/TS", "Android", "iOS", "React"],
  },
  {
    id: "open-technologies-2",
    company: "Open Technologies",
    role: "Software Engineer",
    period: "February 2019 - February 2021",
    tasks: [
      "Desarrollo de aplicaciones móviles para Android y iOS.",
      "Implementación de APIs RESTful para la integración con sistemas de terceros.",
      "Optimización de bases de datos y consultas SQL.",
    ],
    tags: ["Java", "Kotlin", "Swift", "Node.js", "MongoDB"],
  },
  {
    id: "freelancer",
    company: "Freelancer",
    role: "Full-stack Developer",
    period: "March 2017 - February 2019",
    tasks: [
      "Desarrollo de sitios web y aplicaciones a medida para clientes.",
      "Gestión de proyectos y comunicación directa con los clientes.",
      "Implementación de soluciones de e-commerce.",
    ],
    tags: ["PHP", "Laravel", "JavaScript", "Vue.js", "MySQL"],
  },
  {
    id: "open-technologies-1",
    company: "Open Technologies",
    role: "Web Developer",
    period: "March 2015 - February 2017",
    tasks: [
      "Desarrollo y mantenimiento de plataformas web.",
      "Integración de APIs de terceros.",
      "Optimización de rendimiento web.",
    ],
    tags: ["PHP", "HTML", "CSS", "JavaScript", "jQuery"],
  },
  {
    id: "htc-ltd",
    company: "HTC Ltd",
    role: "Junior Developer",
    period: "March 2013 - February 2015",
    tasks: [
      "Asistencia en el desarrollo de software.",
      "Pruebas y depuración de código.",
      "Documentación técnica.",
    ],
    tags: ["C#", ".NET", "SQL Server"],
  },
];
---

<section id="skills" class="mt-5 min-h-screen">
  <div class="w-full h-32"></div>
  <SectionContainer class="-mt-32 pb-16">
    <div class="flex mb-12">
      <div class="w-full">
        <SectionTitle label="Skills &<br/>Experience" color="battery-blue" />
      </div>
    </div>

    <div class="grid md:grid-cols-3 gap-8 text-left mb-8">
      {
        skills.map((skill, idx) => (
          <div
            class="relative rounded-xl pt-4 pb-6 overflow-hidden group border-b border-r border-transparent hover:border-b-battery-blue/10 hover:border-r-battery-blue/10 hover:pl-1 transition-all duration-300"
          >
            <style>
              .skills-card-bg::before {
                content: '';
                position: absolute;
                inset: 0;
                z-index: 0;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.3s;
                background: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
              }
              .group:hover .skills-card-bg::before {
                opacity: 1;
              }
            </style>
            <div class="skills-card-bg absolute inset-0 w-full h-full"></div>
            <canvas
              class="absolute inset-0 w-full h-full pointer-events-none matrix-bg opacity-0 group-hover:opacity-100 transition-opacity duration-300"
              width="320"
              height="240"
              style="
                z-index: 0;
                mask-image: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
                -webkit-mask-image: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
              "
              data-matrix-idx={idx}
            ></canvas>
            <div class="relative z-10 overflow-visible">
              <img
                src={skill.icon}
                alt={skill.title}
                class="lg:size-16 size-12 text-battery-blue"
              />
              <h3 class="text-[40px] font-medium mb-4 font-poppins">
                {skill.title}
              </h3>
              <p class="text-[20px] text-silver-blue font-normal font-poppins pr-6">
                {skill.description}
              </p>
            </div>
          </div>
        ))
      }
    </div>

    <div class="mt-16">
      <h3 class="md:text-[32px] text-[28px] font-semibold md:mb-8 mb-4 text-left leading-10">
        Professional experience
      </h3>
      <div class="flex flex-col md:flex-row">
        <div class="md:w-1/4 lg:pr-8 md:pr-4 pr-0">
          <ul class="space-y-3 md:space-y-6">
            {
              experiences.map((exp, idx) => (
                <li>
                  <button
                    class="text-white text-left w-full py-2 px-4 rounded-md focus:outline-none transition-colors duration-200 bg-battery-blue/10 md:bg-transparent hover:bg-battery-blue/15 hover:text-white/90 data-[active=true]:bg-battery-blue data-[active=true]:text-blue data-[active=true]:font-medium font-light md:text-base"
                    data-experience-id={exp.id}
                    data-idx={idx}
                  >
                    <span class="mr-4 md:mr-2">&#9635;</span>
                    {exp.company}
                  </button>
                  <div class="block md:hidden" id={`mobile-details-${exp.id}`}></div>
                </li>
              ))
            }
          </ul>
        </div>
        <div
          class="md:w-3/4 pl-8 md:pl-4 hidden md:block"
          id="experience-details"
        >
          <!-- Experience details will be rendered here by JavaScript (desktop/tablet) -->
        </div>
      </div>
    </div>
  </SectionContainer>
</section>

<script>
  interface Experience {
    id: string;
    company: string;
    role: string;
    period: string;
    tasks: string[];
    tags: string[];
  }

  const experiencesData: Experience[] = [
    {
      id: "messagebird",
      company: "MessageBird",
      role: "Front-end Engineer",
      period: "February 2021 - Present",
      tasks: [
        "Desarrollo de 6 aplicaciones móviles para entidades financieras utilizando Flutter, 3 de ellas ya publicadas.",
        "Análisis y programación de una RESTful API en Spring Boot para gestionar usuarios y transacciones del área de empresas de un banco.",
        "Implementación de pasarelas de pago aplicaciones móviles y web.",
        "Programación y optimización de un sistema SMS Premium para atender a más de 100.000 suscriptores.",
        "Creación de una aplicación de rastreo de dispositivos Android para prevenir que sean robados.",
        "Coordinación de un equipo de 5 programadores para el desarrollo de una aplicación para una operadora de telefonía.",
      ],
      tags: ["PHP", "HTML", "CSS", "JS/TS", "Android", "iOS", "React"],
    },
    {
      id: "open-technologies-2",
      company: "Open Technologies",
      role: "Software Engineer",
      period: "February 2019 - February 2021",
      tasks: [
        "Desarrollo de aplicaciones móviles para Android y iOS.",
        "Implementación de APIs RESTful para la integración con sistemas de terceros.",
        "Optimización de bases de datos y consultas SQL.",
      ],
      tags: ["Java", "Kotlin", "Swift", "Node.js", "MongoDB"],
    },
    {
      id: "freelancer",
      company: "Freelancer",
      role: "Full-stack Developer",
      period: "March 2017 - February 2019",
      tasks: [
        "Desarrollo de sitios web y aplicaciones a medida para clientes.",
        "Gestión de proyectos y comunicación directa con los clientes.",
        "Implementación de soluciones de e-commerce.",
      ],
      tags: ["PHP", "Laravel", "JavaScript", "Vue.js", "MySQL"],
    },
    {
      id: "open-technologies-1",
      company: "Open Technologies",
      role: "Web Developer",
      period: "March 2015 - February 2017",
      tasks: [
        "Desarrollo y mantenimiento de plataformas web.",
        "Integración de APIs de terceros.",
        "Optimización de rendimiento web.",
      ],
      tags: ["PHP", "HTML", "CSS", "JavaScript", "jQuery"],
    },
    {
      id: "htc-ltd",
      company: "HTC Ltd",
      role: "Junior Developer",
      period: "March 2013 - February 2015",
      tasks: [
        "Asistencia en el desarrollo de software.",
        "Pruebas y depuración de código.",
        "Documentación técnica.",
      ],
      tags: ["C#", ".NET", "SQL Server"],
    },
  ];

  let activeExperienceIdx = 0;

  const experienceDetailsContainer =
    document.getElementById("experience-details");

  function renderExperienceDetails(experience: Experience) {
    if (!experienceDetailsContainer) return;

    experienceDetailsContainer.innerHTML = `
      <h4 class="text-2xl font-medium mb-2">
        ${experience.role} <span class="text-white/50">@</span> <a href="https://www.google.com" target="_blank" rel="noopener noreferrer" class="text-battery-blue hover:underline">${experience.company}</a>
      </h4>
      <p class="text-silver mb-4 font-light">${experience.period}</p>
      <ul class="list-disc list-outside space-y-2 mb-4 pl-5">
        ${experience.tasks.map((task: string) => `<li class="leading-loose font-light">${task}</li>`).join("")}
      </ul>
      <div class="flex flex-wrap gap-x-2 md:gap-x-8 gap-y-2 mt-6">
        ${experience.tags.map((tag: string) => `<span class="border border-battery-blue text-battery-blue px-1 py-0.5 rounded-md text-xs md:px-2 md:py-1 md:text-sm">${tag}</span>`).join("")}
      </div>
    `;
  }

  function renderMobileAccordion() {
    // Remove all mobile details first
    experiencesData.forEach((exp) => {
      const mobileDetails = document.getElementById(`mobile-details-${exp.id}`);
      if (mobileDetails) mobileDetails.innerHTML = "";
    });
    // Render only for the active one
    const activeExp = experiencesData[activeExperienceIdx];
    const mobileDetails = document.getElementById(`mobile-details-${activeExp.id}`);
    if (mobileDetails) {
      mobileDetails.innerHTML = `
        <div class='mt-4 mb-6'>
          <h4 class="text-xl font-medium mb-2">
            ${activeExp.role} <span class="text-white/50">@</span> <a href="https://www.google.com" target="_blank" rel="noopener noreferrer" class="text-battery-blue hover:underline">${activeExp.company}</a>
          </h4>
          <p class="text-silver mb-4 font-light">${activeExp.period}</p>
          <ul class="list-disc list-outside space-y-2 mb-4 pl-5">
            ${activeExp.tasks.map((task: string) => `<li class="leading-loose font-light">${task}</li>`).join("")}
          </ul>
          <div class="flex flex-wrap gap-x-2 md:gap-x-8 gap-y-2 mt-6">
            ${activeExp.tags.map((tag: string) => `<span class="border border-battery-blue text-battery-blue px-1 py-0.5 rounded-md text-xs md:px-2 md:py-1 md:text-sm">${tag}</span>`).join("")}
          </div>
        </div>
      `;
    }
  }

  function setupExperienceListeners() {
    const experienceButtons = document.querySelectorAll("[data-experience-id]");
    experienceButtons.forEach((buttonElement: Element, idx: number) => {
      const button = buttonElement as HTMLElement;
      button.addEventListener("click", () => {
        // Remove active class from all buttons
        experienceButtons.forEach((btn) => {
          (btn as HTMLElement).dataset.active = "false";
        });
        // Add active class to the clicked button
        button.dataset.active = "true";
        activeExperienceIdx = idx;
        const id = button.dataset.experienceId;
        const selectedExperience = experiencesData.find((exp) => exp.id === id);
        if (selectedExperience) {
          renderExperienceDetails(selectedExperience);
        }
        renderMobileAccordion();
        // Instantly scroll the clicked button into view on mobile
        if (window.innerWidth < 768) {
          const header = document.getElementById("header");
          const headerOffset = header ? header.getBoundingClientRect().height : 0;
          const elementPosition = button.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({ top: elementPosition - headerOffset, behavior: "auto" });
        }
      });
    });

    // Render the first experience by default and set it as active
    if (experiencesData.length > 0) {
      renderExperienceDetails(experiencesData[0]);
      const firstButton = document.querySelector(
        `[data-experience-id="${experiencesData[0].id}"]`
      );
      if (firstButton) {
        (firstButton as HTMLElement).dataset.active = "true";
      }
      renderMobileAccordion();
    }
  }

  setupExperienceListeners();
  document.addEventListener("astro:page-load", setupExperienceListeners);
</script>

<script>
  function startMatrixAnimation(canvas: HTMLCanvasElement) {
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    const w = canvas.width;
    const h = canvas.height;
    const fontSize = 16;
    const columns = Math.floor(w / fontSize);
    const drops = Array(columns).fill(1);

    function draw() {
      if (!ctx) return;
      ctx.fillStyle = 'rgba(8, 36, 63, 0.15)'; // Faint blue-black for fade
      ctx.fillRect(0, 0, w, h);
      ctx.font = fontSize + "px monospace";
      ctx.fillStyle = "#AEEAFF"; // lighter sky blue, closer to white
      for (let i = 0; i < columns; i++) {
        const text = Math.random() > 0.5 ? "0" : "1";
        ctx.fillText(text, i * fontSize, drops[i] * fontSize);
        if (drops[i] * fontSize > h && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i]++;
      }
    }
    setInterval(draw, 50);
  }

  document.querySelectorAll('.matrix-bg').forEach(canvas => {
    startMatrixAnimation(canvas as HTMLCanvasElement);
  });

  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll('.matrix-bg').forEach(canvas => {
      startMatrixAnimation(canvas as HTMLCanvasElement);
    });
  });
</script>
