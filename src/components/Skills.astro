---
import SectionContainer from "@ui/SectionContainer.astro";
import SectionTitle from "@ui/SectionTitle.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const skills = [
  {
    title: t.skills.frontend.title,
    icon: "/img/frontend_icon.svg",
    description: t.skills.frontend.description,
  },
  {
    title: t.skills.backend.title,
    icon: "/img/backend_icon.svg",
    description: t.skills.backend.description,
  },
  {
    title: t.skills.mobile.title,
    icon: "/img/mobile_icon.svg",
    description: t.skills.mobile.description,
  },
];

// Use the new experience array directly from translations
const experiences = t.skills.experience;
---

<section id="skills" class="mt-5 min-h-screen">
  <div class="w-full h-32"></div>
  <SectionContainer class="-mt-32 pb-16">
    <!-- Pass translations to client-side script -->
    <div id="skills-translations" data-experiences={JSON.stringify(experiences)} class="hidden"></div>
    <div class="flex mb-12">
      <div class="w-full">
        <SectionTitle label={t.skills.title.replace(' ', ' &<br/>')} color="battery-blue" />
      </div>
    </div>

    <div class="grid md:grid-cols-3 gap-8 text-left mb-8">
      {
        skills.map((skill, idx) => (
          <div
            class="relative rounded-xl pt-4 pb-6 overflow-hidden group border-b border-r border-transparent hover:border-b-battery-blue/10 hover:border-r-battery-blue/10 hover:pl-1 transition-all duration-300"
          >
            <style>
              .skills-card-bg::before {
                content: "";
                position: absolute;
                inset: 0;
                z-index: 0;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.3s;
                background: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
              }
              .group:hover .skills-card-bg::before {
                opacity: 1;
              }
            </style>
            <div class="skills-card-bg absolute inset-0 w-full h-full"></div>
            <canvas
              class="absolute inset-0 w-full h-full pointer-events-none matrix-bg opacity-0 group-hover:opacity-100 transition-opacity duration-300"
              width="320"
              height="240"
              style="
                z-index: 0;
                mask-image: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
                -webkit-mask-image: linear-gradient(to top left, #2AC3DE0D 0%, transparent 40%, transparent 100%);
              "
              data-matrix-idx={idx}
            ></canvas>
            <div class="relative z-10 overflow-visible">
              <img
                src={skill.icon}
                alt={skill.title}
                class="lg:size-16 size-12 text-battery-blue"
              />
              <h3 class="text-[40px] font-medium mb-4 font-poppins">
                {skill.title}
              </h3>
              <p class="text-[20px] text-silver-blue font-normal font-poppins pr-6">
                {skill.description}
              </p>
            </div>
          </div>
        ))
      }
    </div>

    <div class="mt-16">
      <h3 class="md:text-[32px] text-[28px] font-semibold md:mb-8 mb-4 text-left leading-10 text-silver-blue">
        {t.skills.professionalExperience}
      </h3>
      <div class="flex flex-col md:flex-row">
        <div class="md:w-1/4 lg:pr-8 md:pr-4 pr-0">
          <ul class="space-y-3 md:space-y-6">
            {
              experiences.map((exp: any, idx: number) => (
                <li>
                  <button
                    class="text-white text-left w-full py-2 px-4 rounded-md focus:outline-none transition-colors duration-200 bg-battery-blue/10 md:bg-transparent hover:bg-battery-blue/15 hover:text-white/90 data-[active=true]:bg-battery-blue data-[active=true]:text-blue data-[active=true]:font-medium font-light md:text-base"
                    data-experience-id={exp.id}
                    data-idx={idx}
                  >
                    <span class="mr-4 md:mr-2">&#9635;</span>
                    {exp.company}
                  </button>
                  <div class="block md:hidden" id={`mobile-details-${exp.id}`}></div>
                </li>
              ))
            }
          </ul>
        </div>
        <div
          class="md:w-3/4 pl-8 md:pl-4 hidden md:block"
          id="experience-details"
        >
          <!-- Experience details will be rendered here by JavaScript (desktop/tablet) -->
        </div>
      </div>
    </div>
  </SectionContainer>
</section>

<script>
  interface ExperienceSection {
    title: string;
    items: string[];
  }

  interface KeyAchievement {
    title: string;
    period: string;
    items: string[];
  }

  interface Experience {
    id: string;
    company: string;
    role: string;
    period: string;
    location?: string;
    items?: string[];
    keyAchievement?: KeyAchievement;
    sections?: ExperienceSection[];
    tags: string[];
  }

  // Get experiences from data attribute
  const translationsElement = document.getElementById('skills-translations');
  const experiencesData: Experience[] = translationsElement 
    ? JSON.parse(translationsElement.dataset.experiences || '[]') 
    : [];

  let activeExperienceIdx = 0;

  const experienceDetailsContainer =
    document.getElementById("experience-details");

  function renderExperienceDetails(experience: Experience) {
    if (!experienceDetailsContainer) return;

    let content = `
      <h4 class="text-2xl font-medium mb-2">
        ${experience.role ? `${experience.role} <span class="text-white/50">@</span> ` : ''}<a href="#" class="text-battery-blue hover:underline">${experience.company}</a>
      </h4>
      <p class="text-silver-blue mb-4 font-light">
        ${experience.period}
        ${experience.location ? `<span class="text-white/30 mx-2">•</span> ${experience.location}` : ''}
      </p>
    `;

    // Handle key achievement if present
    if (experience.keyAchievement) {
      content += `
        <div class="mb-6 bg-battery-blue/5 p-4 rounded-lg border-l-4 border-battery-blue">
          <h5 class="text-lg font-medium mb-2 text-battery-blue">
            ${experience.keyAchievement.title} 
            <span class="text-silver-blue font-light text-sm">(${experience.keyAchievement.period})</span>
          </h5>
          <ul class="list-disc list-outside space-y-2 pl-5">
            ${experience.keyAchievement.items.map((item: string) => `<li class="leading-loose font-light">${item}</li>`).join("")}
          </ul>
        </div>
      `;
    }

    // Handle sections if present
    if (experience.sections && experience.sections.length > 0) {
      experience.sections.forEach((section: ExperienceSection) => {
        content += `
          <div class="mb-6">
            <h5 class="text-lg font-medium mb-3 text-battery-blue/90">${section.title}</h5>
            <ul class="list-disc list-outside space-y-2 pl-5">
              ${section.items.map((item: string) => `<li class="leading-loose font-light">${item}</li>`).join("")}
            </ul>
          </div>
        `;
      });
    } else if (experience.items && experience.items.length > 0) {
      // Handle simple items list
      content += `
        <ul class="list-disc list-outside space-y-2 mb-4 pl-5">
          ${experience.items.map((item: string) => `<li class="leading-loose font-light">${item}</li>`).join("")}
        </ul>
      `;
    }

    // Add tags
    content += `
      <div class="flex flex-wrap gap-x-2 md:gap-x-8 gap-y-2 mt-6">
        ${experience.tags.map((tag: string) => `<span class="border border-battery-blue text-battery-blue px-1 py-0.5 rounded-md text-xs md:px-2 md:py-1 md:text-sm">${tag}</span>`).join("")}
      </div>
    `;

    experienceDetailsContainer.innerHTML = content;
  }

  function renderMobileAccordion() {
    // Remove all mobile details first
    experiencesData.forEach((exp) => {
      const mobileDetails = document.getElementById(`mobile-details-${exp.id}`);
      if (mobileDetails) mobileDetails.innerHTML = "";
    });
    // Render only for the active one
    const activeExp = experiencesData[activeExperienceIdx];
    const mobileDetails = document.getElementById(`mobile-details-${activeExp.id}`);
    if (mobileDetails) {
      let content = `
        <div class='mt-4 mb-6'>
          <h4 class="text-xl font-medium mb-2">
            ${activeExp.role ? `${activeExp.role} <span class="text-white/50">@</span> ` : ''}<a href="#" class="text-battery-blue hover:underline">${activeExp.company}</a>
          </h4>
          <p class="text-silver mb-4 font-light">
            ${activeExp.period}
            ${activeExp.location ? `<span class="text-white/30 mx-2">•</span> ${activeExp.location}` : ''}
          </p>
      `;

      // Handle key achievement if present
      if (activeExp.keyAchievement) {
        content += `
          <div class="mb-4 bg-battery-blue/5 p-3 rounded-lg border-l-4 border-battery-blue">
            <h5 class="text-base font-medium mb-2 text-battery-blue">
              ${activeExp.keyAchievement.title} 
              <span class="text-silver-blue font-light text-xs">(${activeExp.keyAchievement.period})</span>
            </h5>
            <ul class="list-disc list-outside space-y-2 pl-5">
              ${activeExp.keyAchievement.items.map((item: string) => `<li class="leading-loose font-light text-sm">${item}</li>`).join("")}
            </ul>
          </div>
        `;
      }

      // Handle sections if present
      if (activeExp.sections && activeExp.sections.length > 0) {
        activeExp.sections.forEach((section: ExperienceSection) => {
          content += `
            <div class="mb-4">
              <h5 class="text-base font-medium mb-2 text-battery-blue/90">${section.title}</h5>
              <ul class="list-disc list-outside space-y-2 pl-5">
                ${section.items.map((item: string) => `<li class="leading-loose font-light text-sm">${item}</li>`).join("")}
              </ul>
            </div>
          `;
        });
      } else if (activeExp.items && activeExp.items.length > 0) {
        // Handle simple items list
        content += `
          <ul class="list-disc list-outside space-y-2 mb-4 pl-5">
            ${activeExp.items.map((item: string) => `<li class="leading-loose font-light text-sm">${item}</li>`).join("")}
          </ul>
        `;
      }

      // Add tags
      content += `
        <div class="flex flex-wrap gap-x-2 md:gap-x-8 gap-y-2 mt-6">
          ${activeExp.tags.map((tag: string) => `<span class="border border-battery-blue text-battery-blue px-1 py-0.5 rounded-md text-xs md:px-2 md:py-1 md:text-sm">${tag}</span>`).join("")}
        </div>
      `;

      content += `</div>`;
      mobileDetails.innerHTML = content;
    }
  }

  function setupExperienceListeners() {
    const experienceButtons = document.querySelectorAll("[data-experience-id]");
    experienceButtons.forEach((buttonElement: Element, idx: number) => {
      const button = buttonElement as HTMLElement;
      button.addEventListener("click", () => {
        // Remove active class from all buttons
        experienceButtons.forEach((btn) => {
          (btn as HTMLElement).dataset.active = "false";
        });
        // Add active class to the clicked button
        button.dataset.active = "true";
        activeExperienceIdx = idx;
        const id = button.dataset.experienceId;
        const selectedExperience = experiencesData.find((exp) => exp.id === id);
        if (selectedExperience) {
          renderExperienceDetails(selectedExperience);
        }
        renderMobileAccordion();
        // Instantly scroll the clicked button into view on mobile
        if (window.innerWidth < 768) {
          const header = document.getElementById("header");
          const headerOffset = header ? header.getBoundingClientRect().height : 0;
          const elementPosition = button.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({ top: elementPosition - headerOffset, behavior: "auto" });
        }
      });
    });

    // Render the first experience by default and set it as active
    if (experiencesData.length > 0) {
      renderExperienceDetails(experiencesData[0]);
      const firstButton = document.querySelector(
        `[data-experience-id="${experiencesData[0].id}"]`
      );
      if (firstButton) {
        (firstButton as HTMLElement).dataset.active = "true";
      }
      renderMobileAccordion();
    }
  }

  setupExperienceListeners();
  document.addEventListener("astro:page-load", setupExperienceListeners);
</script>

<script>
  function startMatrixAnimation(canvas: HTMLCanvasElement) {
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    const w = canvas.width;
    const h = canvas.height;
    const fontSize = 16;
    const columns = Math.floor(w / fontSize);
    const drops = Array(columns).fill(1);

    function draw() {
      if (!ctx) return;
      ctx.fillStyle = 'rgba(8, 36, 63, 0.15)'; // Faint blue-black for fade
      ctx.fillRect(0, 0, w, h);
      ctx.font = fontSize + "px monospace";
      ctx.fillStyle = "#AEEAFF"; // lighter sky blue, closer to white
      for (let i = 0; i < columns; i++) {
        const text = Math.random() > 0.5 ? "0" : "1";
        ctx.fillText(text, i * fontSize, drops[i] * fontSize);
        if (drops[i] * fontSize > h && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i]++;
      }
    }
    setInterval(draw, 50);
  }

  document.querySelectorAll('.matrix-bg').forEach(canvas => {
    startMatrixAnimation(canvas as HTMLCanvasElement);
  });

  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll('.matrix-bg').forEach(canvas => {
      startMatrixAnimation(canvas as HTMLCanvasElement);
    });
  });
</script>