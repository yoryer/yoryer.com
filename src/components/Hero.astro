---
import Button from "@ui/Button.astro";
import SectionContainer from "@ui/SectionContainer.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Hero Section -->
<SectionContainer>
  <section class="h-screen flex flex-col justify-center font-poppins -mt-16">
    <div
      class="absolute top-0 right-0 overflow-hidden opacity-20 md:opacity-100 portrait:pt-4"
    >
      <div
        class="static md:w-screen w-[200vw] h-screen flex items-center justify-center ml-[25%] xl:mt-10 lg:mt-8"
        data-hover-container
      >
        <img
          class="absolute z-20 lg:z-30 peer"
          src="/img/ai_avatar.webp"
          data-trigger-image
          id="hero-hover-img"
        />
        <img
          class="absolute transition-transform duration-500 -z-10 peer-hover:scale-110"
          src="/img/circles.svg"
          data-target-image
        />
      </div>
    </div>
    <div class="relative z-10 container mx-auto max-w-6xl lg:mt-3">
      <p
        class="font-bold xl:text-[64px] lg:text-[48px] text-[42px] text-water tracking-normal leading-none"
      >
        {t.hero.greeting}
      </p>
      <p
        class="font-medium xl:text-[48px] lg:text-[32px] text-[28px] text-water tracking-normal leading-none mt-2"
      >
        {t.hero.name.split(' ').slice(0, -1).join(' ')} <span
          class="font-semibold xl:text-[50px] lg:text-[36px] text-[30px] text-light-sky-blue cursor-pointer"
          id="hero-name">{t.hero.name.split(' ').slice(-1)[0]}</span
        >

        <p
          class="font-light xl:text-[32px] lg:text-[24px] text-[20px] text-silver mt-5"
        >
          {t.hero.description}
        </p>
      </p>
    </div>
    <div
      class="grid md:grid-cols-4 grid-cols-2 pt-10 xl:gap-x-4 lg:gap-x-2 gap-x-2"
    >
      <Button type="outline" label={t.hero.readMore} href="#about" />
      <Button type="primary" label={t.hero.downloadCV} />
    </div>
  </section>
</SectionContainer>

<script>
  function setupHoverEffect() {
    const name = document.getElementById("hero-name");
    const hoverImg = document.getElementById("hero-hover-img");
    if (!name || !hoverImg) return;

    function showHoverImg(e: MouseEvent) {
      if (!name || !hoverImg) return;
      const rect = name.getBoundingClientRect();
      hoverImg.style.left = `${rect.left - rect.width * 0.1}px`;
      hoverImg.style.top = `${rect.top - rect.height * 2.1}px`;
      hoverImg.style.width = `${rect.width * 1.5}px`;
      hoverImg.style.height = "auto";
      hoverImg.style.display = "block";
    }
    function hideHoverImg() {
      if (!hoverImg) return;
      hoverImg.style.display = "none";
    }
    name.addEventListener("mouseenter", showHoverImg);
    name.addEventListener("mouseleave", hideHoverImg);
  }
  setupHoverEffect();
  document.addEventListener("astro:page-load", setupHoverEffect);

  function manualBounce(img: HTMLElement) {
    if (!img) return;
    let start: number | null = null;
    const duration = 200; // ms for up, then back down
    const maxScale = 1.1;

    function animateBounce(timestamp: number) {
      if (!start) start = timestamp;
      const elapsed = timestamp - start;
      let progress = elapsed / duration;

      if (progress < 0.5) {
        // Scale up
        const scale = 1 + (maxScale - 1) * (progress / 0.5);
        img.style.transform = `scale(${scale})`;
        requestAnimationFrame(animateBounce);
      } else if (progress < 1) {
        // Scale down
        const scale = maxScale - (maxScale - 1) * ((progress - 0.5) / 0.5);
        img.style.transform = `scale(${scale})`;
        requestAnimationFrame(animateBounce);
      } else {
        // End
        img.style.transform = "scale(1)";
      }
    }

    requestAnimationFrame(animateBounce);
  }

  function setupBounceEffect() {
    const name = document.getElementById("hero-name");
    const hoverImg = document.getElementById("hero-hover-img");
    if (!name || !hoverImg) return;

    name.addEventListener("click", () => {
      if (hoverImg.style.display !== "block") return;
      manualBounce(hoverImg);
    });
  }
  setupBounceEffect();
  document.addEventListener("astro:page-load", setupBounceEffect);
</script>
