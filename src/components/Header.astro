---
import { getLangFromUrl, getLocalizedPath, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const homeHref = getLocalizedPath("/", lang);
const isHomePage = Astro.url.pathname === homeHref;
const navLinkBase = isHomePage ? "" : `${homeHref}`;

const menuOptions = [
  { name: t.navigation.about, index: "01", link: "#about", id: "about" },
  { name: t.navigation.skills, index: "02", link: "#skills", id: "skills" },
  { name: t.navigation.work, index: "03", link: "#work", id: "work" },
  { name: t.navigation.blog, index: "04", link: "#blog", id: "blog" },
  { name: t.navigation.contact, index: "05", link: "#contact", id: "contact" },
];
---

<header
  id="header"
  class="fixed top-0 w-full bg-blue-500 xl:py-9 lg:py-7 py-5 sm:py-3 transition-all duration-500 border-b border-yankees-blue font-poppins backdrop-blur-md z-50"
>
  <div class="max-w-6xl mx-auto px-4 h-full flex items-center justify-between">
    <!-- Logo -->
    <a href={homeHref} class="flex-shrink-0" aria-label={t.common.logo}>
      <img
        src="/img/logo.svg"
        alt={t.common.logo}
        class="xl:h-12 lg:h-10 h-8 sm:h-6"
      />
    </a>

    <!-- Desktop Navigation -->
    <nav class="hidden md:flex items-center gap-8">
      <ul class="flex space-x-8">
        {
          menuOptions.map((option) => (
            <li>
              <a
                href={`${navLinkBase}#${option.id}`}
                class="menu-link text-white hover:text-rose transition-colors xl:text-lg hover:bg-rose/20 active:bg-rose/40 rounded-md px-3 py-2"
              >
                {option.name}
                <sup>{option.index}</sup>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>

    <!-- Mobile Menu Button -->
    <button
      id="menuButton"
      class="md:hidden text-white hover:text-rose text-2xl"
    >
      â˜°
    </button>
  </div>

  <!-- Mobile Navigation -->
  <div
    id="mobileMenu"
    class="lg:hidden hidden absolute top-full right-4 w-64 bg-blue bg-opacity-95 shadow-lg rounded-lg"
  >
    <nav class="px-4 py-2">
      <ul class="space-y-2">
        {
          menuOptions.map((option) => (
            <li>
              <a
                href={`${navLinkBase}#${option.id}`}
                class="menu-link block w-full text-lg px-6 py-4 rounded-md text-center text-white hover:text-rose hover:bg-rose/20 active:bg-rose/40 transition-colors font-semibold"
              >
                {option.name}
                <sup>{option.index}</sup>
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<script>
  const menuButton = document.getElementById("menuButton");
  const mobileMenu = document.getElementById("mobileMenu");
  const header = document.getElementById("header");
  const menuOptions = [
    { id: "about" },
    { id: "skills" },
    { id: "work" },
    { id: "blog" },
    { id: "contact" },
  ];

  // Helper: Smooth scroll with offset
  function scrollToSectionWithOffset(id: string) {
    const el = document.getElementById(id);
    if (el) {
      // Use header height as offset, fallback to 0 if not found
      const offset = header ? header.getBoundingClientRect().height : 0;
      const y = el.getBoundingClientRect().top + window.pageYOffset - offset;
      window.scrollTo({ top: y, behavior: "smooth" });
    }
  }

  // Attach click listeners to all nav links (desktop & mobile)
  function setupNavLinks() {
    document.querySelectorAll('a.menu-link').forEach((link) => {
      (link as HTMLAnchorElement).addEventListener(
        "click",
        function (e: MouseEvent) {
          const hash = (this as HTMLAnchorElement).getAttribute("href");
          if (hash) {
            const hashIndex = hash.indexOf('#');
            const id = hashIndex >= 0 ? hash.slice(hashIndex + 1) : '';
            // If target id exists on this page, do smooth scroll
            if (id && document.getElementById(id)) {
              e.preventDefault();
              scrollToSectionWithOffset(id);
              // If mobile menu is open, close it
              if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
                mobileMenu.classList.add("hidden");
              }
            }
          }
        }
      );
    });
  }

  // Helper: Get all section IDs from menuOptions
  const sectionIds = menuOptions.map((opt) => opt.id);
  // Filter to IDs that actually exist on this page (404 and others may miss some)
  function getExistingSectionIds(): string[] {
    return sectionIds.filter((id) => document.getElementById(id));
  }

  // Helper: Set active menu link
  function setActiveMenu(id: string) {
    document.querySelectorAll(".menu-link").forEach((link) => {
      const href = link.getAttribute("href") || "";
      const hashIndex = href.indexOf("#");
      const linkId = hashIndex >= 0 ? href.slice(hashIndex + 1) : "";
      if (id && linkId === id) {
        link.classList.add("active-menu");
      } else {
        link.classList.remove("active-menu");
      }
    });
  }

  // Scroll event handler to update active menu
  function onScroll(): void {
    const headerHeight = header ? header.getBoundingClientRect().height : 0;
    // If we're at (or extremely near) bottom, force last existing section active
    const doc = document.documentElement;
    const atBottom = Math.ceil(window.scrollY + window.innerHeight) >= (doc.scrollHeight - 2);
    if (atBottom) {
      const existing = sectionIds.filter((id) => document.getElementById(id));
      if (existing.length > 0) {
        setActiveMenu(existing[existing.length - 1]);
        return;
      }
    }
    // If we're above the first section, clear selection
    const existingIds = getExistingSectionIds();
    const firstSection = existingIds.length ? document.getElementById(existingIds[0]) : null;
    if (firstSection) {
      const firstTop = firstSection.getBoundingClientRect().top - headerHeight;
      if (firstTop > 0) {
        setActiveMenu("");
        return;
      }
    }

    let current = existingIds.length ? existingIds[0] : "";
    for (const id of existingIds) {
      const section = document.getElementById(id);
      if (!section) continue;
      const rect = section.getBoundingClientRect();
      const sectionTop = rect.top - headerHeight;
      const sectionBottom = rect.bottom - headerHeight;
      // Consider section active if header overlaps its vertical range
      if (sectionTop <= 0 && sectionBottom > 0) {
        current = id;
        break;
      }
      // Fallback to last section passed when scrolled past all
      if (sectionTop <= 0) {
        current = id;
      }
    }
    setActiveMenu(current);
  }

  if (menuButton && mobileMenu) {
    menuButton.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });
  }

  // Setup nav links and scroll handler on DOMContentLoaded
  document.addEventListener("DOMContentLoaded", () => {
    setupNavLinks();
    onScroll();
  });
  window.addEventListener("scroll", onScroll);
</script>
