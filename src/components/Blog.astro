---
import SectionContainer from "@ui/SectionContainer.astro";
import SectionTitle from "@ui/SectionTitle.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { getCollection, type CollectionEntry } from "astro:content";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get blog posts from content collections
const allPosts = await getCollection("blog");
const blogPosts = allPosts
  .filter((post: CollectionEntry<"blog">) => post.data.lang === lang)
  .sort(
    (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
      b.data.date.getTime() - a.data.date.getTime()
  ); // Show all posts

// Format date based on language, keeping UTC
const getLocaleCode = (lang: string) => (lang === "es" ? "es-ES" : "en-US");
const formatDate = (date: Date, lang: string) => {
  return date.toLocaleDateString(getLocaleCode(lang), {
    year: "numeric",
    month: "short",
    day: "numeric",
    timeZone: "UTC",
  });
};
---

<section id="blog" class="mt-5 min-h-screen">
  <div class="w-full h-32"></div>
  <SectionContainer class="-mt-32 pb-16">
    <div class="flex mb-12">
      <div class="w-full">
        <SectionTitle label={t.blog.title} color="blue" />
      </div>
    </div>

    <div class="grid md:grid-cols-3 gap-8">
      {
        blogPosts.map((post) => (
          <article class="group justify-self-end">
            <a
              href={`/blog/${post.slug}`}
              class="block relative rounded-2xl shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden min-h-[420px]"
            >
              {post.data.previewImg && (
                <div class="absolute inset-0 z-0">
                  <img
                    src={post.data.previewImg}
                    alt={post.data.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 opacity-15"
                    data-credit={post.data.imageCredit}
                  />
                </div>
              )}
              <div class="relative z-10 p-6 min-h-[420px] flex flex-col justify-between">
                <div>
                  <div class="flex flex-wrap gap-2 mb-4">
                    {post.data.tags?.slice(0, 2).map((tag) => (
                      <span class="px-2 py-1 bg-water text-blue text-xs rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>

                  <h3 class="text-xl font-medium text-silver-blue mb-3 group-hover:text-white transition-colors duration-200 line-clamp-2">
                    {post.data.title}
                  </h3>
                </div>

                <div>
                  <p class="text-silver-blue hover:text-white transition-colors duration-200 mb-4 line-clamp-3 leading-relaxed">
                    {post.data.description}
                  </p>

                  <div class="flex items-center justify-between">
                    <time
                      class="text-sm text-silver-blue/80 hover:text-silver-blue transition-colors duration-200"
                      datetime={post.data.date.toISOString()}
                    >
                      {formatDate(post.data.date, post.data.lang)}
                    </time>

                    <span class="text-sm font-medium group-hover:translate-x-1 transition-transform duration-200">
                      {t.common.readMore}
                    </span>
                  </div>
                </div>
              </div>
            </a>
          </article>
        ))
      }
    </div>
  </SectionContainer>
</section>
