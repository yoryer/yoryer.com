[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.0","content-config-digest","73c3d589685fdaf1","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\",\"es\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,71,72,124,125,208,209,318,319],"building-personal-website",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"rendered":28,"legacyId":70},{"title":14,"description":15,"date":16,"tags":17,"featured":23,"lang":24},"Building My Personal Website with Astro","How I built my personal portfolio website using Astro, React, and Tailwind CSS with multilingual support.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],"astro","react","tailwind","portfolio","web-development",true,"en","# Building My Personal Website with Astro\n\nCreating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\n\n## Why Astro?\n\nI chose Astro for several compelling reasons:\n\n- **Performance First**: Astro's island architecture ensures zero JavaScript by default, shipping only what's necessary\n- **Framework Agnostic**: I can use React components where needed while keeping the rest static\n- **Developer Experience**: Great TypeScript support and modern tooling out of the box\n\n## Technology Stack\n\nThe website is built with:\n\n- **Astro v5** - The core framework\n- **React** - For interactive components\n- **Tailwind CSS** - For styling with a custom theme\n- **TypeScript** - Type safety throughout\n\n## Key Features\n\n### Multilingual Support\n\nOne feature I'm particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\n\n### Component Architecture\n\nI structured the site using reusable components:\n\n- `SectionContainer` - Consistent spacing and layout\n- `SectionTitle` - Unified typography for section headers\n- Responsive design patterns throughout\n\n### Performance Optimizations\n\n- Optimized images and assets\n- Minimal JavaScript bundle\n- Fast loading times across all devices\n\n## Challenges and Solutions\n\nThe biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\n\n## What's Next?\n\nI'm planning to add:\n\n- Blog functionality with content collections\n- Project showcase with detailed case studies\n- Interactive elements to demonstrate my skills\n\nBuilding this website has been a great learning experience, and I'm excited to continue iterating on it as my skills and career evolve.\n\n## Conclusion\n\nThis project represents not just my technical skills, but also my attention to detail and user experience. It's built with performance, accessibility, and maintainability in mind.\n\nFeel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!","src/content/blog/building-personal-website-en.md","73779b7bcc7bbab5",{"html":29,"metadata":30},"\u003Ch1 id=\"building-my-personal-website-with-astro\">Building My Personal Website with Astro\u003C/h1>\n\u003Cp>Creating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\u003C/p>\n\u003Ch2 id=\"why-astro\">Why Astro?\u003C/h2>\n\u003Cp>I chose Astro for several compelling reasons:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Performance First\u003C/strong>: Astro’s island architecture ensures zero JavaScript by default, shipping only what’s necessary\u003C/li>\n\u003Cli>\u003Cstrong>Framework Agnostic\u003C/strong>: I can use React components where needed while keeping the rest static\u003C/li>\n\u003Cli>\u003Cstrong>Developer Experience\u003C/strong>: Great TypeScript support and modern tooling out of the box\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technology-stack\">Technology Stack\u003C/h2>\n\u003Cp>The website is built with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - The core framework\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - For interactive components\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - For styling with a custom theme\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Type safety throughout\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Ch3 id=\"multilingual-support\">Multilingual Support\u003C/h3>\n\u003Cp>One feature I’m particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\u003C/p>\n\u003Ch3 id=\"component-architecture\">Component Architecture\u003C/h3>\n\u003Cp>I structured the site using reusable components:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Consistent spacing and layout\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Unified typography for section headers\u003C/li>\n\u003Cli>Responsive design patterns throughout\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"performance-optimizations\">Performance Optimizations\u003C/h3>\n\u003Cul>\n\u003Cli>Optimized images and assets\u003C/li>\n\u003Cli>Minimal JavaScript bundle\u003C/li>\n\u003Cli>Fast loading times across all devices\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"challenges-and-solutions\">Challenges and Solutions\u003C/h2>\n\u003Cp>The biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\u003C/p>\n\u003Ch2 id=\"whats-next\">What’s Next?\u003C/h2>\n\u003Cp>I’m planning to add:\u003C/p>\n\u003Cul>\n\u003Cli>Blog functionality with content collections\u003C/li>\n\u003Cli>Project showcase with detailed case studies\u003C/li>\n\u003Cli>Interactive elements to demonstrate my skills\u003C/li>\n\u003C/ul>\n\u003Cp>Building this website has been a great learning experience, and I’m excited to continue iterating on it as my skills and career evolve.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This project represents not just my technical skills, but also my attention to detail and user experience. It’s built with performance, accessibility, and maintainability in mind.\u003C/p>\n\u003Cp>Feel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!\u003C/p>",{"headings":31,"localImagePaths":64,"remoteImagePaths":65,"frontmatter":66,"imagePaths":69},[32,35,39,42,45,49,52,55,58,61],{"depth":33,"slug":34,"text":14},1,"building-my-personal-website-with-astro",{"depth":36,"slug":37,"text":38},2,"why-astro","Why Astro?",{"depth":36,"slug":40,"text":41},"technology-stack","Technology Stack",{"depth":36,"slug":43,"text":44},"key-features","Key Features",{"depth":46,"slug":47,"text":48},3,"multilingual-support","Multilingual Support",{"depth":46,"slug":50,"text":51},"component-architecture","Component Architecture",{"depth":46,"slug":53,"text":54},"performance-optimizations","Performance Optimizations",{"depth":36,"slug":56,"text":57},"challenges-and-solutions","Challenges and Solutions",{"depth":36,"slug":59,"text":60},"whats-next","What’s Next?",{"depth":36,"slug":62,"text":63},"conclusion","Conclusion",[],[],{"title":14,"description":15,"date":67,"tags":68,"featured":23,"lang":24,"slug":11},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],[],"building-personal-website-en.md","construyendo-sitio-web-personal",{"id":71,"data":73,"body":81,"filePath":82,"digest":83,"rendered":84,"legacyId":123},{"title":74,"description":75,"date":76,"tags":77,"featured":23,"lang":80},"Construyendo Mi Sitio Web Personal con Astro","Cómo construí mi sitio web de portafolio personal usando Astro, React y Tailwind CSS con soporte multiidioma.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,78,79],"portafolio","desarrollo-web","es","# Construyendo Mi Sitio Web Personal con Astro\n\nCrear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\n\n## ¿Por qué Astro?\n\nElegí Astro por varias razones convincentes:\n\n- **Rendimiento Primero**: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\n- **Agnóstico de Framework**: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\n- **Experiencia de Desarrollador**: Gran soporte para TypeScript y herramientas modernas listas para usar\n\n## Stack Tecnológico\n\nEl sitio web está construido con:\n\n- **Astro v5** - El framework principal\n- **React** - Para componentes interactivos\n- **Tailwind CSS** - Para estilos con un tema personalizado\n- **TypeScript** - Seguridad de tipos en todo el proyecto\n\n## Características Principales\n\n### Soporte Multiidioma\n\nUna característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\n\n### Arquitectura de Componentes\n\nEstructuré el sitio usando componentes reutilizables:\n\n- `SectionContainer` - Espaciado y diseño consistente\n- `SectionTitle` - Tipografía unificada para encabezados de sección\n- Patrones de diseño responsivo en todo el sitio\n\n### Optimizaciones de Rendimiento\n\n- Imágenes y assets optimizados\n- Bundle de JavaScript mínimo\n- Tiempos de carga rápidos en todos los dispositivos\n\n## Desafíos y Soluciones\n\nEl mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\n\n## ¿Qué Sigue?\n\nEstoy planeando agregar:\n\n- Funcionalidad de blog con colecciones de contenido\n- Vitrina de proyectos con estudios de caso detallados\n- Elementos interactivos para demostrar mis habilidades\n\nConstruir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\n\n## Conclusión\n\nEste proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\n\n¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!","src/content/blog/building-personal-website-es.md","cdfdc155fa203449",{"html":85,"metadata":86},"\u003Ch1 id=\"construyendo-mi-sitio-web-personal-con-astro\">Construyendo Mi Sitio Web Personal con Astro\u003C/h1>\n\u003Cp>Crear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\u003C/p>\n\u003Ch2 id=\"por-qué-astro\">¿Por qué Astro?\u003C/h2>\n\u003Cp>Elegí Astro por varias razones convincentes:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rendimiento Primero\u003C/strong>: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\u003C/li>\n\u003Cli>\u003Cstrong>Agnóstico de Framework\u003C/strong>: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\u003C/li>\n\u003Cli>\u003Cstrong>Experiencia de Desarrollador\u003C/strong>: Gran soporte para TypeScript y herramientas modernas listas para usar\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"stack-tecnológico\">Stack Tecnológico\u003C/h2>\n\u003Cp>El sitio web está construido con:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - El framework principal\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - Para componentes interactivos\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - Para estilos con un tema personalizado\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Seguridad de tipos en todo el proyecto\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"características-principales\">Características Principales\u003C/h2>\n\u003Ch3 id=\"soporte-multiidioma\">Soporte Multiidioma\u003C/h3>\n\u003Cp>Una característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\u003C/p>\n\u003Ch3 id=\"arquitectura-de-componentes\">Arquitectura de Componentes\u003C/h3>\n\u003Cp>Estructuré el sitio usando componentes reutilizables:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Espaciado y diseño consistente\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Tipografía unificada para encabezados de sección\u003C/li>\n\u003Cli>Patrones de diseño responsivo en todo el sitio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"optimizaciones-de-rendimiento\">Optimizaciones de Rendimiento\u003C/h3>\n\u003Cul>\n\u003Cli>Imágenes y assets optimizados\u003C/li>\n\u003Cli>Bundle de JavaScript mínimo\u003C/li>\n\u003Cli>Tiempos de carga rápidos en todos los dispositivos\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"desafíos-y-soluciones\">Desafíos y Soluciones\u003C/h2>\n\u003Cp>El mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\u003C/p>\n\u003Ch2 id=\"qué-sigue\">¿Qué Sigue?\u003C/h2>\n\u003Cp>Estoy planeando agregar:\u003C/p>\n\u003Cul>\n\u003Cli>Funcionalidad de blog con colecciones de contenido\u003C/li>\n\u003Cli>Vitrina de proyectos con estudios de caso detallados\u003C/li>\n\u003Cli>Elementos interactivos para demostrar mis habilidades\u003C/li>\n\u003C/ul>\n\u003Cp>Construir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\u003C/p>\n\u003Ch2 id=\"conclusión\">Conclusión\u003C/h2>\n\u003Cp>Este proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\u003C/p>\n\u003Cp>¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!\u003C/p>",{"headings":87,"localImagePaths":117,"remoteImagePaths":118,"frontmatter":119,"imagePaths":122},[88,90,93,96,99,102,105,108,111,114],{"depth":33,"slug":89,"text":74},"construyendo-mi-sitio-web-personal-con-astro",{"depth":36,"slug":91,"text":92},"por-qué-astro","¿Por qué Astro?",{"depth":36,"slug":94,"text":95},"stack-tecnológico","Stack Tecnológico",{"depth":36,"slug":97,"text":98},"características-principales","Características Principales",{"depth":46,"slug":100,"text":101},"soporte-multiidioma","Soporte Multiidioma",{"depth":46,"slug":103,"text":104},"arquitectura-de-componentes","Arquitectura de Componentes",{"depth":46,"slug":106,"text":107},"optimizaciones-de-rendimiento","Optimizaciones de Rendimiento",{"depth":36,"slug":109,"text":110},"desafíos-y-soluciones","Desafíos y Soluciones",{"depth":36,"slug":112,"text":113},"qué-sigue","¿Qué Sigue?",{"depth":36,"slug":115,"text":116},"conclusión","Conclusión",[],[],{"title":74,"description":75,"date":120,"tags":121,"featured":23,"lang":80,"slug":71},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,78,79],[],"building-personal-website-es.md","flutter-certificate-pinning",{"id":124,"data":126,"body":137,"filePath":138,"digest":139,"rendered":140,"legacyId":207},{"title":127,"description":128,"date":129,"tags":130,"featured":136,"lang":24},"Implementing Certificate Pinning in Flutter","A comprehensive guide to implementing certificate pinning in Flutter applications for enhanced security.",["Date","2024-11-20T00:00:00.000Z"],[131,132,133,134,135],"flutter","security","mobile","certificate-pinning","networking",false,"# Implementing Certificate Pinning in Flutter\n\nSecurity in mobile applications is paramount, especially when dealing with sensitive user data. One crucial security measure is certificate pinning, which helps prevent man-in-the-middle attacks by ensuring your app only trusts specific certificates.\n\n## What is Certificate Pinning?\n\nCertificate pinning is a security technique where an application validates the server's certificate against a known copy stored within the app. This prevents attackers from using fraudulent certificates, even if they've compromised a Certificate Authority.\n\n## Why Certificate Pinning Matters\n\nIn my experience working with financial institutions, certificate pinning is often a mandatory security requirement. Here's why:\n\n- **Prevents MITM Attacks**: Even if an attacker has a valid certificate from a compromised CA, your app won't trust it\n- **Compliance**: Many financial and healthcare regulations require certificate pinning\n- **User Trust**: Additional security builds confidence in your application\n\n## Implementation in Flutter\n\n### Method 1: Using dio with Certificate Pinning\n\nThe most straightforward approach is using the `dio` package with the `dio_certificate_pinning` plugin:\n\n```dart\nimport 'package:dio/dio.dart';\nimport 'package:dio_certificate_pinning/dio_certificate_pinning.dart';\n\nclass SecureHttpClient {\n  late Dio _dio;\n\n  SecureHttpClient() {\n    _dio = Dio();\n    _dio.interceptors.add(\n      CertificatePinningInterceptor(\n        allowedSHAFingerprints: [\n          'YOUR_SHA256_FINGERPRINT_HERE'\n        ],\n      ),\n    );\n  }\n\n  Future\u003CResponse> get(String url) async {\n    return await _dio.get(url);\n  }\n}\n```\n\n### Method 2: Custom HttpClient with SecurityContext\n\nFor more control, you can create a custom `HttpClient`:\n\n```dart\nimport 'dart:io';\nimport 'dart:typed_data';\n\nclass PinnedHttpClient {\n  static HttpClient createPinnedClient() {\n    final client = HttpClient(\n      context: SecurityContext(withTrustedRoots: false),\n    );\n\n    // Add your certificate\n    client.badCertificateCallback = (cert, host, port) {\n      // Implement your pinning logic here\n      return _validateCertificate(cert);\n    };\n\n    return client;\n  }\n\n  static bool _validateCertificate(X509Certificate cert) {\n    // Compare certificate fingerprint\n    final fingerprint = cert.sha256;\n    const expectedFingerprint = 'YOUR_EXPECTED_FINGERPRINT';\n    return fingerprint == expectedFingerprint;\n  }\n}\n```\n\n## Getting Certificate Fingerprints\n\nTo implement certificate pinning, you need the server's certificate fingerprint:\n\n```bash\n# Using OpenSSL\necho | openssl s_client -connect your-domain.com:443 2>/dev/null | \\\n  openssl x509 -fingerprint -sha256 -noout\n\n# Using Chrome DevTools\n# 1. Open your website in Chrome\n# 2. Click the lock icon -> Certificate\n# 3. Go to Details tab -> Copy fingerprint\n```\n\n## Best Practices\n\n### 1. Pin Multiple Certificates\n\nAlways pin multiple certificates to handle certificate rotation:\n\n```dart\nconst allowedFingerprints = [\n  'PRIMARY_CERT_FINGERPRINT',\n  'BACKUP_CERT_FINGERPRINT',\n  'ROOT_CA_FINGERPRINT',\n];\n```\n\n### 2. Implement Graceful Degradation\n\nConsider implementing a fallback mechanism for development:\n\n```dart\nbool get isDebugMode => kDebugMode;\n\nbool _validateCertificate(X509Certificate cert) {\n  if (isDebugMode) {\n    // Allow any certificate in debug mode\n    return true;\n  }\n  return _performActualValidation(cert);\n}\n```\n\n### 3. Certificate Rotation Strategy\n\nPlan for certificate updates:\n\n- Use multiple pins (current + backup)\n- Implement app update mechanisms\n- Monitor certificate expiration dates\n\n## Testing Certificate Pinning\n\n### Testing Valid Certificates\n\n```dart\nvoid testValidCertificate() async {\n  final client = SecureHttpClient();\n  try {\n    final response = await client.get('https://your-api.com/test');\n    print('Success: ${response.statusCode}');\n  } catch (e) {\n    print('Error: $e');\n  }\n}\n```\n\n### Testing Invalid Certificates\n\nUse a proxy tool like Charles Proxy or Burp Suite to test with invalid certificates.\n\n## Common Pitfalls\n\n### 1. Hardcoding in Production\n\nNever hardcode development certificates in production builds:\n\n```dart\n// DON'T DO THIS\nconst devFingerprint = 'DEV_CERT_FINGERPRINT';\nconst prodFingerprint = 'PROD_CERT_FINGERPRINT';\n\n// DO THIS INSTEAD\nconst fingerprint = String.fromEnvironment(\n  'CERT_FINGERPRINT',\n  defaultValue: kDebugMode ? 'DEV_FINGERPRINT' : 'PROD_FINGERPRINT',\n);\n```\n\n### 2. Ignoring Certificate Chain\n\nPin intermediate or root certificates, not just the leaf certificate.\n\n### 3. Poor Error Handling\n\nImplement proper error handling for pinning failures:\n\n```dart\ntry {\n  final response = await client.get(url);\n  return response;\n} on DioError catch (e) {\n  if (e.type == DioErrorType.connectTimeout) {\n    throw NetworkException('Connection timeout');\n  } else if (e.message?.contains('certificate') == true) {\n    throw SecurityException('Certificate validation failed');\n  }\n  rethrow;\n}\n```\n\n## Real-World Considerations\n\nIn my work on banking applications, I've learned that:\n\n- **Performance Impact**: Certificate validation adds minimal overhead\n- **User Experience**: Failed pinning should show clear error messages\n- **Monitoring**: Log pinning failures for security analysis\n- **Updates**: Plan certificate rotation well in advance\n\n## Conclusion\n\nCertificate pinning is a crucial security measure for any Flutter app handling sensitive data. While it adds complexity, the security benefits far outweigh the implementation challenges.\n\nRemember to:\n\n- Test thoroughly with valid and invalid certificates\n- Plan for certificate rotation\n- Implement proper error handling\n- Monitor pinning failures in production\n\nSecurity is not a feature you add later—it's a foundation you build upon from day one.","src/content/blog/flutter-certificate-pinning-en.md","613cda6c0ce1b419",{"html":141,"metadata":142},"\u003Ch1 id=\"implementing-certificate-pinning-in-flutter\">Implementing Certificate Pinning in Flutter\u003C/h1>\n\u003Cp>Security in mobile applications is paramount, especially when dealing with sensitive user data. One crucial security measure is certificate pinning, which helps prevent man-in-the-middle attacks by ensuring your app only trusts specific certificates.\u003C/p>\n\u003Ch2 id=\"what-is-certificate-pinning\">What is Certificate Pinning?\u003C/h2>\n\u003Cp>Certificate pinning is a security technique where an application validates the server’s certificate against a known copy stored within the app. This prevents attackers from using fraudulent certificates, even if they’ve compromised a Certificate Authority.\u003C/p>\n\u003Ch2 id=\"why-certificate-pinning-matters\">Why Certificate Pinning Matters\u003C/h2>\n\u003Cp>In my experience working with financial institutions, certificate pinning is often a mandatory security requirement. Here’s why:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Prevents MITM Attacks\u003C/strong>: Even if an attacker has a valid certificate from a compromised CA, your app won’t trust it\u003C/li>\n\u003Cli>\u003Cstrong>Compliance\u003C/strong>: Many financial and healthcare regulations require certificate pinning\u003C/li>\n\u003Cli>\u003Cstrong>User Trust\u003C/strong>: Additional security builds confidence in your application\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"implementation-in-flutter\">Implementation in Flutter\u003C/h2>\n\u003Ch3 id=\"method-1-using-dio-with-certificate-pinning\">Method 1: Using dio with Certificate Pinning\u003C/h3>\n\u003Cp>The most straightforward approach is using the \u003Ccode>dio\u003C/code> package with the \u003Ccode>dio_certificate_pinning\u003C/code> plugin:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'package:dio/dio.dart'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'package:dio_certificate_pinning/dio_certificate_pinning.dart'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#79B8FF\"> SecureHttpClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  late\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Dio\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> _dio;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  SecureHttpClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    _dio \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Dio\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    _dio.interceptors.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      CertificatePinningInterceptor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        allowedSHAFingerprints\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">          'YOUR_SHA256_FINGERPRINT_HERE'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  Future\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Response\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">String\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url) \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> _dio.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"method-2-custom-httpclient-with-securitycontext\">Method 2: Custom HttpClient with SecurityContext\u003C/h3>\n\u003Cp>For more control, you can create a custom \u003Ccode>HttpClient\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'dart:io'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'dart:typed_data'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#79B8FF\"> PinnedHttpClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  static\u003C/span>\u003Cspan style=\"color:#79B8FF\"> HttpClient\u003C/span>\u003Cspan style=\"color:#B392F0\"> createPinnedClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> HttpClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      context\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> SecurityContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(withTrustedRoots\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Add your certificate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    client.badCertificateCallback \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (cert, host, port) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">      // Implement your pinning logic here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#B392F0\"> _validateCertificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(cert);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  static\u003C/span>\u003Cspan style=\"color:#79B8FF\"> bool\u003C/span>\u003Cspan style=\"color:#B392F0\"> _validateCertificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">X509Certificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cert) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Compare certificate fingerprint\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cert.sha256;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> expectedFingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'YOUR_EXPECTED_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> expectedFingerprint;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"getting-certificate-fingerprints\">Getting Certificate Fingerprints\u003C/h2>\n\u003Cp>To implement certificate pinning, you need the server’s certificate fingerprint:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using OpenSSL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#B392F0\"> openssl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> s_client\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -connect\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> your-domain.com:443\u003C/span>\u003Cspan style=\"color:#F97583\"> 2>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/dev/null\u003C/span>\u003Cspan style=\"color:#F97583\"> |\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  openssl\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> x509\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -fingerprint\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -sha256\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -noout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Using Chrome DevTools\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 1. Open your website in Chrome\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 2. Click the lock icon -> Certificate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 3. Go to Details tab -> Copy fingerprint\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Ch3 id=\"1-pin-multiple-certificates\">1. Pin Multiple Certificates\u003C/h3>\n\u003Cp>Always pin multiple certificates to handle certificate rotation:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> allowedFingerprints \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'PRIMARY_CERT_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'BACKUP_CERT_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'ROOT_CA_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-implement-graceful-degradation\">2. Implement Graceful Degradation\u003C/h3>\n\u003Cp>Consider implementing a fallback mechanism for development:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> get\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> isDebugMode \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> kDebugMode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#B392F0\"> _validateCertificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">X509Certificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cert) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (isDebugMode) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Allow any certificate in debug mode\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#B392F0\"> _performActualValidation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(cert);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-certificate-rotation-strategy\">3. Certificate Rotation Strategy\u003C/h3>\n\u003Cp>Plan for certificate updates:\u003C/p>\n\u003Cul>\n\u003Cli>Use multiple pins (current + backup)\u003C/li>\n\u003Cli>Implement app update mechanisms\u003C/li>\n\u003Cli>Monitor certificate expiration dates\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"testing-certificate-pinning\">Testing Certificate Pinning\u003C/h2>\n\u003Ch3 id=\"testing-valid-certificates\">Testing Valid Certificates\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">void\u003C/span>\u003Cspan style=\"color:#B392F0\"> testValidCertificate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  final\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> SecureHttpClient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    final\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://your-api.com/test'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Success: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">${\u003C/span>\u003Cspan style=\"color:#79B8FF\">response\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">statusCode\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Error: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">$\u003C/span>\u003Cspan style=\"color:#79B8FF\">e\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"testing-invalid-certificates\">Testing Invalid Certificates\u003C/h3>\n\u003Cp>Use a proxy tool like Charles Proxy or Burp Suite to test with invalid certificates.\u003C/p>\n\u003Ch2 id=\"common-pitfalls\">Common Pitfalls\u003C/h2>\n\u003Ch3 id=\"1-hardcoding-in-production\">1. Hardcoding in Production\u003C/h3>\n\u003Cp>Never hardcode development certificates in production builds:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// DON'T DO THIS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> devFingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'DEV_CERT_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> prodFingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'PROD_CERT_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// DO THIS INSTEAD\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fingerprint \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">fromEnvironment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  'CERT_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  defaultValue\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> kDebugMode \u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'DEV_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'PROD_FINGERPRINT'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-ignoring-certificate-chain\">2. Ignoring Certificate Chain\u003C/h3>\n\u003Cp>Pin intermediate or root certificates, not just the leaf certificate.\u003C/p>\n\u003Ch3 id=\"3-poor-error-handling\">3. Poor Error Handling\u003C/h3>\n\u003Cp>Implement proper error handling for pinning failures:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  final\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> client.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> response;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} \u003C/span>\u003Cspan style=\"color:#F97583\">on\u003C/span>\u003Cspan style=\"color:#79B8FF\"> DioError\u003C/span>\u003Cspan style=\"color:#F97583\"> catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e.type \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> DioErrorType\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.connectTimeout) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NetworkException\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Connection timeout'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (e.message\u003C/span>\u003Cspan style=\"color:#F97583\">?\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">contains\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'certificate'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    throw\u003C/span>\u003Cspan style=\"color:#79B8FF\"> SecurityException\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Certificate validation failed'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  rethrow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"real-world-considerations\">Real-World Considerations\u003C/h2>\n\u003Cp>In my work on banking applications, I’ve learned that:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Performance Impact\u003C/strong>: Certificate validation adds minimal overhead\u003C/li>\n\u003Cli>\u003Cstrong>User Experience\u003C/strong>: Failed pinning should show clear error messages\u003C/li>\n\u003Cli>\u003Cstrong>Monitoring\u003C/strong>: Log pinning failures for security analysis\u003C/li>\n\u003Cli>\u003Cstrong>Updates\u003C/strong>: Plan certificate rotation well in advance\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Certificate pinning is a crucial security measure for any Flutter app handling sensitive data. While it adds complexity, the security benefits far outweigh the implementation challenges.\u003C/p>\n\u003Cp>Remember to:\u003C/p>\n\u003Cul>\n\u003Cli>Test thoroughly with valid and invalid certificates\u003C/li>\n\u003Cli>Plan for certificate rotation\u003C/li>\n\u003Cli>Implement proper error handling\u003C/li>\n\u003Cli>Monitor pinning failures in production\u003C/li>\n\u003C/ul>\n\u003Cp>Security is not a feature you add later—it’s a foundation you build upon from day one.\u003C/p>",{"headings":143,"localImagePaths":201,"remoteImagePaths":202,"frontmatter":203,"imagePaths":206},[144,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200],{"depth":33,"slug":145,"text":127},"implementing-certificate-pinning-in-flutter",{"depth":36,"slug":147,"text":148},"what-is-certificate-pinning","What is Certificate Pinning?",{"depth":36,"slug":150,"text":151},"why-certificate-pinning-matters","Why Certificate Pinning Matters",{"depth":36,"slug":153,"text":154},"implementation-in-flutter","Implementation in Flutter",{"depth":46,"slug":156,"text":157},"method-1-using-dio-with-certificate-pinning","Method 1: Using dio with Certificate Pinning",{"depth":46,"slug":159,"text":160},"method-2-custom-httpclient-with-securitycontext","Method 2: Custom HttpClient with SecurityContext",{"depth":36,"slug":162,"text":163},"getting-certificate-fingerprints","Getting Certificate Fingerprints",{"depth":36,"slug":165,"text":166},"best-practices","Best Practices",{"depth":46,"slug":168,"text":169},"1-pin-multiple-certificates","1. Pin Multiple Certificates",{"depth":46,"slug":171,"text":172},"2-implement-graceful-degradation","2. Implement Graceful Degradation",{"depth":46,"slug":174,"text":175},"3-certificate-rotation-strategy","3. Certificate Rotation Strategy",{"depth":36,"slug":177,"text":178},"testing-certificate-pinning","Testing Certificate Pinning",{"depth":46,"slug":180,"text":181},"testing-valid-certificates","Testing Valid Certificates",{"depth":46,"slug":183,"text":184},"testing-invalid-certificates","Testing Invalid Certificates",{"depth":36,"slug":186,"text":187},"common-pitfalls","Common Pitfalls",{"depth":46,"slug":189,"text":190},"1-hardcoding-in-production","1. Hardcoding in Production",{"depth":46,"slug":192,"text":193},"2-ignoring-certificate-chain","2. Ignoring Certificate Chain",{"depth":46,"slug":195,"text":196},"3-poor-error-handling","3. Poor Error Handling",{"depth":36,"slug":198,"text":199},"real-world-considerations","Real-World Considerations",{"depth":36,"slug":62,"text":63},[],[],{"title":127,"description":128,"date":204,"tags":205,"featured":136,"lang":24,"slug":124},["Date","2024-11-20T00:00:00.000Z"],[131,132,133,134,135],[],"flutter-certificate-pinning-en.md","custom-mechanical-keyboard",{"id":208,"data":210,"body":220,"filePath":221,"digest":222,"rendered":223,"legacyId":317},{"title":211,"description":212,"date":213,"tags":214,"featured":136,"lang":24},"Building My Custom Mechanical Keyboard","The journey of designing and building a custom mechanical keyboard from scratch, including component selection and assembly process.",["Date","2024-10-05T00:00:00.000Z"],[215,216,217,218,219],"mechanical-keyboard","diy","hardware","productivity","tools","# Building My Custom Mechanical Keyboard\n\nAs a software developer who spends countless hours typing, I've always been fascinated by mechanical keyboards. After using various off-the-shelf options, I decided it was time to build something truly customized to my needs and preferences.\n\n## Why Build a Custom Keyboard?\n\nThe decision to build a custom mechanical keyboard came from several pain points with commercial options:\n\n- **Limited Layout Options**: Most keyboards don't offer the exact layout I wanted\n- **Switch Preferences**: I wanted to experiment with different switch types\n- **Build Quality**: Many keyboards compromise on materials to hit price points\n- **Personalization**: I wanted something uniquely mine\n\n## Planning the Build\n\n### Layout Decision\n\nAfter much research, I settled on a 75% layout because it offers:\n\n- Function keys (essential for development)\n- Compact footprint\n- Arrow keys and navigation cluster\n- Good balance between functionality and desk space\n\n### Component Selection\n\n**PCB**: I chose a hot-swappable PCB to allow switch experimentation without soldering.\n\n**Switches**: After testing various options, I went with:\n\n- **Gateron Oil Kings** for alphas (smooth linear switches)\n- **Boba U4T** for modifiers (tactile switches for intentional key presses)\n\n**Keycaps**: PBT double-shot keycaps in a clean, minimalist profile that doesn't distract from code.\n\n**Case**: Aluminum case for durability and premium feel.\n\n## The Build Process\n\n### Step 1: PCB Preparation\n\nFirst, I tested the PCB to ensure all switches registered correctly:\n\n```bash\n# Used VIA software to test each key position\n# Flashed QMK firmware with my custom layout\n```\n\n### Step 2: Stabilizer Installation\n\nProper stabilizer installation is crucial for larger keys:\n\n- Clipped and lubed stabilizers for smooth operation\n- Band-aid mod on mounting points to reduce rattle\n- Balanced wire tension for consistent feel\n\n### Step 3: Switch Installation\n\nThe hot-swap PCB made this straightforward:\n\n- Carefully aligned each switch to prevent bent pins\n- Ensured consistent seating across all positions\n- Double-checked actuation before proceeding\n\n### Step 4: Assembly\n\nFinal assembly was satisfying but required patience:\n\n- Foam dampening material between PCB and case\n- Careful cable routing for clean internal layout\n- Multiple test fittings to ensure perfect alignment\n\n## Custom Programming\n\nOne of the biggest advantages of a custom keyboard is programmability. Using QMK firmware, I implemented:\n\n### Layer System\n\n```c\n// Layer 0: Base QWERTY layout\n// Layer 1: Function keys and media controls\n// Layer 2: Development-specific shortcuts\n```\n\n### Development-Focused Features\n\n- **Bracket Macros**: Quick access to different bracket types\n- **Git Shortcuts**: Common git commands on a dedicated layer\n- **IDE Navigation**: Custom shortcuts for VS Code and other editors\n\n### Productivity Enhancements\n\n- **Auto-shift**: Hold any key longer for its shifted version\n- **Tap Dance**: Multi-function keys that do different things based on tap count\n- **Leader Key**: Vim-style leader sequences for complex actions\n\n## The Programming Experience\n\n### QMK Configuration\n\nSetting up QMK was surprisingly approachable:\n\n```c\n// keymap.c snippet\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = LAYOUT(\n        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\n        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\n        // ... rest of layout\n    ),\n};\n```\n\n### Custom Macros\n\nI implemented several macros for common development tasks:\n\n```c\n// Auto-bracket macro\ncase BRACKETS:\n    if (record->event.pressed) {\n        SEND_STRING(\"()\");\n        tap_code(KC_LEFT);\n    }\n    break;\n```\n\n## Lessons Learned\n\n### What Worked Well\n\n- **Hot-swap PCB**: Game-changer for experimentation\n- **Multiple Switch Types**: Using different switches for different key groups\n- **QMK Firmware**: Incredibly powerful and flexible\n- **Quality Components**: Worth investing in good switches and keycaps\n\n### Challenges Faced\n\n- **Learning Curve**: QMK documentation can be overwhelming initially\n- **Component Compatibility**: Not all parts work together seamlessly\n- **Time Investment**: The build process took much longer than expected\n- **Cost**: Quality components add up quickly\n\n### Unexpected Benefits\n\n- **Typing Improvement**: More intentional typing due to the tactile feedback\n- **Desk Aesthetics**: The custom board became a conversation piece\n- **Technical Skills**: Learned about electronics, firmware, and hardware design\n- **Community**: Connected with the mechanical keyboard enthusiast community\n\n## Impact on Development Work\n\nAfter using the custom keyboard for several months:\n\n### Productivity Gains\n\n- **Faster Navigation**: Custom shortcuts reduced time spent in menus\n- **Reduced RSI**: Better ergonomics and switch choice reduced hand strain\n- **Improved Accuracy**: Quality switches reduced typos\n- **Mental Focus**: The satisfying typing experience improved concentration\n\n### Workflow Integration\n\nThe keyboard integrates seamlessly with my development environment:\n\n- **IDE Shortcuts**: Custom layer for VS Code, IntelliJ, and Vim\n- **Terminal Navigation**: Optimized for command-line work\n- **Git Integration**: Quick access to common git operations\n- **Documentation**: Shortcuts for quickly accessing docs and references\n\n## Future Improvements\n\nI'm already planning the next iteration:\n\n### Hardware Upgrades\n\n- **Gasket Mount**: For improved typing feel\n- **Rotary Encoder**: For volume and scroll control\n- **OLED Display**: To show current layer and system info\n- **Wireless Option**: Exploring ZMK firmware for wireless builds\n\n### Software Enhancements\n\n- **Advanced Macros**: More sophisticated text manipulation\n- **Context-Aware Layers**: Different layouts for different applications\n- **RGB Integration**: Functional lighting that indicates layer state\n- **Productivity Metrics**: Tracking typing patterns and efficiency\n\n## Conclusion\n\nBuilding a custom mechanical keyboard has been one of the most rewarding technical projects I've undertaken. It combines hardware, software, and design in a way that directly impacts my daily work.\n\nThe process taught me:\n\n- The importance of quality tools for professional work\n- How deep customization can improve efficiency\n- The value of community knowledge and open-source projects\n- That the best solutions often require time and iteration\n\nFor fellow developers considering a custom keyboard: the investment in time and money pays dividends in daily comfort and productivity. Start with a simple build and iterate—you'll be surprised how much it improves your development experience.\n\n## Resources\n\n- **QMK Firmware**: [qmk.fm](https://qmk.fm)\n- **Keyboard University**: Comprehensive learning resource\n- **r/MechanicalKeyboards**: Active community for advice and inspiration\n- **Vendor Recommendations**: Based on personal experience with quality and service\n\nThe custom keyboard has become an essential part of my development setup, and I can't imagine going back to off-the-shelf options. If you spend significant time typing, investing in a quality, customized input device is one of the best upgrades you can make.","src/content/blog/custom-mechanical-keyboard-en.md","635df01f07ac8e3e",{"html":224,"metadata":225},"\u003Ch1 id=\"building-my-custom-mechanical-keyboard\">Building My Custom Mechanical Keyboard\u003C/h1>\n\u003Cp>As a software developer who spends countless hours typing, I’ve always been fascinated by mechanical keyboards. After using various off-the-shelf options, I decided it was time to build something truly customized to my needs and preferences.\u003C/p>\n\u003Ch2 id=\"why-build-a-custom-keyboard\">Why Build a Custom Keyboard?\u003C/h2>\n\u003Cp>The decision to build a custom mechanical keyboard came from several pain points with commercial options:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Limited Layout Options\u003C/strong>: Most keyboards don’t offer the exact layout I wanted\u003C/li>\n\u003Cli>\u003Cstrong>Switch Preferences\u003C/strong>: I wanted to experiment with different switch types\u003C/li>\n\u003Cli>\u003Cstrong>Build Quality\u003C/strong>: Many keyboards compromise on materials to hit price points\u003C/li>\n\u003Cli>\u003Cstrong>Personalization\u003C/strong>: I wanted something uniquely mine\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"planning-the-build\">Planning the Build\u003C/h2>\n\u003Ch3 id=\"layout-decision\">Layout Decision\u003C/h3>\n\u003Cp>After much research, I settled on a 75% layout because it offers:\u003C/p>\n\u003Cul>\n\u003Cli>Function keys (essential for development)\u003C/li>\n\u003Cli>Compact footprint\u003C/li>\n\u003Cli>Arrow keys and navigation cluster\u003C/li>\n\u003Cli>Good balance between functionality and desk space\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"component-selection\">Component Selection\u003C/h3>\n\u003Cp>\u003Cstrong>PCB\u003C/strong>: I chose a hot-swappable PCB to allow switch experimentation without soldering.\u003C/p>\n\u003Cp>\u003Cstrong>Switches\u003C/strong>: After testing various options, I went with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gateron Oil Kings\u003C/strong> for alphas (smooth linear switches)\u003C/li>\n\u003Cli>\u003Cstrong>Boba U4T\u003C/strong> for modifiers (tactile switches for intentional key presses)\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Keycaps\u003C/strong>: PBT double-shot keycaps in a clean, minimalist profile that doesn’t distract from code.\u003C/p>\n\u003Cp>\u003Cstrong>Case\u003C/strong>: Aluminum case for durability and premium feel.\u003C/p>\n\u003Ch2 id=\"the-build-process\">The Build Process\u003C/h2>\n\u003Ch3 id=\"step-1-pcb-preparation\">Step 1: PCB Preparation\u003C/h3>\n\u003Cp>First, I tested the PCB to ensure all switches registered correctly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Used VIA software to test each key position\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Flashed QMK firmware with my custom layout\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-2-stabilizer-installation\">Step 2: Stabilizer Installation\u003C/h3>\n\u003Cp>Proper stabilizer installation is crucial for larger keys:\u003C/p>\n\u003Cul>\n\u003Cli>Clipped and lubed stabilizers for smooth operation\u003C/li>\n\u003Cli>Band-aid mod on mounting points to reduce rattle\u003C/li>\n\u003Cli>Balanced wire tension for consistent feel\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-3-switch-installation\">Step 3: Switch Installation\u003C/h3>\n\u003Cp>The hot-swap PCB made this straightforward:\u003C/p>\n\u003Cul>\n\u003Cli>Carefully aligned each switch to prevent bent pins\u003C/li>\n\u003Cli>Ensured consistent seating across all positions\u003C/li>\n\u003Cli>Double-checked actuation before proceeding\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-4-assembly\">Step 4: Assembly\u003C/h3>\n\u003Cp>Final assembly was satisfying but required patience:\u003C/p>\n\u003Cul>\n\u003Cli>Foam dampening material between PCB and case\u003C/li>\n\u003Cli>Careful cable routing for clean internal layout\u003C/li>\n\u003Cli>Multiple test fittings to ensure perfect alignment\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"custom-programming\">Custom Programming\u003C/h2>\n\u003Cp>One of the biggest advantages of a custom keyboard is programmability. Using QMK firmware, I implemented:\u003C/p>\n\u003Ch3 id=\"layer-system\">Layer System\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Layer 0: Base QWERTY layout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Layer 1: Function keys and media controls\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Layer 2: Development-specific shortcuts\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"development-focused-features\">Development-Focused Features\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Bracket Macros\u003C/strong>: Quick access to different bracket types\u003C/li>\n\u003Cli>\u003Cstrong>Git Shortcuts\u003C/strong>: Common git commands on a dedicated layer\u003C/li>\n\u003Cli>\u003Cstrong>IDE Navigation\u003C/strong>: Custom shortcuts for VS Code and other editors\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"productivity-enhancements\">Productivity Enhancements\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Auto-shift\u003C/strong>: Hold any key longer for its shifted version\u003C/li>\n\u003Cli>\u003Cstrong>Tap Dance\u003C/strong>: Multi-function keys that do different things based on tap count\u003C/li>\n\u003Cli>\u003Cstrong>Leader Key\u003C/strong>: Vim-style leader sequences for complex actions\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-programming-experience\">The Programming Experience\u003C/h2>\n\u003Ch3 id=\"qmk-configuration\">QMK Configuration\u003C/h3>\n\u003Cp>Setting up QMK was surprisingly approachable:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// keymap.c snippet\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#F97583\"> uint16_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PROGMEM keymaps\u003C/span>\u003Cspan style=\"color:#F97583\">[]\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[MATRIX_ROWS][MATRIX_COLS] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> LAYOUT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // ... rest of layout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"custom-macros\">Custom Macros\u003C/h3>\n\u003Cp>I implemented several macros for common development tasks:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Auto-bracket macro\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">case BRACKETS:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (record\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\">event.pressed) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        SEND_STRING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        tap_code\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(KC_LEFT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"lessons-learned\">Lessons Learned\u003C/h2>\n\u003Ch3 id=\"what-worked-well\">What Worked Well\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Hot-swap PCB\u003C/strong>: Game-changer for experimentation\u003C/li>\n\u003Cli>\u003Cstrong>Multiple Switch Types\u003C/strong>: Using different switches for different key groups\u003C/li>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: Incredibly powerful and flexible\u003C/li>\n\u003Cli>\u003Cstrong>Quality Components\u003C/strong>: Worth investing in good switches and keycaps\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"challenges-faced\">Challenges Faced\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Learning Curve\u003C/strong>: QMK documentation can be overwhelming initially\u003C/li>\n\u003Cli>\u003Cstrong>Component Compatibility\u003C/strong>: Not all parts work together seamlessly\u003C/li>\n\u003Cli>\u003Cstrong>Time Investment\u003C/strong>: The build process took much longer than expected\u003C/li>\n\u003Cli>\u003Cstrong>Cost\u003C/strong>: Quality components add up quickly\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"unexpected-benefits\">Unexpected Benefits\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Typing Improvement\u003C/strong>: More intentional typing due to the tactile feedback\u003C/li>\n\u003Cli>\u003Cstrong>Desk Aesthetics\u003C/strong>: The custom board became a conversation piece\u003C/li>\n\u003Cli>\u003Cstrong>Technical Skills\u003C/strong>: Learned about electronics, firmware, and hardware design\u003C/li>\n\u003Cli>\u003Cstrong>Community\u003C/strong>: Connected with the mechanical keyboard enthusiast community\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"impact-on-development-work\">Impact on Development Work\u003C/h2>\n\u003Cp>After using the custom keyboard for several months:\u003C/p>\n\u003Ch3 id=\"productivity-gains\">Productivity Gains\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Faster Navigation\u003C/strong>: Custom shortcuts reduced time spent in menus\u003C/li>\n\u003Cli>\u003Cstrong>Reduced RSI\u003C/strong>: Better ergonomics and switch choice reduced hand strain\u003C/li>\n\u003Cli>\u003Cstrong>Improved Accuracy\u003C/strong>: Quality switches reduced typos\u003C/li>\n\u003Cli>\u003Cstrong>Mental Focus\u003C/strong>: The satisfying typing experience improved concentration\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"workflow-integration\">Workflow Integration\u003C/h3>\n\u003Cp>The keyboard integrates seamlessly with my development environment:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>IDE Shortcuts\u003C/strong>: Custom layer for VS Code, IntelliJ, and Vim\u003C/li>\n\u003Cli>\u003Cstrong>Terminal Navigation\u003C/strong>: Optimized for command-line work\u003C/li>\n\u003Cli>\u003Cstrong>Git Integration\u003C/strong>: Quick access to common git operations\u003C/li>\n\u003Cli>\u003Cstrong>Documentation\u003C/strong>: Shortcuts for quickly accessing docs and references\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"future-improvements\">Future Improvements\u003C/h2>\n\u003Cp>I’m already planning the next iteration:\u003C/p>\n\u003Ch3 id=\"hardware-upgrades\">Hardware Upgrades\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gasket Mount\u003C/strong>: For improved typing feel\u003C/li>\n\u003Cli>\u003Cstrong>Rotary Encoder\u003C/strong>: For volume and scroll control\u003C/li>\n\u003Cli>\u003Cstrong>OLED Display\u003C/strong>: To show current layer and system info\u003C/li>\n\u003Cli>\u003Cstrong>Wireless Option\u003C/strong>: Exploring ZMK firmware for wireless builds\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"software-enhancements\">Software Enhancements\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Advanced Macros\u003C/strong>: More sophisticated text manipulation\u003C/li>\n\u003Cli>\u003Cstrong>Context-Aware Layers\u003C/strong>: Different layouts for different applications\u003C/li>\n\u003Cli>\u003Cstrong>RGB Integration\u003C/strong>: Functional lighting that indicates layer state\u003C/li>\n\u003Cli>\u003Cstrong>Productivity Metrics\u003C/strong>: Tracking typing patterns and efficiency\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Building a custom mechanical keyboard has been one of the most rewarding technical projects I’ve undertaken. It combines hardware, software, and design in a way that directly impacts my daily work.\u003C/p>\n\u003Cp>The process taught me:\u003C/p>\n\u003Cul>\n\u003Cli>The importance of quality tools for professional work\u003C/li>\n\u003Cli>How deep customization can improve efficiency\u003C/li>\n\u003Cli>The value of community knowledge and open-source projects\u003C/li>\n\u003Cli>That the best solutions often require time and iteration\u003C/li>\n\u003C/ul>\n\u003Cp>For fellow developers considering a custom keyboard: the investment in time and money pays dividends in daily comfort and productivity. Start with a simple build and iterate—you’ll be surprised how much it improves your development experience.\u003C/p>\n\u003Ch2 id=\"resources\">Resources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: \u003Ca href=\"https://qmk.fm\">qmk.fm\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Keyboard University\u003C/strong>: Comprehensive learning resource\u003C/li>\n\u003Cli>\u003Cstrong>r/MechanicalKeyboards\u003C/strong>: Active community for advice and inspiration\u003C/li>\n\u003Cli>\u003Cstrong>Vendor Recommendations\u003C/strong>: Based on personal experience with quality and service\u003C/li>\n\u003C/ul>\n\u003Cp>The custom keyboard has become an essential part of my development setup, and I can’t imagine going back to off-the-shelf options. If you spend significant time typing, investing in a quality, customized input device is one of the best upgrades you can make.\u003C/p>",{"headings":226,"localImagePaths":311,"remoteImagePaths":312,"frontmatter":313,"imagePaths":316},[227,229,232,235,238,241,244,247,250,253,256,259,262,265,268,271,274,277,280,283,286,289,292,295,298,301,304,307,308],{"depth":33,"slug":228,"text":211},"building-my-custom-mechanical-keyboard",{"depth":36,"slug":230,"text":231},"why-build-a-custom-keyboard","Why Build a Custom Keyboard?",{"depth":36,"slug":233,"text":234},"planning-the-build","Planning the Build",{"depth":46,"slug":236,"text":237},"layout-decision","Layout Decision",{"depth":46,"slug":239,"text":240},"component-selection","Component Selection",{"depth":36,"slug":242,"text":243},"the-build-process","The Build Process",{"depth":46,"slug":245,"text":246},"step-1-pcb-preparation","Step 1: PCB Preparation",{"depth":46,"slug":248,"text":249},"step-2-stabilizer-installation","Step 2: Stabilizer Installation",{"depth":46,"slug":251,"text":252},"step-3-switch-installation","Step 3: Switch Installation",{"depth":46,"slug":254,"text":255},"step-4-assembly","Step 4: Assembly",{"depth":36,"slug":257,"text":258},"custom-programming","Custom Programming",{"depth":46,"slug":260,"text":261},"layer-system","Layer System",{"depth":46,"slug":263,"text":264},"development-focused-features","Development-Focused Features",{"depth":46,"slug":266,"text":267},"productivity-enhancements","Productivity Enhancements",{"depth":36,"slug":269,"text":270},"the-programming-experience","The Programming Experience",{"depth":46,"slug":272,"text":273},"qmk-configuration","QMK Configuration",{"depth":46,"slug":275,"text":276},"custom-macros","Custom Macros",{"depth":36,"slug":278,"text":279},"lessons-learned","Lessons Learned",{"depth":46,"slug":281,"text":282},"what-worked-well","What Worked Well",{"depth":46,"slug":284,"text":285},"challenges-faced","Challenges Faced",{"depth":46,"slug":287,"text":288},"unexpected-benefits","Unexpected Benefits",{"depth":36,"slug":290,"text":291},"impact-on-development-work","Impact on Development Work",{"depth":46,"slug":293,"text":294},"productivity-gains","Productivity Gains",{"depth":46,"slug":296,"text":297},"workflow-integration","Workflow Integration",{"depth":36,"slug":299,"text":300},"future-improvements","Future Improvements",{"depth":46,"slug":302,"text":303},"hardware-upgrades","Hardware Upgrades",{"depth":46,"slug":305,"text":306},"software-enhancements","Software Enhancements",{"depth":36,"slug":62,"text":63},{"depth":36,"slug":309,"text":310},"resources","Resources",[],[],{"title":211,"description":212,"date":314,"tags":315,"featured":136,"lang":24,"slug":208},["Date","2024-10-05T00:00:00.000Z"],[215,216,217,218,219],[],"custom-mechanical-keyboard-en.md","teclado-mecánico-personalizado",{"id":318,"data":320,"body":328,"filePath":329,"digest":330,"rendered":331,"legacyId":425},{"title":321,"description":322,"date":323,"tags":324,"featured":136,"lang":80},"Construyendo Mi Teclado Mecánico Personalizado","El viaje de diseñar y construir un teclado mecánico personalizado desde cero, incluyendo selección de componentes y proceso de ensamblaje.",["Date","2024-10-05T00:00:00.000Z"],[325,216,217,326,327],"teclado-mecánico","productividad","herramientas","# Construyendo Mi Teclado Mecánico Personalizado\n\nComo desarrollador de software que pasa incontables horas escribiendo, siempre me han fascinado los teclados mecánicos. Después de usar varias opciones comerciales, decidí que era hora de construir algo verdaderamente personalizado para mis necesidades y preferencias.\n\n## ¿Por qué Construir un Teclado Personalizado?\n\nLa decisión de construir un teclado mecánico personalizado surgió de varios problemas con las opciones comerciales:\n\n- **Opciones de Layout Limitadas**: La mayoría de teclados no ofrecen exactamente el layout que quería\n- **Preferencias de Switches**: Quería experimentar con diferentes tipos de switches\n- **Calidad de Construcción**: Muchos teclados comprometen materiales para alcanzar ciertos precios\n- **Personalización**: Quería algo únicamente mío\n\n## Planificando la Construcción\n\n### Decisión de Layout\n\nDespués de mucha investigación, me decidí por un layout 75% porque ofrece:\n\n- Teclas de función (esenciales para desarrollo)\n- Huella compacta\n- Teclas de dirección y cluster de navegación\n- Buen balance entre funcionalidad y espacio en el escritorio\n\n### Selección de Componentes\n\n**PCB**: Elegí un PCB hot-swappable para permitir experimentación de switches sin soldadura.\n\n**Switches**: Después de probar varias opciones, opté por:\n\n- **Gateron Oil Kings** para alfas (switches lineales suaves)\n- **Boba U4T** para modificadores (switches táctiles para pulsaciones intencionales)\n\n**Keycaps**: Keycaps PBT double-shot en un perfil limpio y minimalista que no distrae del código.\n\n**Case**: Case de aluminio para durabilidad y sensación premium.\n\n## El Proceso de Construcción\n\n### Paso 1: Preparación del PCB\n\nPrimero, probé el PCB para asegurar que todos los switches registraran correctamente:\n\n```bash\n# Usé software VIA para probar cada posición de tecla\n# Flasheé firmware QMK con mi layout personalizado\n```\n\n### Paso 2: Instalación de Estabilizadores\n\nLa instalación adecuada de estabilizadores es crucial para teclas más grandes:\n\n- Recorté y lubrifiqué estabilizadores para operación suave\n- Mod de band-aid en puntos de montaje para reducir ruido\n- Tensión balanceada del alambre para sensación consistente\n\n### Paso 3: Instalación de Switches\n\nEl PCB hot-swap hizo esto sencillo:\n\n- Alineé cuidadosamente cada switch para prevenir pines doblados\n- Aseguré asentamiento consistente en todas las posiciones\n- Verifiqué doble activación antes de proceder\n\n### Paso 4: Ensamblaje\n\nEl ensamblaje final fue satisfactorio pero requirió paciencia:\n\n- Material amortiguador de espuma entre PCB y case\n- Enrutado cuidadoso de cables para layout interno limpio\n- Múltiples pruebas de ajuste para asegurar alineación perfecta\n\n## Programación Personalizada\n\nUna de las mayores ventajas de un teclado personalizado es la programabilidad. Usando firmware QMK, implementé:\n\n### Sistema de Capas\n\n```c\n// Capa 0: Layout base QWERTY\n// Capa 1: Teclas de función y controles multimedia\n// Capa 2: Atajos específicos para desarrollo\n```\n\n### Características Enfocadas en Desarrollo\n\n- **Macros de Brackets**: Acceso rápido a diferentes tipos de brackets\n- **Atajos de Git**: Comandos git comunes en una capa dedicada\n- **Navegación IDE**: Atajos personalizados para VS Code y otros editores\n\n### Mejoras de Productividad\n\n- **Auto-shift**: Mantener cualquier tecla más tiempo para su versión shifteada\n- **Tap Dance**: Teclas multifunción que hacen cosas diferentes basadas en número de toques\n- **Leader Key**: Secuencias estilo Vim para acciones complejas\n\n## La Experiencia de Programación\n\n### Configuración QMK\n\nConfigurar QMK fue sorprendentemente accesible:\n\n```c\n// fragmento de keymap.c\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = LAYOUT(\n        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\n        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\n        // ... resto del layout\n    ),\n};\n```\n\n### Macros Personalizados\n\nImplementé varios macros para tareas comunes de desarrollo:\n\n```c\n// Macro auto-bracket\ncase BRACKETS:\n    if (record->event.pressed) {\n        SEND_STRING(\"()\");\n        tap_code(KC_LEFT);\n    }\n    break;\n```\n\n## Lecciones Aprendidas\n\n### Lo que Funcionó Bien\n\n- **PCB Hot-swap**: Cambió el juego para experimentación\n- **Múltiples Tipos de Switches**: Usar diferentes switches para diferentes grupos de teclas\n- **Firmware QMK**: Increíblemente poderoso y flexible\n- **Componentes de Calidad**: Vale la pena invertir en buenos switches y keycaps\n\n### Desafíos Enfrentados\n\n- **Curva de Aprendizaje**: La documentación de QMK puede ser abrumadora inicialmente\n- **Compatibilidad de Componentes**: No todas las partes funcionan juntas perfectamente\n- **Inversión de Tiempo**: El proceso de construcción tomó mucho más tiempo del esperado\n- **Costo**: Los componentes de calidad se suman rápidamente\n\n### Beneficios Inesperados\n\n- **Mejora en Escritura**: Escritura más intencional debido al feedback táctil\n- **Estética del Escritorio**: El teclado personalizado se convirtió en pieza de conversación\n- **Habilidades Técnicas**: Aprendí sobre electrónica, firmware y diseño de hardware\n- **Comunidad**: Me conecté con la comunidad de entusiastas de teclados mecánicos\n\n## Impacto en el Trabajo de Desarrollo\n\nDespués de usar el teclado personalizado por varios meses:\n\n### Ganancias de Productividad\n\n- **Navegación Más Rápida**: Atajos personalizados redujeron tiempo en menús\n- **RSI Reducido**: Mejor ergonomía y elección de switches redujo tensión en manos\n- **Precisión Mejorada**: Switches de calidad redujeron errores de tipeo\n- **Enfoque Mental**: La experiencia satisfactoria de escritura mejoró concentración\n\n### Integración de Flujo de Trabajo\n\nEl teclado se integra perfectamente con mi entorno de desarrollo:\n\n- **Atajos IDE**: Capa personalizada para VS Code, IntelliJ y Vim\n- **Navegación Terminal**: Optimizado para trabajo en línea de comandos\n- **Integración Git**: Acceso rápido a operaciones git comunes\n- **Documentación**: Atajos para acceder rápidamente a docs y referencias\n\n## Mejoras Futuras\n\nYa estoy planeando la siguiente iteración:\n\n### Mejoras de Hardware\n\n- **Gasket Mount**: Para mejor sensación de escritura\n- **Rotary Encoder**: Para control de volumen y scroll\n- **Pantalla OLED**: Para mostrar capa actual e info del sistema\n- **Opción Inalámbrica**: Explorando firmware ZMK para builds inalámbricos\n\n### Mejoras de Software\n\n- **Macros Avanzados**: Manipulación de texto más sofisticada\n- **Capas Context-Aware**: Diferentes layouts para diferentes aplicaciones\n- **Integración RGB**: Iluminación funcional que indica estado de capa\n- **Métricas de Productividad**: Seguimiento de patrones de escritura y eficiencia\n\n## Conclusión\n\nConstruir un teclado mecánico personalizado ha sido uno de los proyectos técnicos más gratificantes que he emprendido. Combina hardware, software y diseño de una manera que impacta directamente mi trabajo diario.\n\nEl proceso me enseñó:\n\n- La importancia de herramientas de calidad para trabajo profesional\n- Cómo la personalización profunda puede mejorar eficiencia\n- El valor del conocimiento comunitario y proyectos open-source\n- Que las mejores soluciones a menudo requieren tiempo e iteración\n\nPara compañeros desarrolladores considerando un teclado personalizado: la inversión en tiempo y dinero paga dividendos en comodidad y productividad diaria. Comienza con una construcción simple e itera—te sorprenderá cuánto mejora tu experiencia de desarrollo.\n\n## Recursos\n\n- **QMK Firmware**: [qmk.fm](https://qmk.fm)\n- **Keyboard University**: Recurso de aprendizaje integral\n- **r/MechanicalKeyboards**: Comunidad activa para consejos e inspiración\n- **Recomendaciones de Vendedores**: Basadas en experiencia personal con calidad y servicio\n\nEl teclado personalizado se ha convertido en una parte esencial de mi setup de desarrollo, y no puedo imaginar volver a opciones comerciales. Si pasas tiempo significativo escribiendo, invertir en un dispositivo de entrada de calidad y personalizado es una de las mejores mejoras que puedes hacer.","src/content/blog/custom-mechanical-keyboard-es.md","2833b842b0da7be1",{"html":332,"metadata":333},"\u003Ch1 id=\"construyendo-mi-teclado-mecánico-personalizado\">Construyendo Mi Teclado Mecánico Personalizado\u003C/h1>\n\u003Cp>Como desarrollador de software que pasa incontables horas escribiendo, siempre me han fascinado los teclados mecánicos. Después de usar varias opciones comerciales, decidí que era hora de construir algo verdaderamente personalizado para mis necesidades y preferencias.\u003C/p>\n\u003Ch2 id=\"por-qué-construir-un-teclado-personalizado\">¿Por qué Construir un Teclado Personalizado?\u003C/h2>\n\u003Cp>La decisión de construir un teclado mecánico personalizado surgió de varios problemas con las opciones comerciales:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Opciones de Layout Limitadas\u003C/strong>: La mayoría de teclados no ofrecen exactamente el layout que quería\u003C/li>\n\u003Cli>\u003Cstrong>Preferencias de Switches\u003C/strong>: Quería experimentar con diferentes tipos de switches\u003C/li>\n\u003Cli>\u003Cstrong>Calidad de Construcción\u003C/strong>: Muchos teclados comprometen materiales para alcanzar ciertos precios\u003C/li>\n\u003Cli>\u003Cstrong>Personalización\u003C/strong>: Quería algo únicamente mío\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"planificando-la-construcción\">Planificando la Construcción\u003C/h2>\n\u003Ch3 id=\"decisión-de-layout\">Decisión de Layout\u003C/h3>\n\u003Cp>Después de mucha investigación, me decidí por un layout 75% porque ofrece:\u003C/p>\n\u003Cul>\n\u003Cli>Teclas de función (esenciales para desarrollo)\u003C/li>\n\u003Cli>Huella compacta\u003C/li>\n\u003Cli>Teclas de dirección y cluster de navegación\u003C/li>\n\u003Cli>Buen balance entre funcionalidad y espacio en el escritorio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"selección-de-componentes\">Selección de Componentes\u003C/h3>\n\u003Cp>\u003Cstrong>PCB\u003C/strong>: Elegí un PCB hot-swappable para permitir experimentación de switches sin soldadura.\u003C/p>\n\u003Cp>\u003Cstrong>Switches\u003C/strong>: Después de probar varias opciones, opté por:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gateron Oil Kings\u003C/strong> para alfas (switches lineales suaves)\u003C/li>\n\u003Cli>\u003Cstrong>Boba U4T\u003C/strong> para modificadores (switches táctiles para pulsaciones intencionales)\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Keycaps\u003C/strong>: Keycaps PBT double-shot en un perfil limpio y minimalista que no distrae del código.\u003C/p>\n\u003Cp>\u003Cstrong>Case\u003C/strong>: Case de aluminio para durabilidad y sensación premium.\u003C/p>\n\u003Ch2 id=\"el-proceso-de-construcción\">El Proceso de Construcción\u003C/h2>\n\u003Ch3 id=\"paso-1-preparación-del-pcb\">Paso 1: Preparación del PCB\u003C/h3>\n\u003Cp>Primero, probé el PCB para asegurar que todos los switches registraran correctamente:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Usé software VIA para probar cada posición de tecla\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Flasheé firmware QMK con mi layout personalizado\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"paso-2-instalación-de-estabilizadores\">Paso 2: Instalación de Estabilizadores\u003C/h3>\n\u003Cp>La instalación adecuada de estabilizadores es crucial para teclas más grandes:\u003C/p>\n\u003Cul>\n\u003Cli>Recorté y lubrifiqué estabilizadores para operación suave\u003C/li>\n\u003Cli>Mod de band-aid en puntos de montaje para reducir ruido\u003C/li>\n\u003Cli>Tensión balanceada del alambre para sensación consistente\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"paso-3-instalación-de-switches\">Paso 3: Instalación de Switches\u003C/h3>\n\u003Cp>El PCB hot-swap hizo esto sencillo:\u003C/p>\n\u003Cul>\n\u003Cli>Alineé cuidadosamente cada switch para prevenir pines doblados\u003C/li>\n\u003Cli>Aseguré asentamiento consistente en todas las posiciones\u003C/li>\n\u003Cli>Verifiqué doble activación antes de proceder\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"paso-4-ensamblaje\">Paso 4: Ensamblaje\u003C/h3>\n\u003Cp>El ensamblaje final fue satisfactorio pero requirió paciencia:\u003C/p>\n\u003Cul>\n\u003Cli>Material amortiguador de espuma entre PCB y case\u003C/li>\n\u003Cli>Enrutado cuidadoso de cables para layout interno limpio\u003C/li>\n\u003Cli>Múltiples pruebas de ajuste para asegurar alineación perfecta\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"programación-personalizada\">Programación Personalizada\u003C/h2>\n\u003Cp>Una de las mayores ventajas de un teclado personalizado es la programabilidad. Usando firmware QMK, implementé:\u003C/p>\n\u003Ch3 id=\"sistema-de-capas\">Sistema de Capas\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Capa 0: Layout base QWERTY\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Capa 1: Teclas de función y controles multimedia\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Capa 2: Atajos específicos para desarrollo\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"características-enfocadas-en-desarrollo\">Características Enfocadas en Desarrollo\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Macros de Brackets\u003C/strong>: Acceso rápido a diferentes tipos de brackets\u003C/li>\n\u003Cli>\u003Cstrong>Atajos de Git\u003C/strong>: Comandos git comunes en una capa dedicada\u003C/li>\n\u003Cli>\u003Cstrong>Navegación IDE\u003C/strong>: Atajos personalizados para VS Code y otros editores\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"mejoras-de-productividad\">Mejoras de Productividad\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Auto-shift\u003C/strong>: Mantener cualquier tecla más tiempo para su versión shifteada\u003C/li>\n\u003Cli>\u003Cstrong>Tap Dance\u003C/strong>: Teclas multifunción que hacen cosas diferentes basadas en número de toques\u003C/li>\n\u003Cli>\u003Cstrong>Leader Key\u003C/strong>: Secuencias estilo Vim para acciones complejas\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"la-experiencia-de-programación\">La Experiencia de Programación\u003C/h2>\n\u003Ch3 id=\"configuración-qmk\">Configuración QMK\u003C/h3>\n\u003Cp>Configurar QMK fue sorprendentemente accesible:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// fragmento de keymap.c\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#F97583\"> uint16_t\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> PROGMEM keymaps\u003C/span>\u003Cspan style=\"color:#F97583\">[]\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[MATRIX_ROWS][MATRIX_COLS] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    [\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> LAYOUT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // ... resto del layout\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"macros-personalizados\">Macros Personalizados\u003C/h3>\n\u003Cp>Implementé varios macros para tareas comunes de desarrollo:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Macro auto-bracket\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">case BRACKETS:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (record\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#E1E4E8\">event.pressed) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        SEND_STRING\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"()\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        tap_code\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(KC_LEFT);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"lecciones-aprendidas\">Lecciones Aprendidas\u003C/h2>\n\u003Ch3 id=\"lo-que-funcionó-bien\">Lo que Funcionó Bien\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>PCB Hot-swap\u003C/strong>: Cambió el juego para experimentación\u003C/li>\n\u003Cli>\u003Cstrong>Múltiples Tipos de Switches\u003C/strong>: Usar diferentes switches para diferentes grupos de teclas\u003C/li>\n\u003Cli>\u003Cstrong>Firmware QMK\u003C/strong>: Increíblemente poderoso y flexible\u003C/li>\n\u003Cli>\u003Cstrong>Componentes de Calidad\u003C/strong>: Vale la pena invertir en buenos switches y keycaps\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"desafíos-enfrentados\">Desafíos Enfrentados\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Curva de Aprendizaje\u003C/strong>: La documentación de QMK puede ser abrumadora inicialmente\u003C/li>\n\u003Cli>\u003Cstrong>Compatibilidad de Componentes\u003C/strong>: No todas las partes funcionan juntas perfectamente\u003C/li>\n\u003Cli>\u003Cstrong>Inversión de Tiempo\u003C/strong>: El proceso de construcción tomó mucho más tiempo del esperado\u003C/li>\n\u003Cli>\u003Cstrong>Costo\u003C/strong>: Los componentes de calidad se suman rápidamente\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"beneficios-inesperados\">Beneficios Inesperados\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Mejora en Escritura\u003C/strong>: Escritura más intencional debido al feedback táctil\u003C/li>\n\u003Cli>\u003Cstrong>Estética del Escritorio\u003C/strong>: El teclado personalizado se convirtió en pieza de conversación\u003C/li>\n\u003Cli>\u003Cstrong>Habilidades Técnicas\u003C/strong>: Aprendí sobre electrónica, firmware y diseño de hardware\u003C/li>\n\u003Cli>\u003Cstrong>Comunidad\u003C/strong>: Me conecté con la comunidad de entusiastas de teclados mecánicos\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"impacto-en-el-trabajo-de-desarrollo\">Impacto en el Trabajo de Desarrollo\u003C/h2>\n\u003Cp>Después de usar el teclado personalizado por varios meses:\u003C/p>\n\u003Ch3 id=\"ganancias-de-productividad\">Ganancias de Productividad\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Navegación Más Rápida\u003C/strong>: Atajos personalizados redujeron tiempo en menús\u003C/li>\n\u003Cli>\u003Cstrong>RSI Reducido\u003C/strong>: Mejor ergonomía y elección de switches redujo tensión en manos\u003C/li>\n\u003Cli>\u003Cstrong>Precisión Mejorada\u003C/strong>: Switches de calidad redujeron errores de tipeo\u003C/li>\n\u003Cli>\u003Cstrong>Enfoque Mental\u003C/strong>: La experiencia satisfactoria de escritura mejoró concentración\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"integración-de-flujo-de-trabajo\">Integración de Flujo de Trabajo\u003C/h3>\n\u003Cp>El teclado se integra perfectamente con mi entorno de desarrollo:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Atajos IDE\u003C/strong>: Capa personalizada para VS Code, IntelliJ y Vim\u003C/li>\n\u003Cli>\u003Cstrong>Navegación Terminal\u003C/strong>: Optimizado para trabajo en línea de comandos\u003C/li>\n\u003Cli>\u003Cstrong>Integración Git\u003C/strong>: Acceso rápido a operaciones git comunes\u003C/li>\n\u003Cli>\u003Cstrong>Documentación\u003C/strong>: Atajos para acceder rápidamente a docs y referencias\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"mejoras-futuras\">Mejoras Futuras\u003C/h2>\n\u003Cp>Ya estoy planeando la siguiente iteración:\u003C/p>\n\u003Ch3 id=\"mejoras-de-hardware\">Mejoras de Hardware\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gasket Mount\u003C/strong>: Para mejor sensación de escritura\u003C/li>\n\u003Cli>\u003Cstrong>Rotary Encoder\u003C/strong>: Para control de volumen y scroll\u003C/li>\n\u003Cli>\u003Cstrong>Pantalla OLED\u003C/strong>: Para mostrar capa actual e info del sistema\u003C/li>\n\u003Cli>\u003Cstrong>Opción Inalámbrica\u003C/strong>: Explorando firmware ZMK para builds inalámbricos\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"mejoras-de-software\">Mejoras de Software\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Macros Avanzados\u003C/strong>: Manipulación de texto más sofisticada\u003C/li>\n\u003Cli>\u003Cstrong>Capas Context-Aware\u003C/strong>: Diferentes layouts para diferentes aplicaciones\u003C/li>\n\u003Cli>\u003Cstrong>Integración RGB\u003C/strong>: Iluminación funcional que indica estado de capa\u003C/li>\n\u003Cli>\u003Cstrong>Métricas de Productividad\u003C/strong>: Seguimiento de patrones de escritura y eficiencia\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusión\">Conclusión\u003C/h2>\n\u003Cp>Construir un teclado mecánico personalizado ha sido uno de los proyectos técnicos más gratificantes que he emprendido. Combina hardware, software y diseño de una manera que impacta directamente mi trabajo diario.\u003C/p>\n\u003Cp>El proceso me enseñó:\u003C/p>\n\u003Cul>\n\u003Cli>La importancia de herramientas de calidad para trabajo profesional\u003C/li>\n\u003Cli>Cómo la personalización profunda puede mejorar eficiencia\u003C/li>\n\u003Cli>El valor del conocimiento comunitario y proyectos open-source\u003C/li>\n\u003Cli>Que las mejores soluciones a menudo requieren tiempo e iteración\u003C/li>\n\u003C/ul>\n\u003Cp>Para compañeros desarrolladores considerando un teclado personalizado: la inversión en tiempo y dinero paga dividendos en comodidad y productividad diaria. Comienza con una construcción simple e itera—te sorprenderá cuánto mejora tu experiencia de desarrollo.\u003C/p>\n\u003Ch2 id=\"recursos\">Recursos\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: \u003Ca href=\"https://qmk.fm\">qmk.fm\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Keyboard University\u003C/strong>: Recurso de aprendizaje integral\u003C/li>\n\u003Cli>\u003Cstrong>r/MechanicalKeyboards\u003C/strong>: Comunidad activa para consejos e inspiración\u003C/li>\n\u003Cli>\u003Cstrong>Recomendaciones de Vendedores\u003C/strong>: Basadas en experiencia personal con calidad y servicio\u003C/li>\n\u003C/ul>\n\u003Cp>El teclado personalizado se ha convertido en una parte esencial de mi setup de desarrollo, y no puedo imaginar volver a opciones comerciales. Si pasas tiempo significativo escribiendo, invertir en un dispositivo de entrada de calidad y personalizado es una de las mejores mejoras que puedes hacer.\u003C/p>",{"headings":334,"localImagePaths":419,"remoteImagePaths":420,"frontmatter":421,"imagePaths":424},[335,337,340,343,346,349,352,355,358,361,364,367,370,373,376,379,382,385,388,391,394,397,400,403,406,409,412,415,416],{"depth":33,"slug":336,"text":321},"construyendo-mi-teclado-mecánico-personalizado",{"depth":36,"slug":338,"text":339},"por-qué-construir-un-teclado-personalizado","¿Por qué Construir un Teclado Personalizado?",{"depth":36,"slug":341,"text":342},"planificando-la-construcción","Planificando la Construcción",{"depth":46,"slug":344,"text":345},"decisión-de-layout","Decisión de Layout",{"depth":46,"slug":347,"text":348},"selección-de-componentes","Selección de Componentes",{"depth":36,"slug":350,"text":351},"el-proceso-de-construcción","El Proceso de Construcción",{"depth":46,"slug":353,"text":354},"paso-1-preparación-del-pcb","Paso 1: Preparación del PCB",{"depth":46,"slug":356,"text":357},"paso-2-instalación-de-estabilizadores","Paso 2: Instalación de Estabilizadores",{"depth":46,"slug":359,"text":360},"paso-3-instalación-de-switches","Paso 3: Instalación de Switches",{"depth":46,"slug":362,"text":363},"paso-4-ensamblaje","Paso 4: Ensamblaje",{"depth":36,"slug":365,"text":366},"programación-personalizada","Programación Personalizada",{"depth":46,"slug":368,"text":369},"sistema-de-capas","Sistema de Capas",{"depth":46,"slug":371,"text":372},"características-enfocadas-en-desarrollo","Características Enfocadas en Desarrollo",{"depth":46,"slug":374,"text":375},"mejoras-de-productividad","Mejoras de Productividad",{"depth":36,"slug":377,"text":378},"la-experiencia-de-programación","La Experiencia de Programación",{"depth":46,"slug":380,"text":381},"configuración-qmk","Configuración QMK",{"depth":46,"slug":383,"text":384},"macros-personalizados","Macros Personalizados",{"depth":36,"slug":386,"text":387},"lecciones-aprendidas","Lecciones Aprendidas",{"depth":46,"slug":389,"text":390},"lo-que-funcionó-bien","Lo que Funcionó Bien",{"depth":46,"slug":392,"text":393},"desafíos-enfrentados","Desafíos Enfrentados",{"depth":46,"slug":395,"text":396},"beneficios-inesperados","Beneficios Inesperados",{"depth":36,"slug":398,"text":399},"impacto-en-el-trabajo-de-desarrollo","Impacto en el Trabajo de Desarrollo",{"depth":46,"slug":401,"text":402},"ganancias-de-productividad","Ganancias de Productividad",{"depth":46,"slug":404,"text":405},"integración-de-flujo-de-trabajo","Integración de Flujo de Trabajo",{"depth":36,"slug":407,"text":408},"mejoras-futuras","Mejoras Futuras",{"depth":46,"slug":410,"text":411},"mejoras-de-hardware","Mejoras de Hardware",{"depth":46,"slug":413,"text":414},"mejoras-de-software","Mejoras de Software",{"depth":36,"slug":115,"text":116},{"depth":36,"slug":417,"text":418},"recursos","Recursos",[],[],{"title":321,"description":322,"date":422,"tags":423,"featured":136,"lang":80,"slug":318},["Date","2024-10-05T00:00:00.000Z"],[325,216,217,326,327],[],"custom-mechanical-keyboard-es.md"]