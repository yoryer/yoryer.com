[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.0","content-config-digest","0ad3be7e1e802d90","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://yoryer.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"prism\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\",\"es\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,73,74,118,119,163,164,202,203,236,237],"building-personal-website-en",{"id":11,"data":13,"body":27,"filePath":28,"digest":29,"rendered":30,"legacyId":72},{"title":14,"description":15,"date":16,"tags":17,"featured":23,"lang":24,"previewImg":25,"imageCredit":26},"Building My Personal Website with Astro","How I built my personal portfolio website using Astro, React, and Tailwind CSS with multilingual support.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],"astro","react","tailwind","portfolio","web-development",true,"en","/media/art003-website-preview.jpg","https://www.pexels.com/@anthonyshkraba-production/","# Building My Personal Website with Astro\n\nCreating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\n\n## Why Astro?\n\nI chose Astro for several compelling reasons:\n\n- **Performance First**: Astro's island architecture ensures zero JavaScript by default, shipping only what's necessary\n- **Framework Agnostic**: I can use React components where needed while keeping the rest static\n- **Developer Experience**: Great TypeScript support and modern tooling out of the box\n\n## Technology Stack\n\nThe website is built with:\n\n- **Astro v5** - The core framework\n- **React** - For interactive components\n- **Tailwind CSS** - For styling with a custom theme\n- **TypeScript** - Type safety throughout\n\n## Key Features\n\n### Multilingual Support\n\nOne feature I'm particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\n\n### Component Architecture\n\nI structured the site using reusable components:\n\n- `SectionContainer` - Consistent spacing and layout\n- `SectionTitle` - Unified typography for section headers\n- Responsive design patterns throughout\n\n### Performance Optimizations\n\n- Optimized images and assets\n- Minimal JavaScript bundle\n- Fast loading times across all devices\n\n## Challenges and Solutions\n\nThe biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\n\n## What's Next?\n\nI'm planning to add:\n\n- Blog functionality with content collections\n- Project showcase with detailed case studies\n- Interactive elements to demonstrate my skills\n\nBuilding this website has been a great learning experience, and I'm excited to continue iterating on it as my skills and career evolve.\n\n## Conclusion\n\nThis project represents not just my technical skills, but also my attention to detail and user experience. It's built with performance, accessibility, and maintainability in mind.\n\nFeel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!","src/content/blog/building-personal-website-en.md","01989e98c6327763",{"html":31,"metadata":32},"\u003Ch1 id=\"building-my-personal-website-with-astro\">Building My Personal Website with Astro\u003C/h1>\n\u003Cp>Creating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\u003C/p>\n\u003Ch2 id=\"why-astro\">Why Astro?\u003C/h2>\n\u003Cp>I chose Astro for several compelling reasons:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Performance First\u003C/strong>: Astro’s island architecture ensures zero JavaScript by default, shipping only what’s necessary\u003C/li>\n\u003Cli>\u003Cstrong>Framework Agnostic\u003C/strong>: I can use React components where needed while keeping the rest static\u003C/li>\n\u003Cli>\u003Cstrong>Developer Experience\u003C/strong>: Great TypeScript support and modern tooling out of the box\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technology-stack\">Technology Stack\u003C/h2>\n\u003Cp>The website is built with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - The core framework\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - For interactive components\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - For styling with a custom theme\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Type safety throughout\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Ch3 id=\"multilingual-support\">Multilingual Support\u003C/h3>\n\u003Cp>One feature I’m particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\u003C/p>\n\u003Ch3 id=\"component-architecture\">Component Architecture\u003C/h3>\n\u003Cp>I structured the site using reusable components:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Consistent spacing and layout\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Unified typography for section headers\u003C/li>\n\u003Cli>Responsive design patterns throughout\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"performance-optimizations\">Performance Optimizations\u003C/h3>\n\u003Cul>\n\u003Cli>Optimized images and assets\u003C/li>\n\u003Cli>Minimal JavaScript bundle\u003C/li>\n\u003Cli>Fast loading times across all devices\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"challenges-and-solutions\">Challenges and Solutions\u003C/h2>\n\u003Cp>The biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\u003C/p>\n\u003Ch2 id=\"whats-next\">What’s Next?\u003C/h2>\n\u003Cp>I’m planning to add:\u003C/p>\n\u003Cul>\n\u003Cli>Blog functionality with content collections\u003C/li>\n\u003Cli>Project showcase with detailed case studies\u003C/li>\n\u003Cli>Interactive elements to demonstrate my skills\u003C/li>\n\u003C/ul>\n\u003Cp>Building this website has been a great learning experience, and I’m excited to continue iterating on it as my skills and career evolve.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This project represents not just my technical skills, but also my attention to detail and user experience. It’s built with performance, accessibility, and maintainability in mind.\u003C/p>\n\u003Cp>Feel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!\u003C/p>",{"headings":33,"localImagePaths":66,"remoteImagePaths":67,"frontmatter":68,"imagePaths":71},[34,37,41,44,47,51,54,57,60,63],{"depth":35,"slug":36,"text":14},1,"building-my-personal-website-with-astro",{"depth":38,"slug":39,"text":40},2,"why-astro","Why Astro?",{"depth":38,"slug":42,"text":43},"technology-stack","Technology Stack",{"depth":38,"slug":45,"text":46},"key-features","Key Features",{"depth":48,"slug":49,"text":50},3,"multilingual-support","Multilingual Support",{"depth":48,"slug":52,"text":53},"component-architecture","Component Architecture",{"depth":48,"slug":55,"text":56},"performance-optimizations","Performance Optimizations",{"depth":38,"slug":58,"text":59},"challenges-and-solutions","Challenges and Solutions",{"depth":38,"slug":61,"text":62},"whats-next","What’s Next?",{"depth":38,"slug":64,"text":65},"conclusion","Conclusion",[],[],{"title":14,"description":15,"date":69,"tags":70,"featured":23,"lang":24,"slug":11,"previewImg":25,"imageCredit":26},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],[],"building-personal-website-en.md","custom-mechanical-keyboard-es",{"id":73,"data":75,"body":89,"filePath":90,"digest":91,"rendered":92,"legacyId":117},{"title":76,"description":77,"date":78,"tags":79,"featured":85,"lang":86,"previewImg":87,"imageCredit":88},"Construyendo Mi Teclado Mecánico Personalizado","El viaje de diseñar y construir un teclado mecánico personalizado desde cero, incluyendo selección de componentes y proceso de ensamblaje.",["Date","2020-11-20T00:00:00.000Z"],[80,81,82,83,84],"mechanical-keyboards","keyboards","keebs","hardware","diy",false,"es","/media/art002-keeb-preview.jpg","https://www.pexels.com/@hideaki-nagari-563011/","Hace unos pocos años descubrí un mundo totalmente nuevo y muy emocionante para mí, los *teclados mecánicos*. Siempre me gustó crear cosas con mis manos y por eso le tomé mucho cariño a este **caro y poco común** hobbie.\n\nHoy día es más común escuchar sobre teclados mecánicos, en el mundo de los videojuegos se volvieron completamente virales desde que varios streamers y jugadores profesionales de videojuegos comenzaran a mencionar que utilizan este tipo de teclados por la fiabilidad que estos tienen a la hora de presionar las teclas.\n\nAnteriormente era un hobbie poco difundido, eran como grupos de élite compuesto por personas que entendían tanto de electrónica como de programación para convertir las ideas más increíbles en un teclado de computadora.\n\nSi bien hay mucha información en Internet sobre este tema, este post es más de apreciación a algo que hice hace ya un tiempo atrás: **construir completamente un teclado desde cero**.\n\nCuando digo desde cero me refiero a desde cero, sin nada en las manos y con una idea en la cabeza.\n\n## 1. La idea\n\nEn mi cabeza estaba hacer algo que cumpliera con algunos deseos que tenía luego de haber estado un par de años utilizando principalmente dos teclados; el [CODE Keyboard](https://codekeyboards.com) y un [Ergodox](https://www.ergodox.io).\n\nEn mi cabeza el teclado tenía que cumplir con los siguientes puntos:\n\n1. Ergonómico y ortolineal, igual al Ergodox.\n2. Separado en dos secciones específicas para cada mano pero construido en una sola pieza.\n3. Distancia justa entre ambos sectores para cada mano.\n4. Teclas de flechas direccionales en formato T invertida.\n5. Teclas específicas para saltos de página y ir al inicio y final de cada línea.\n6. Utilizar el formato de keycaps de un teclado estándar.\n\nEsas fueron las bases del concepto que venía planeando, al final el resultado final del diseño fue el siguiente:\n\n![Diseño del teclado](/media/art002-keeb-00.png)\n\nCon esto en mi cabeza, el siguiente paso fue conseguir las piezas para comenzar a armar el teclado.\n\n*Si querés hacer tu propia versión, acá está el enlace al sitio [Keyboard Layout Editor](http://www.keyboard-layout-editor.com/##@_name=yoryerkeeb%20v2&author=Jorge%20Noguera&switchMount=cherry&switchBrand=kailh&switchType=PG151101D49%2F%2FD09&plate:true%3B&@_y:0.125%3B&=Esc&_x:3.25%3B&=%23%0A3&_x:5.25%3B&=*%0A8%3B&@_y:-0.875&x:3.25%3B&=%2F@%0A2&_x:1%3B&=$%0A4&_x:3.25%3B&=%2F&%0A7&_x:1%3B&=(%0A9%3B&@_y:-0.875&x:6.25%3B&=%25%0A5&_x:1.25%3B&=%5E%0A6%3B&@_y:-0.875&x:1.25%3B&=~%0A%60&=!%0A1&_x:9.25%3B&=)%0A0&=%2F_%0A-&=+%0A%2F=&_w:2%3B&=Backspace&_x:0.25%3B&=Home&=PgUp%3B&@_y:-0.375&x:4.25%3B&=E&_x:5.25%3B&=I%3B&@_y:-0.875&x:3.25%3B&=W&_x:1%3B&=R&_x:3.25%3B&=U&_x:1%3B&=O%3B&@_y:-0.875&x:6.25%3B&=T&_x:1.25%3B&=Y%3B&@_y:-0.875&x:0.75&w:1.5%3B&=Tab&=Q&_x:9.25%3B&=P&=%7B%0A%5B&=%7D%0A%5D&_w:1.5%3B&=%7C%0A%5C&_x:0.75%3B&=End&=PgDn%3B&@_y:-0.375&x:4.25%3B&=D&_x:5.25%3B&=K%3B&@_y:-0.875&x:3.25%3B&=S&_x:1%3B&=F&_x:3.25%3B&=J&_x:1%3B&=L%3B&@_y:-0.875&x:6.25%3B&=G&_x:1.25%3B&=H%3B&@_y:-0.875&x:0.5&w:1.75%3B&=Caps%20Lock&=A&_x:9.25%3B&=%2F:%0A%2F%3B&=%22%0A'&_w:2.25%3B&=Enter%3B&@_y:-0.375&x:4.25%3B&=C&_x:5.25%3B&=%3C%0A,%3B&@_y:-0.875&x:3.25%3B&=X&_x:1%3B&=V&_x:3.25%3B&=M&_x:1%3B&=%3E%0A.%3B&@_y:-0.875&x:6.25%3B&=B&_x:1.25%3B&=N%3B&@_y:-0.875&w:2.25%3B&=Shift&=Z&_x:9.25%3B&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.5%3B&=Up%3B&@_x:1&w:1.25%3B&=Ctrl&_w:1.25%3B&=Alt&_w:1.25%3B&=Cmd&_x:0.25&w:2.25%3B&=Space&_x:1.25&w:2.25%3B&=Space&_x:0.25&w:1.25%3B&=Cmd&_w:1.25%3B&=Alt&_w:1.25%3B&=Ctrl&_x:0.5%3B&=Fn&_x:0.5%3B&=Left&=Down&=Right) donde configuré este diseño.*\n\n## 2. Las partes\n\nEn definitiva no existía ninguna placa de teclado con nada similar a lo que yo quería, por lo que no existía la posibilidad de utilizar un PCB ya que tampoco sabía cómo diseñar uno. La solución a esto fue **cableado a mano**.\n\nLo que iba a necesitar para ensamblar el teclado además de lo común como cables y un cautín era lo siguiente:\n\n1. **Microcontrolador:** Arduino Pro Micro.\n2. **Switches:** Gateron Yellow.\n3. **Diodos:** 1N4148.\n4. **Lubricante:** Chrysto Lube MC 129.\n5. **Estabilizadores:** Tipo Cherry para plates.\n6. **Cables:** Grosor 22 AWG.\n7. **Cortes de MDF:** Placas realizadas en corte láser para ensamblado tipo sandwich.\n8. **Keyset:** Chocolate Keycaps de perfil SA.\n9. **Silicona:** para sellar los switches por el plate.\n10. **Cautín, estaño y un multímetro.**\n\n![Componentes del teclado](/media/art002-keeb-01.jpg)\n\n## 3. Ensamblado\n\nComo primer paso comencé por lubricar los switches, desarmé cada uno de ellos, los lubriqué y los volví a ensamblar más de 70 switches necesarios para este teclado.\n\nLuego la siguiente tarea fue presentar los switches en el plate MDF y luego asegurarlos por el plate utilizando silicona, de esta forma se aseguran los switches por el plate y eso permite reducir el nivel de flexibilidad a la hora de escribir y también que sea más fácil intercambiar los keycaps.\n\nUna vez que la silicona secó y los switches estaban lo suficientemente sujetos procedí a soldar los diodos por cada switch.\n\n![Soldadura de diodos](/media/art002-keeb-03.jpg)\n\nUna vez puestos los diodos comenzó el paso del cableado a mano que consiste básicamente en lo siguiente:\n\n1. Se debe soldar un cable por cada diodo para formar las filas (cable rojo).\n2. Se debe soldar un cable por cada switch formando las columnas (cable azul).\n3. Se debe soldar cada fila completa al microcontrolador (cable amarillo).\n4. Se debe soldar cada columna al microcontrolador (cable verde).\n\nCon paciencia se puede lograr realizar correctamente cada soldadura sin que haya ningún toque entre los cables.\n\n![Cableado a mano](/media/art002-keeb-04.jpg)\n\nLo siguiente fue ir al sitio [Keyboard Firmware Builder](https://kbfirmware.com), copiar y pegar el diseño (RAW Data) desde la web de Keyboard Layout Editor y empezar a modificar la disposición de pines para que pudiese funcionar con la cantidad de pines que tiene el Arduino Pro Micro.\n\nUna vez establecida la disposición de pines y configuradas las capas del teclado, exportamos la configuración a un archivo *.hex* y luego flasheamos nuestro Arduino y **¡LISTO!**\n\n## 4. Resultado final\n\n![Teclado terminado](/media/art002-keeb-05.jpg)\n\nEs un teclado que sin dudas reúne varias de las características que busco, sin dudas voy a realizar una siguiente versión y quizá con mejor detalle en el proceso de construcción.\n\nA medida que vaya recordando cosas particulares de la construcción del teclado voy a ir actualizando el post.\n\n## 5. Typing test\n\nLa parte más linda de construir algo para vos es cuando podés empezar a usar lo que construiste.\n\nSiempre estoy abierto a dar recomendaciones sobre teclados mecánicos si alguien está interesado, más abajo están los links de contacto.\n\nDejo un video de cómo se ve y cómo suena el teclado al escribir :)\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SxFczmAr2y8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\u003C/iframe>\n\u003C/div>","src/content/blog/custom-mechanical-keyboard-es.md","f48fbeef640c800c",{"html":93,"metadata":94},"\u003Cp>Hace unos pocos años descubrí un mundo totalmente nuevo y muy emocionante para mí, los \u003Cem>teclados mecánicos\u003C/em>. Siempre me gustó crear cosas con mis manos y por eso le tomé mucho cariño a este \u003Cstrong>caro y poco común\u003C/strong> hobbie.\u003C/p>\n\u003Cp>Hoy día es más común escuchar sobre teclados mecánicos, en el mundo de los videojuegos se volvieron completamente virales desde que varios streamers y jugadores profesionales de videojuegos comenzaran a mencionar que utilizan este tipo de teclados por la fiabilidad que estos tienen a la hora de presionar las teclas.\u003C/p>\n\u003Cp>Anteriormente era un hobbie poco difundido, eran como grupos de élite compuesto por personas que entendían tanto de electrónica como de programación para convertir las ideas más increíbles en un teclado de computadora.\u003C/p>\n\u003Cp>Si bien hay mucha información en Internet sobre este tema, este post es más de apreciación a algo que hice hace ya un tiempo atrás: \u003Cstrong>construir completamente un teclado desde cero\u003C/strong>.\u003C/p>\n\u003Cp>Cuando digo desde cero me refiero a desde cero, sin nada en las manos y con una idea en la cabeza.\u003C/p>\n\u003Ch2 id=\"1-la-idea\">1. La idea\u003C/h2>\n\u003Cp>En mi cabeza estaba hacer algo que cumpliera con algunos deseos que tenía luego de haber estado un par de años utilizando principalmente dos teclados; el \u003Ca href=\"https://codekeyboards.com\">CODE Keyboard\u003C/a> y un \u003Ca href=\"https://www.ergodox.io\">Ergodox\u003C/a>.\u003C/p>\n\u003Cp>En mi cabeza el teclado tenía que cumplir con los siguientes puntos:\u003C/p>\n\u003Col>\n\u003Cli>Ergonómico y ortolineal, igual al Ergodox.\u003C/li>\n\u003Cli>Separado en dos secciones específicas para cada mano pero construido en una sola pieza.\u003C/li>\n\u003Cli>Distancia justa entre ambos sectores para cada mano.\u003C/li>\n\u003Cli>Teclas de flechas direccionales en formato T invertida.\u003C/li>\n\u003Cli>Teclas específicas para saltos de página y ir al inicio y final de cada línea.\u003C/li>\n\u003Cli>Utilizar el formato de keycaps de un teclado estándar.\u003C/li>\n\u003C/ol>\n\u003Cp>Esas fueron las bases del concepto que venía planeando, al final el resultado final del diseño fue el siguiente:\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-00.png\" alt=\"Diseño del teclado\">\u003C/p>\n\u003Cp>Con esto en mi cabeza, el siguiente paso fue conseguir las piezas para comenzar a armar el teclado.\u003C/p>\n\u003Cp>\u003Cem>Si querés hacer tu propia versión, acá está el enlace al sitio \u003Ca href=\"http://www.keyboard-layout-editor.com/##@_name=yoryerkeeb%20v2&#x26;author=Jorge%20Noguera&#x26;switchMount=cherry&#x26;switchBrand=kailh&#x26;switchType=PG151101D49%2F%2FD09&#x26;plate:true%3B&#x26;@_y:0.125%3B&#x26;=Esc&#x26;_x:3.25%3B&#x26;=%23%0A3&#x26;_x:5.25%3B&#x26;=*%0A8%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=%2F@%0A2&#x26;_x:1%3B&#x26;=$%0A4&#x26;_x:3.25%3B&#x26;=%2F&#x26;%0A7&#x26;_x:1%3B&#x26;=(%0A9%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=%25%0A5&#x26;_x:1.25%3B&#x26;=%5E%0A6%3B&#x26;@_y:-0.875&#x26;x:1.25%3B&#x26;=~%0A%60&#x26;=!%0A1&#x26;_x:9.25%3B&#x26;=)%0A0&#x26;=%2F_%0A-&#x26;=+%0A%2F=&#x26;_w:2%3B&#x26;=Backspace&#x26;_x:0.25%3B&#x26;=Home&#x26;=PgUp%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=E&#x26;_x:5.25%3B&#x26;=I%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=W&#x26;_x:1%3B&#x26;=R&#x26;_x:3.25%3B&#x26;=U&#x26;_x:1%3B&#x26;=O%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=T&#x26;_x:1.25%3B&#x26;=Y%3B&#x26;@_y:-0.875&#x26;x:0.75&#x26;w:1.5%3B&#x26;=Tab&#x26;=Q&#x26;_x:9.25%3B&#x26;=P&#x26;=%7B%0A%5B&#x26;=%7D%0A%5D&#x26;_w:1.5%3B&#x26;=%7C%0A%5C&#x26;_x:0.75%3B&#x26;=End&#x26;=PgDn%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=D&#x26;_x:5.25%3B&#x26;=K%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=S&#x26;_x:1%3B&#x26;=F&#x26;_x:3.25%3B&#x26;=J&#x26;_x:1%3B&#x26;=L%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=G&#x26;_x:1.25%3B&#x26;=H%3B&#x26;@_y:-0.875&#x26;x:0.5&#x26;w:1.75%3B&#x26;=Caps%20Lock&#x26;=A&#x26;_x:9.25%3B&#x26;=%2F:%0A%2F%3B&#x26;=%22%0A&#x27;&#x26;_w:2.25%3B&#x26;=Enter%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=C&#x26;_x:5.25%3B&#x26;=%3C%0A,%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=X&#x26;_x:1%3B&#x26;=V&#x26;_x:3.25%3B&#x26;=M&#x26;_x:1%3B&#x26;=%3E%0A.%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=B&#x26;_x:1.25%3B&#x26;=N%3B&#x26;@_y:-0.875&#x26;w:2.25%3B&#x26;=Shift&#x26;=Z&#x26;_x:9.25%3B&#x26;=%3F%0A%2F%2F&#x26;_w:2.75%3B&#x26;=Shift&#x26;_x:1.5%3B&#x26;=Up%3B&#x26;@_x:1&#x26;w:1.25%3B&#x26;=Ctrl&#x26;_w:1.25%3B&#x26;=Alt&#x26;_w:1.25%3B&#x26;=Cmd&#x26;_x:0.25&#x26;w:2.25%3B&#x26;=Space&#x26;_x:1.25&#x26;w:2.25%3B&#x26;=Space&#x26;_x:0.25&#x26;w:1.25%3B&#x26;=Cmd&#x26;_w:1.25%3B&#x26;=Alt&#x26;_w:1.25%3B&#x26;=Ctrl&#x26;_x:0.5%3B&#x26;=Fn&#x26;_x:0.5%3B&#x26;=Left&#x26;=Down&#x26;=Right\">Keyboard Layout Editor\u003C/a> donde configuré este diseño.\u003C/em>\u003C/p>\n\u003Ch2 id=\"2-las-partes\">2. Las partes\u003C/h2>\n\u003Cp>En definitiva no existía ninguna placa de teclado con nada similar a lo que yo quería, por lo que no existía la posibilidad de utilizar un PCB ya que tampoco sabía cómo diseñar uno. La solución a esto fue \u003Cstrong>cableado a mano\u003C/strong>.\u003C/p>\n\u003Cp>Lo que iba a necesitar para ensamblar el teclado además de lo común como cables y un cautín era lo siguiente:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Microcontrolador:\u003C/strong> Arduino Pro Micro.\u003C/li>\n\u003Cli>\u003Cstrong>Switches:\u003C/strong> Gateron Yellow.\u003C/li>\n\u003Cli>\u003Cstrong>Diodos:\u003C/strong> 1N4148.\u003C/li>\n\u003Cli>\u003Cstrong>Lubricante:\u003C/strong> Chrysto Lube MC 129.\u003C/li>\n\u003Cli>\u003Cstrong>Estabilizadores:\u003C/strong> Tipo Cherry para plates.\u003C/li>\n\u003Cli>\u003Cstrong>Cables:\u003C/strong> Grosor 22 AWG.\u003C/li>\n\u003Cli>\u003Cstrong>Cortes de MDF:\u003C/strong> Placas realizadas en corte láser para ensamblado tipo sandwich.\u003C/li>\n\u003Cli>\u003Cstrong>Keyset:\u003C/strong> Chocolate Keycaps de perfil SA.\u003C/li>\n\u003Cli>\u003Cstrong>Silicona:\u003C/strong> para sellar los switches por el plate.\u003C/li>\n\u003Cli>\u003Cstrong>Cautín, estaño y un multímetro.\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-01.jpg\" alt=\"Componentes del teclado\">\u003C/p>\n\u003Ch2 id=\"3-ensamblado\">3. Ensamblado\u003C/h2>\n\u003Cp>Como primer paso comencé por lubricar los switches, desarmé cada uno de ellos, los lubriqué y los volví a ensamblar más de 70 switches necesarios para este teclado.\u003C/p>\n\u003Cp>Luego la siguiente tarea fue presentar los switches en el plate MDF y luego asegurarlos por el plate utilizando silicona, de esta forma se aseguran los switches por el plate y eso permite reducir el nivel de flexibilidad a la hora de escribir y también que sea más fácil intercambiar los keycaps.\u003C/p>\n\u003Cp>Una vez que la silicona secó y los switches estaban lo suficientemente sujetos procedí a soldar los diodos por cada switch.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-03.jpg\" alt=\"Soldadura de diodos\">\u003C/p>\n\u003Cp>Una vez puestos los diodos comenzó el paso del cableado a mano que consiste básicamente en lo siguiente:\u003C/p>\n\u003Col>\n\u003Cli>Se debe soldar un cable por cada diodo para formar las filas (cable rojo).\u003C/li>\n\u003Cli>Se debe soldar un cable por cada switch formando las columnas (cable azul).\u003C/li>\n\u003Cli>Se debe soldar cada fila completa al microcontrolador (cable amarillo).\u003C/li>\n\u003Cli>Se debe soldar cada columna al microcontrolador (cable verde).\u003C/li>\n\u003C/ol>\n\u003Cp>Con paciencia se puede lograr realizar correctamente cada soldadura sin que haya ningún toque entre los cables.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-04.jpg\" alt=\"Cableado a mano\">\u003C/p>\n\u003Cp>Lo siguiente fue ir al sitio \u003Ca href=\"https://kbfirmware.com\">Keyboard Firmware Builder\u003C/a>, copiar y pegar el diseño (RAW Data) desde la web de Keyboard Layout Editor y empezar a modificar la disposición de pines para que pudiese funcionar con la cantidad de pines que tiene el Arduino Pro Micro.\u003C/p>\n\u003Cp>Una vez establecida la disposición de pines y configuradas las capas del teclado, exportamos la configuración a un archivo \u003Cem>.hex\u003C/em> y luego flasheamos nuestro Arduino y \u003Cstrong>¡LISTO!\u003C/strong>\u003C/p>\n\u003Ch2 id=\"4-resultado-final\">4. Resultado final\u003C/h2>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-05.jpg\" alt=\"Teclado terminado\">\u003C/p>\n\u003Cp>Es un teclado que sin dudas reúne varias de las características que busco, sin dudas voy a realizar una siguiente versión y quizá con mejor detalle en el proceso de construcción.\u003C/p>\n\u003Cp>A medida que vaya recordando cosas particulares de la construcción del teclado voy a ir actualizando el post.\u003C/p>\n\u003Ch2 id=\"5-typing-test\">5. Typing test\u003C/h2>\n\u003Cp>La parte más linda de construir algo para vos es cuando podés empezar a usar lo que construiste.\u003C/p>\n\u003Cp>Siempre estoy abierto a dar recomendaciones sobre teclados mecánicos si alguien está interesado, más abajo están los links de contacto.\u003C/p>\n\u003Cp>Dejo un video de cómo se ve y cómo suena el teclado al escribir :)\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SxFczmAr2y8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\u003C/iframe>\n\u003C/div>",{"headings":95,"localImagePaths":111,"remoteImagePaths":112,"frontmatter":113,"imagePaths":116},[96,99,102,105,108],{"depth":38,"slug":97,"text":98},"1-la-idea","1. La idea",{"depth":38,"slug":100,"text":101},"2-las-partes","2. Las partes",{"depth":38,"slug":103,"text":104},"3-ensamblado","3. Ensamblado",{"depth":38,"slug":106,"text":107},"4-resultado-final","4. Resultado final",{"depth":38,"slug":109,"text":110},"5-typing-test","5. Typing test",[],[],{"title":76,"description":77,"date":114,"tags":115,"featured":85,"lang":86,"slug":73,"previewImg":87,"imageCredit":88},["Date","2020-11-20T00:00:00.000Z"],[80,81,82,83,84],[],"custom-mechanical-keyboard-es.md","flutter-certificate-pinning-es",{"id":118,"data":120,"body":131,"filePath":132,"digest":133,"rendered":134,"legacyId":162},{"title":121,"description":122,"date":123,"tags":124,"featured":85,"lang":86,"previewImg":129,"imageCredit":130},"Certificate Pinning con Flutter","Guía para implementar certificate pinning en aplicaciones Flutter utilizando Dart.",["Date","2020-11-11T00:00:00.000Z"],[125,126,127,128],"flutter","dart","certificate","certificate-pinning","/media/art001-cp-preview.jpg","https://www.pexels.com/@savvas-stavrinos-270619/","Una de las recomendaciones más comunes a la hora de desarrollar aplicaciones móviles es el _Certificate Pinning_, y en este artículo vamos a ver un método sencillo para incluir en nuestras aplicaciones hechas con **Flutter**.\n\n## Qué es?\n\nEl _Certificate Pinning_ es en pocas palabras una forma de verificar la identidad del servidor con el que nos estamos comunicando y de esa forma asegurar el tráfico de red de una aplicación. Así nuestra aplicación solo confía de manera _exclusiva_ en las peticiones desde y hasta el servidor cuyo certificado estemos especificando dentro de nuestra aplicación.\n\nTodo el resto del flujo de red a servidores cuyos certificados nuestra aplicación no reconozca serán rechazados.\n\n## Implementar Certificate Pinning\n\nVamos a ver en pocos pasos una manera sencilla y fácil de implementar _Certificate Pinning_ en **Flutter**. En este ejemplo vamos a utilizar una de las APIs abiertas más conocidas y reconocidas [**PokeAPI**](https://pokeapi.co/).\n\n_PokeAPI es una RestfulAPI abierta al público que no requiere registro ni clave de acceso, y que dispone de manera gratuita la lista de todos los Pokemon._\n\n### Paso 1: Obtener el Certificado SSL del servidor\n\nLo primero que debemos hacer es obtener el _Certificado SSL_ en el formato _.pem_, un formato amigable para trabajar. En este caso para obtener el certificado vamos a usar el navegador web _Firefox_, el cual tiene como parte del propio navegador una herramienta muy útil para revisar los certificados de las páginas web que visitamos.\n\nIngresamos al sitio web de _PokeAPI_ y para poder ver el certificado vamos a la opción _Tools → Page Info_ o también utilizando el atajo de teclado _Cmd + i_.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\" />\n\u003C/div>\n\nUna vez hayamos seleccionado la opción para visualizar la información de la página, vamos a la pestaña _Security_ y pulsamos sobre el botón _View Certificate_.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\" />\n\u003C/div>\n\nAl pulsar sobre la opción que nos va a permitir ver el certificado se nos va a abrir una nueva pestaña en el navegador, mostrandonos una serie de cabeceras, normalmente van a ser tres elementos y el primero que está seleccionado es el que nos importa.\n\nLa cuestión en este punto es poder descargar el archivo _.pem_ del certificado del servidor, las otras opciones que se pueden ver son los _certificados intermedios_ y los _certificados en las entidades emisoras_ que forman parte de la [cadena de confianza](https://es.wikipedia.org/wiki/Cadena_de_confianza) entre certificados.\n\nMoviéndonos un poco hacia abajo en la pestaña que contiene la información del certificado vamos a encontrar la opción para descargar el certificado dentro del apartado _Miscellaneous_, la opción que nos interesa es la primera **PEM (cert)**, que descargará solamente el certificado del servidor.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\" />\n\u003C/div>\n\nLuego de haber descargado el archivo en nuestra computadora, deberíamos tener un archivo con la extensión _.pem_ que es el certificado en el que estamos interesados, su aspecto debería ser similar al siguiente.\n\n```text\n-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n```\n\n### Paso 2: Convertir el archivo PEM en una variable de Dart\n\nPara poder utilizar el certificado debemos convertir el contenido del archivo _.pem_ en una variable de Dart, que pueda ser usada a la hora de construir el objeto que nos va a permitir realizar consultas http.\n\nCon este objetivo en mente creé un pequeño **gist** que puede ser usado para convertir este archivo en una variable de tipo Uint8List.\n\n\u003Cdiv class=\"not-prose\">\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\u003C/div>\n\nPreparamos los directorios y el script para ejecutar la conversión de los archivos.\n\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\nPara ejecutar el script sencillamente nos dirigimos al directorio donde está nuestro script y ejecutamos lo siguiente:\n\n```bash\ndart main.dart\n```\n\nAl finalizar la ejecución debe de aparecer un nuevo archivo en el directorio _generated_, el contenido de ese archivo debe ser parecido a esto:\n\n```dart\nimport 'dart:typed_data';\n\nUint8List certificate = Uint8List.fromList([\n  45,\n  45,\n  45,\n  ...\n  45,\n  13,\n  10\n]);\n```\n\nCon esto ya tendremos nuestro certificado listo para ser utilizado en nuestras peticiones!\n\n### Paso 3: Incluir el certificado en el cliente HTTP\n\nEn este paso vamos a crear nuestro cliente HTTP para poder comenzar a enviarle nuestras peticiones al servidor de PokeAPI, para esto vamos a ver algunos puntos a tomar en cuenta.\n\nIncluir la dependencia del paquete _http_\n\n```yaml\n# ...\ndependencies:\n  flutter:\n    sdk: flutter\n  http: ^0.12.0+2\n# ...\n```\n\nCon las siguientes líneas podemos generar el cliente HTTP con el certificado incluído.\n\n```dart\nimport 'package:http/http.dart' as http;\nimport 'package:http/io_client.dart';\n\nimport 'sni-cloudflaressl-com.dart';\n\nSecurityContext securityContext = SecurityContext(withTrustedRoots: false);\nsecurityContext.setTrustedCertificatesBytes(certificate);\n\nHttpClient httpClient = HttpClient(context: securityContext);\n\nhttp.Client client = IOClient(httpClient);\n```\n\n1. **import 'sni-cloudflaressl-com.dart';** Importamos el archivo que contiene la variable con la información del certificado.\n2. **withTrustedRoots: false** Especificamos que no queremos incluir los certificados de las entidades emisoras.\n3. **securityContext.setTrustedCertificatesBytes(certificate)** Establecemos el certificado de confianza en el _SecurityContext_ usando la variable _certificate_.\n4. **http.Client** Crear el http.Client a partir del IOClient que puede incluir el certificado.\n\n### Paso 4: Probar una solicitud a la API\n\nJuntamos todo lo que vimos y debajo de nuestro nuevo cliente HTTP que ya incluye el certificate pinning realizamos al llamada a la API para consultar los datos que estamos buscando.\n\n```dart\nString result;\n\ntry {\n  http.Response response = await client.get(\n    'https://pokeapi.co/api/v2/pokemon/pikachu',\n  );\n  result = response.body;\n} catch (exception) {\n  result = exception.toString();\n}\n```\n\nCon el código de arriba estamos pidiendo a PokeAPI los datos del pókemon **Pikachu**. En caso de que nuestra petición sea exitosa nos va a retornar un texto en formato JSON con toda la información del Pokemon, caso contrario nos devolverá un error.\n\nSi quieres ver un ejemplo más claro de la implementación de un certificate pinning puedes revisar el [repositorio en Github](https://github.com/yoryer/flutter_certificate_pinning) donde muestro un caso exitoso y otro fallido.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\" />\n\u003C/div>","src/content/blog/flutter-certificate-pinning-es.md","8cd2a21aba831b4a",{"html":135,"metadata":136},"\u003Cp>Una de las recomendaciones más comunes a la hora de desarrollar aplicaciones móviles es el \u003Cem>Certificate Pinning\u003C/em>, y en este artículo vamos a ver un método sencillo para incluir en nuestras aplicaciones hechas con \u003Cstrong>Flutter\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"qué-es\">Qué es?\u003C/h2>\n\u003Cp>El \u003Cem>Certificate Pinning\u003C/em> es en pocas palabras una forma de verificar la identidad del servidor con el que nos estamos comunicando y de esa forma asegurar el tráfico de red de una aplicación. Así nuestra aplicación solo confía de manera \u003Cem>exclusiva\u003C/em> en las peticiones desde y hasta el servidor cuyo certificado estemos especificando dentro de nuestra aplicación.\u003C/p>\n\u003Cp>Todo el resto del flujo de red a servidores cuyos certificados nuestra aplicación no reconozca serán rechazados.\u003C/p>\n\u003Ch2 id=\"implementar-certificate-pinning\">Implementar Certificate Pinning\u003C/h2>\n\u003Cp>Vamos a ver en pocos pasos una manera sencilla y fácil de implementar \u003Cem>Certificate Pinning\u003C/em> en \u003Cstrong>Flutter\u003C/strong>. En este ejemplo vamos a utilizar una de las APIs abiertas más conocidas y reconocidas \u003Ca href=\"https://pokeapi.co/\">\u003Cstrong>PokeAPI\u003C/strong>\u003C/a>.\u003C/p>\n\u003Cp>\u003Cem>PokeAPI es una RestfulAPI abierta al público que no requiere registro ni clave de acceso, y que dispone de manera gratuita la lista de todos los Pokemon.\u003C/em>\u003C/p>\n\u003Ch3 id=\"paso-1-obtener-el-certificado-ssl-del-servidor\">Paso 1: Obtener el Certificado SSL del servidor\u003C/h3>\n\u003Cp>Lo primero que debemos hacer es obtener el \u003Cem>Certificado SSL\u003C/em> en el formato \u003Cem>.pem\u003C/em>, un formato amigable para trabajar. En este caso para obtener el certificado vamos a usar el navegador web \u003Cem>Firefox\u003C/em>, el cual tiene como parte del propio navegador una herramienta muy útil para revisar los certificados de las páginas web que visitamos.\u003C/p>\n\u003Cp>Ingresamos al sitio web de \u003Cem>PokeAPI\u003C/em> y para poder ver el certificado vamos a la opción \u003Cem>Tools → Page Info\u003C/em> o también utilizando el atajo de teclado \u003Cem>Cmd + i\u003C/em>.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\">\n\u003C/div>\n\u003Cp>Una vez hayamos seleccionado la opción para visualizar la información de la página, vamos a la pestaña \u003Cem>Security\u003C/em> y pulsamos sobre el botón \u003Cem>View Certificate\u003C/em>.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\">\n\u003C/div>\n\u003Cp>Al pulsar sobre la opción que nos va a permitir ver el certificado se nos va a abrir una nueva pestaña en el navegador, mostrandonos una serie de cabeceras, normalmente van a ser tres elementos y el primero que está seleccionado es el que nos importa.\u003C/p>\n\u003Cp>La cuestión en este punto es poder descargar el archivo \u003Cem>.pem\u003C/em> del certificado del servidor, las otras opciones que se pueden ver son los \u003Cem>certificados intermedios\u003C/em> y los \u003Cem>certificados en las entidades emisoras\u003C/em> que forman parte de la \u003Ca href=\"https://es.wikipedia.org/wiki/Cadena_de_confianza\">cadena de confianza\u003C/a> entre certificados.\u003C/p>\n\u003Cp>Moviéndonos un poco hacia abajo en la pestaña que contiene la información del certificado vamos a encontrar la opción para descargar el certificado dentro del apartado \u003Cem>Miscellaneous\u003C/em>, la opción que nos interesa es la primera \u003Cstrong>PEM (cert)\u003C/strong>, que descargará solamente el certificado del servidor.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\">\n\u003C/div>\n\u003Cp>Luego de haber descargado el archivo en nuestra computadora, deberíamos tener un archivo con la extensión \u003Cem>.pem\u003C/em> que es el certificado en el que estamos interesados, su aspecto debería ser similar al siguiente.\u003C/p>\n\u003Cpre class=\"language-text\" data-language=\"text\">\u003Ccode is:raw=\"\" class=\"language-text\">-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"paso-2-convertir-el-archivo-pem-en-una-variable-de-dart\">Paso 2: Convertir el archivo PEM en una variable de Dart\u003C/h3>\n\u003Cp>Para poder utilizar el certificado debemos convertir el contenido del archivo \u003Cem>.pem\u003C/em> en una variable de Dart, que pueda ser usada a la hora de construir el objeto que nos va a permitir realizar consultas http.\u003C/p>\n\u003Cp>Con este objetivo en mente creé un pequeño \u003Cstrong>gist\u003C/strong> que puede ser usado para convertir este archivo en una variable de tipo Uint8List.\u003C/p>\n\u003Cdiv class=\"not-prose\">\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\u003C/div>\n\u003Cp>Preparamos los directorios y el script para ejecutar la conversión de los archivos.\u003C/p>\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\u003Cp>Para ejecutar el script sencillamente nos dirigimos al directorio donde está nuestro script y ejecutamos lo siguiente:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">dart main.dart\n\u003C/code>\u003C/pre>\n\u003Cp>Al finalizar la ejecución debe de aparecer un nuevo archivo en el directorio \u003Cem>generated\u003C/em>, el contenido de ese archivo debe ser parecido a esto:\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'dart:typed_data'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">Uint8List\u003C/span> certificate \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">Uint8List\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fromList\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">13\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Con esto ya tendremos nuestro certificado listo para ser utilizado en nuestras peticiones!\u003C/p>\n\u003Ch3 id=\"paso-3-incluir-el-certificado-en-el-cliente-http\">Paso 3: Incluir el certificado en el cliente HTTP\u003C/h3>\n\u003Cp>En este paso vamos a crear nuestro cliente HTTP para poder comenzar a enviarle nuestras peticiones al servidor de PokeAPI, para esto vamos a ver algunos puntos a tomar en cuenta.\u003C/p>\n\u003Cp>Incluir la dependencia del paquete \u003Cem>http\u003C/em>\u003C/p>\n\u003Cpre class=\"language-yaml\" data-language=\"yaml\">\u003Ccode is:raw=\"\" class=\"language-yaml\">\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003Cspan class=\"token key atrule\">dependencies\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">flutter\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">sdk\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> flutter\n  \u003Cspan class=\"token key atrule\">http\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> ^0.12.0+2\n\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Con las siguientes líneas podemos generar el cliente HTTP con el certificado incluído.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/http.dart'\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">as\u003C/span> http\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/io_client.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'sni-cloudflaressl-com.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">SecurityContext\u003C/span> securityContext \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">SecurityContext\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>withTrustedRoots\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nsecurityContext\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setTrustedCertificatesBytes\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>certificate\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">HttpClient\u003C/span> httpClient \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">HttpClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>context\u003Cspan class=\"token punctuation\">:\u003C/span> securityContext\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Client\u003C/span> client \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">IOClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>httpClient\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>\u003Cstrong>import ‘sni-cloudflaressl-com.dart’;\u003C/strong> Importamos el archivo que contiene la variable con la información del certificado.\u003C/li>\n\u003Cli>\u003Cstrong>withTrustedRoots: false\u003C/strong> Especificamos que no queremos incluir los certificados de las entidades emisoras.\u003C/li>\n\u003Cli>\u003Cstrong>securityContext.setTrustedCertificatesBytes(certificate)\u003C/strong> Establecemos el certificado de confianza en el \u003Cem>SecurityContext\u003C/em> usando la variable \u003Cem>certificate\u003C/em>.\u003C/li>\n\u003Cli>\u003Cstrong>http.Client\u003C/strong> Crear el http.Client a partir del IOClient que puede incluir el certificado.\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"paso-4-probar-una-solicitud-a-la-api\">Paso 4: Probar una solicitud a la API\u003C/h3>\n\u003Cp>Juntamos todo lo que vimos y debajo de nuestro nuevo cliente HTTP que ya incluye el certificate pinning realizamos al llamada a la API para consultar los datos que estamos buscando.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token class-name\">String\u003C/span> result\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">try\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Response\u003C/span> response \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> client\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token keyword\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'https://pokeapi.co/api/v2/pokemon/pikachu'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> response\u003Cspan class=\"token punctuation\">.\u003C/span>body\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">catch\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>exception\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> exception\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Con el código de arriba estamos pidiendo a PokeAPI los datos del pókemon \u003Cstrong>Pikachu\u003C/strong>. En caso de que nuestra petición sea exitosa nos va a retornar un texto en formato JSON con toda la información del Pokemon, caso contrario nos devolverá un error.\u003C/p>\n\u003Cp>Si quieres ver un ejemplo más claro de la implementación de un certificate pinning puedes revisar el \u003Ca href=\"https://github.com/yoryer/flutter_certificate_pinning\">repositorio en Github\u003C/a> donde muestro un caso exitoso y otro fallido.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\">\n\u003C/div>",{"headings":137,"localImagePaths":156,"remoteImagePaths":157,"frontmatter":158,"imagePaths":161},[138,141,144,147,150,153],{"depth":38,"slug":139,"text":140},"qué-es","Qué es?",{"depth":38,"slug":142,"text":143},"implementar-certificate-pinning","Implementar Certificate Pinning",{"depth":48,"slug":145,"text":146},"paso-1-obtener-el-certificado-ssl-del-servidor","Paso 1: Obtener el Certificado SSL del servidor",{"depth":48,"slug":148,"text":149},"paso-2-convertir-el-archivo-pem-en-una-variable-de-dart","Paso 2: Convertir el archivo PEM en una variable de Dart",{"depth":48,"slug":151,"text":152},"paso-3-incluir-el-certificado-en-el-cliente-http","Paso 3: Incluir el certificado en el cliente HTTP",{"depth":48,"slug":154,"text":155},"paso-4-probar-una-solicitud-a-la-api","Paso 4: Probar una solicitud a la API",[],[],{"title":121,"description":122,"date":159,"tags":160,"featured":85,"lang":86,"slug":118,"previewImg":129,"imageCredit":130},["Date","2020-11-11T00:00:00.000Z"],[125,126,127,128],[],"flutter-certificate-pinning-es.md","flutter-certificate-pinning-en",{"id":163,"data":165,"body":170,"filePath":171,"digest":172,"rendered":173,"legacyId":201},{"title":166,"description":167,"date":168,"tags":169,"featured":85,"lang":24,"previewImg":129,"imageCredit":130},"Certificate Pinning with Flutter","Guide to implement certificate pinning in Flutter applications using Dart.",["Date","2020-11-11T00:00:00.000Z"],[125,126,127,128],"One of the most common recommendations when developing mobile applications is _Certificate Pinning_, and in this article we'll see a simple method to implement it in our applications built with **Flutter**.\n\n## What is it?\n\n_Certificate Pinning_ is, in short, a way to verify the identity of the server we are communicating with and thus secure the network traffic of an application. This way, our application only trusts _exclusively_ requests from and to the server whose certificate we are specifying within our application.\n\nAll other network traffic to servers whose certificates our application doesn't recognize will be rejected.\n\n## Implementing Certificate Pinning\n\nLet's see in a few steps a simple and easy way to implement _Certificate Pinning_ in **Flutter**. In this example, we'll use one of the most well-known and recognized open APIs: [**PokeAPI**](https://pokeapi.co/).\n\n_PokeAPI is a RESTful API open to the public that doesn't require registration or an access key, and provides the list of all Pokemon for free._\n\n### Step 1: Obtain the SSL Certificate from the server\n\nThe first thing we need to do is obtain the _SSL Certificate_ in _.pem_ format, a user-friendly format to work with. In this case, to obtain the certificate we'll use the _Firefox_ web browser, which has a very useful built-in tool to review the certificates of the web pages we visit.\n\nWe go to the _PokeAPI_ website, and to see the certificate, we go to the _Tools → Page Info_ option or use the keyboard shortcut _Cmd + i_.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\" />\n\u003C/div>\n\nOnce we have selected the option to view the page information, we go to the _Security_ tab and click the _View Certificate_ button.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\" />\n\u003C/div>\n\nWhen clicking on the option that allows us to see the certificate, a new tab will open in the browser, showing us a series of headers. Normally there will be three elements, and the first one that is selected is the one we care about.\n\nThe point here is to be able to download the _.pem_ file of the server certificate. The other options that can be seen are the _intermediate certificates_ and the _certificates from the issuing entities_ that are part of the [chain of trust](https://en.wikipedia.org/wiki/Chain_of_trust) between certificates.\n\nMoving down a bit on the tab that contains the certificate information, we'll find the option to download the certificate within the _Miscellaneous_ section. The option we're interested in is the first one, **PEM (cert)**, which will download only the server certificate.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\" />\n\u003C/div>\nAfter downloading the file to our computer, we should have a file with the _.pem_ extension, which is the certificate we're interested in. Its appearance should be similar to the following.\n\n```text\n-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n```\n\n### Step 2: Convert the PEM file into a Dart variable\n\nTo be able to use the certificate, we need to convert the content of the _.pem_ file into a Dart variable, which can be used when building the object that will allow us to make HTTP queries.\n\nWith this goal in mind, I created a small **gist** that can be used to convert this file into a Uint8List type variable.\n\n\u003Cdiv class=\"not-prose\">\n\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\n\u003C/div>\n\nWe prepare the directories and the script to execute the conversion of the files.\n\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\nTo execute the script, we simply go to the directory where our script is located and execute the following:\n\n```bash\ndart main.dart\n```\n\nUpon completion of the execution, a new file should appear in the _generated_ directory. The content of that file should be similar to this:\n\n```dart\nimport 'dart:typed_data';\n\nUint8List certificate = Uint8List.fromList([\n  45,\n  45,\n  45,\n  ...\n  45,\n  13,\n  10\n]);\n```\n\nWith this we'll have our certificate ready to be used in our requests!\n\n### Step 3: Include the certificate in the HTTP client\n\nIn this step, we're going to create our HTTP client to be able to start sending our requests to the PokeAPI server. For this, we'll see some points to take into account.\n\nInclude the dependency for the _http_ package\n\n```yaml\n# ...\ndependencies:\n  flutter:\n    sdk: flutter\n  http: ^0.12.0+2\n# ...\n```\n\nWith the following lines, we can generate the HTTP client with the certificate included.\n\n```dart\nimport 'package:http/http.dart' as http;\nimport 'package:http/io_client.dart';\n\nimport 'sni-cloudflaressl-com.dart';\n\nSecurityContext securityContext = SecurityContext(withTrustedRoots: false);\nsecurityContext.setTrustedCertificatesBytes(certificate);\n\nHttpClient httpClient = HttpClient(context: securityContext);\n\nhttp.Client client = IOClient(httpClient);\n```\n\n1. **import 'sni-cloudflaressl-com.dart';** Import the file that contains the variable with the certificate information.\n2. **withTrustedRoots: false** We specify that we don't want to include the certificates from the issuing entities.\n3. **securityContext.setTrustedCertificatesBytes(certificate)** We set the trusted certificate in the _SecurityContext_ using the _certificate_ variable.\n4. **http.Client** Create the http.Client from the IOClient that can include the certificate.\n\n### Step 4: Test a request to the API\n\nWe put together everything we saw, and using our new HTTP client that already includes certificate pinning, we make the API call to query the data we're looking for.\n\n```dart\nString result;\n\ntry {\n  http.Response response = await client.get(\n    'https://pokeapi.co/api/v2/pokemon/pikachu',\n  );\n  result = response.body;\n} catch (exception) {\n  result = exception.toString();\n}\n```\n\nWith the code above, we're asking PokeAPI for the data of the Pokemon **Pikachu**. If our request is successful, it will return text in JSON format with all the Pokemon information; otherwise, it will return an error.\n\nIf you want to see a clearer example of certificate pinning implementation, you can check the [Github repository](https://github.com/yoryer/flutter_certificate_pinning) where I show both a successful case and a failed one.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\" />\n\u003C/div>","src/content/blog/flutter-certificate-pinning-en.md","54352f1065e4dfb9",{"html":174,"metadata":175},"\u003Cp>One of the most common recommendations when developing mobile applications is \u003Cem>Certificate Pinning\u003C/em>, and in this article we’ll see a simple method to implement it in our applications built with \u003Cstrong>Flutter\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"what-is-it\">What is it?\u003C/h2>\n\u003Cp>\u003Cem>Certificate Pinning\u003C/em> is, in short, a way to verify the identity of the server we are communicating with and thus secure the network traffic of an application. This way, our application only trusts \u003Cem>exclusively\u003C/em> requests from and to the server whose certificate we are specifying within our application.\u003C/p>\n\u003Cp>All other network traffic to servers whose certificates our application doesn’t recognize will be rejected.\u003C/p>\n\u003Ch2 id=\"implementing-certificate-pinning\">Implementing Certificate Pinning\u003C/h2>\n\u003Cp>Let’s see in a few steps a simple and easy way to implement \u003Cem>Certificate Pinning\u003C/em> in \u003Cstrong>Flutter\u003C/strong>. In this example, we’ll use one of the most well-known and recognized open APIs: \u003Ca href=\"https://pokeapi.co/\">\u003Cstrong>PokeAPI\u003C/strong>\u003C/a>.\u003C/p>\n\u003Cp>\u003Cem>PokeAPI is a RESTful API open to the public that doesn’t require registration or an access key, and provides the list of all Pokemon for free.\u003C/em>\u003C/p>\n\u003Ch3 id=\"step-1-obtain-the-ssl-certificate-from-the-server\">Step 1: Obtain the SSL Certificate from the server\u003C/h3>\n\u003Cp>The first thing we need to do is obtain the \u003Cem>SSL Certificate\u003C/em> in \u003Cem>.pem\u003C/em> format, a user-friendly format to work with. In this case, to obtain the certificate we’ll use the \u003Cem>Firefox\u003C/em> web browser, which has a very useful built-in tool to review the certificates of the web pages we visit.\u003C/p>\n\u003Cp>We go to the \u003Cem>PokeAPI\u003C/em> website, and to see the certificate, we go to the \u003Cem>Tools → Page Info\u003C/em> option or use the keyboard shortcut \u003Cem>Cmd + i\u003C/em>.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\">\n\u003C/div>\n\u003Cp>Once we have selected the option to view the page information, we go to the \u003Cem>Security\u003C/em> tab and click the \u003Cem>View Certificate\u003C/em> button.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\">\n\u003C/div>\n\u003Cp>When clicking on the option that allows us to see the certificate, a new tab will open in the browser, showing us a series of headers. Normally there will be three elements, and the first one that is selected is the one we care about.\u003C/p>\n\u003Cp>The point here is to be able to download the \u003Cem>.pem\u003C/em> file of the server certificate. The other options that can be seen are the \u003Cem>intermediate certificates\u003C/em> and the \u003Cem>certificates from the issuing entities\u003C/em> that are part of the \u003Ca href=\"https://en.wikipedia.org/wiki/Chain_of_trust\">chain of trust\u003C/a> between certificates.\u003C/p>\n\u003Cp>Moving down a bit on the tab that contains the certificate information, we’ll find the option to download the certificate within the \u003Cem>Miscellaneous\u003C/em> section. The option we’re interested in is the first one, \u003Cstrong>PEM (cert)\u003C/strong>, which will download only the server certificate.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\">\n\u003C/div>\nAfter downloading the file to our computer, we should have a file with the _.pem_ extension, which is the certificate we're interested in. Its appearance should be similar to the following.\n\u003Cpre class=\"language-text\" data-language=\"text\">\u003Ccode is:raw=\"\" class=\"language-text\">-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-2-convert-the-pem-file-into-a-dart-variable\">Step 2: Convert the PEM file into a Dart variable\u003C/h3>\n\u003Cp>To be able to use the certificate, we need to convert the content of the \u003Cem>.pem\u003C/em> file into a Dart variable, which can be used when building the object that will allow us to make HTTP queries.\u003C/p>\n\u003Cp>With this goal in mind, I created a small \u003Cstrong>gist\u003C/strong> that can be used to convert this file into a Uint8List type variable.\u003C/p>\n\u003Cdiv class=\"not-prose\">\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\u003C/div>\n\u003Cp>We prepare the directories and the script to execute the conversion of the files.\u003C/p>\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\u003Cp>To execute the script, we simply go to the directory where our script is located and execute the following:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">dart main.dart\n\u003C/code>\u003C/pre>\n\u003Cp>Upon completion of the execution, a new file should appear in the \u003Cem>generated\u003C/em> directory. The content of that file should be similar to this:\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'dart:typed_data'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">Uint8List\u003C/span> certificate \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">Uint8List\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fromList\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">13\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>With this we’ll have our certificate ready to be used in our requests!\u003C/p>\n\u003Ch3 id=\"step-3-include-the-certificate-in-the-http-client\">Step 3: Include the certificate in the HTTP client\u003C/h3>\n\u003Cp>In this step, we’re going to create our HTTP client to be able to start sending our requests to the PokeAPI server. For this, we’ll see some points to take into account.\u003C/p>\n\u003Cp>Include the dependency for the \u003Cem>http\u003C/em> package\u003C/p>\n\u003Cpre class=\"language-yaml\" data-language=\"yaml\">\u003Ccode is:raw=\"\" class=\"language-yaml\">\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003Cspan class=\"token key atrule\">dependencies\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">flutter\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">sdk\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> flutter\n  \u003Cspan class=\"token key atrule\">http\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> ^0.12.0+2\n\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>With the following lines, we can generate the HTTP client with the certificate included.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/http.dart'\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">as\u003C/span> http\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/io_client.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'sni-cloudflaressl-com.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">SecurityContext\u003C/span> securityContext \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">SecurityContext\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>withTrustedRoots\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nsecurityContext\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setTrustedCertificatesBytes\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>certificate\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">HttpClient\u003C/span> httpClient \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">HttpClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>context\u003Cspan class=\"token punctuation\">:\u003C/span> securityContext\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Client\u003C/span> client \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">IOClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>httpClient\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>\u003Cstrong>import ‘sni-cloudflaressl-com.dart’;\u003C/strong> Import the file that contains the variable with the certificate information.\u003C/li>\n\u003Cli>\u003Cstrong>withTrustedRoots: false\u003C/strong> We specify that we don’t want to include the certificates from the issuing entities.\u003C/li>\n\u003Cli>\u003Cstrong>securityContext.setTrustedCertificatesBytes(certificate)\u003C/strong> We set the trusted certificate in the \u003Cem>SecurityContext\u003C/em> using the \u003Cem>certificate\u003C/em> variable.\u003C/li>\n\u003Cli>\u003Cstrong>http.Client\u003C/strong> Create the http.Client from the IOClient that can include the certificate.\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"step-4-test-a-request-to-the-api\">Step 4: Test a request to the API\u003C/h3>\n\u003Cp>We put together everything we saw, and using our new HTTP client that already includes certificate pinning, we make the API call to query the data we’re looking for.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token class-name\">String\u003C/span> result\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">try\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Response\u003C/span> response \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> client\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token keyword\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'https://pokeapi.co/api/v2/pokemon/pikachu'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> response\u003Cspan class=\"token punctuation\">.\u003C/span>body\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">catch\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>exception\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> exception\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>With the code above, we’re asking PokeAPI for the data of the Pokemon \u003Cstrong>Pikachu\u003C/strong>. If our request is successful, it will return text in JSON format with all the Pokemon information; otherwise, it will return an error.\u003C/p>\n\u003Cp>If you want to see a clearer example of certificate pinning implementation, you can check the \u003Ca href=\"https://github.com/yoryer/flutter_certificate_pinning\">Github repository\u003C/a> where I show both a successful case and a failed one.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\">\n\u003C/div>",{"headings":176,"localImagePaths":195,"remoteImagePaths":196,"frontmatter":197,"imagePaths":200},[177,180,183,186,189,192],{"depth":38,"slug":178,"text":179},"what-is-it","What is it?",{"depth":38,"slug":181,"text":182},"implementing-certificate-pinning","Implementing Certificate Pinning",{"depth":48,"slug":184,"text":185},"step-1-obtain-the-ssl-certificate-from-the-server","Step 1: Obtain the SSL Certificate from the server",{"depth":48,"slug":187,"text":188},"step-2-convert-the-pem-file-into-a-dart-variable","Step 2: Convert the PEM file into a Dart variable",{"depth":48,"slug":190,"text":191},"step-3-include-the-certificate-in-the-http-client","Step 3: Include the certificate in the HTTP client",{"depth":48,"slug":193,"text":194},"step-4-test-a-request-to-the-api","Step 4: Test a request to the API",[],[],{"title":166,"description":167,"date":198,"tags":199,"featured":85,"lang":24,"slug":163,"previewImg":129,"imageCredit":130},["Date","2020-11-11T00:00:00.000Z"],[125,126,127,128],[],"flutter-certificate-pinning-en.md","custom-mechanical-keyboard-en",{"id":202,"data":204,"body":209,"filePath":210,"digest":211,"rendered":212,"legacyId":235},{"title":205,"description":206,"date":207,"tags":208,"featured":85,"lang":24,"previewImg":87,"imageCredit":88},"Building My Custom Mechanical Keyboard","The journey of designing and building a custom mechanical keyboard from scratch, including component selection and assembly process.",["Date","2020-11-20T00:00:00.000Z"],[80,81,82,83,84],"A few years ago, I discovered a completely new and very exciting world: *mechanical keyboards*. I've always liked creating things with my hands, which is why I became very fond of this **expensive and uncommon** hobby.\n\nToday, it's more common to hear about mechanical keyboards. In the gaming world, they became completely viral when various streamers and professional gamers started mentioning that they use this type of keyboard for the reliability they offer when pressing keys.\n\nPreviously, it was a little-known hobby, comprised of elite groups of people who understood both electronics and programming to turn the most incredible ideas into computer keyboards.\n\nWhile there's a lot of information on the Internet about this topic, this post is more of an appreciation of something I did some time ago: **building a keyboard completely from scratch**.\n\nWhen I say from scratch, I mean from scratch, with nothing in my hands and an idea in my head.\n\n## 1. The idea\n\nMy idea was to make something that would fulfill some desires I had after spending a couple of years mainly using two keyboards: the [CODE Keyboard](https://codekeyboards.com) and an [Ergodox](https://www.ergodox.io).\n\nIn my mind, the keyboard had to meet the following points:\n\n1. Ergonomic and ortholinear, like the Ergodox.\n2. Separated into two specific sections for each hand but built as one piece.\n3. Just the right distance between both sectors for each hand.\n4. Directional arrow keys in inverted T format.\n5. Specific keys for page jumps and going to the beginning and end of each line.\n6. Use the keycap format of a standard keyboard.\n\nThose were the foundations of the concept I had been planning. In the end, the final design result was as follows:\n\n![Keyboard design](/media/art002-keeb-00.png)\n\nWith this in my head, the next step was to get the pieces to start assembling the keyboard.\n\n*If you want to make your own version, here's the link to the [Keyboard Layout Editor](http://www.keyboard-layout-editor.com/##@_name=yoryerkeeb%20v2&author=Jorge%20Noguera&switchMount=cherry&switchBrand=kailh&switchType=PG151101D49%2F%2FD09&plate:true%3B&@_y:0.125%3B&=Esc&_x:3.25%3B&=%23%0A3&_x:5.25%3B&=*%0A8%3B&@_y:-0.875&x:3.25%3B&=%2F@%0A2&_x:1%3B&=$%0A4&_x:3.25%3B&=%2F&%0A7&_x:1%3B&=(%0A9%3B&@_y:-0.875&x:6.25%3B&=%25%0A5&_x:1.25%3B&=%5E%0A6%3B&@_y:-0.875&x:1.25%3B&=~%0A%60&=!%0A1&_x:9.25%3B&=)%0A0&=%2F_%0A-&=+%0A%2F=&_w:2%3B&=Backspace&_x:0.25%3B&=Home&=PgUp%3B&@_y:-0.375&x:4.25%3B&=E&_x:5.25%3B&=I%3B&@_y:-0.875&x:3.25%3B&=W&_x:1%3B&=R&_x:3.25%3B&=U&_x:1%3B&=O%3B&@_y:-0.875&x:6.25%3B&=T&_x:1.25%3B&=Y%3B&@_y:-0.875&x:0.75&w:1.5%3B&=Tab&=Q&_x:9.25%3B&=P&=%7B%0A%5B&=%7D%0A%5D&_w:1.5%3B&=%7C%0A%5C&_x:0.75%3B&=End&=PgDn%3B&@_y:-0.375&x:4.25%3B&=D&_x:5.25%3B&=K%3B&@_y:-0.875&x:3.25%3B&=S&_x:1%3B&=F&_x:3.25%3B&=J&_x:1%3B&=L%3B&@_y:-0.875&x:6.25%3B&=G&_x:1.25%3B&=H%3B&@_y:-0.875&x:0.5&w:1.75%3B&=Caps%20Lock&=A&_x:9.25%3B&=%2F:%0A%2F%3B&=%22%0A'&_w:2.25%3B&=Enter%3B&@_y:-0.375&x:4.25%3B&=C&_x:5.25%3B&=%3C%0A,%3B&@_y:-0.875&x:3.25%3B&=X&_x:1%3B&=V&_x:3.25%3B&=M&_x:1%3B&=%3E%0A.%3B&@_y:-0.875&x:6.25%3B&=B&_x:1.25%3B&=N%3B&@_y:-0.875&w:2.25%3B&=Shift&=Z&_x:9.25%3B&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.5%3B&=Up%3B&@_x:1&w:1.25%3B&=Ctrl&_w:1.25%3B&=Alt&_w:1.25%3B&=Cmd&_x:0.25&w:2.25%3B&=Space&_x:1.25&w:2.25%3B&=Space&_x:0.25&w:1.25%3B&=Cmd&_w:1.25%3B&=Alt&_w:1.25%3B&=Ctrl&_x:0.5%3B&=Fn&_x:0.5%3B&=Left&=Down&=Right) site where I configured this design.*\n\n## 2. The parts\n\nUltimately, there was no keyboard plate with anything similar to what I wanted, so there was no possibility of using a PCB since I didn't know how to design one. The solution was **hand wiring**.\n\nWhat I needed to assemble the keyboard, besides the common things like cables and a soldering iron, was the following:\n\n1. **Microcontroller:** Arduino Pro Micro.\n2. **Switches:** Gateron Yellow.\n3. **Diodes:** 1N4148.\n4. **Lubricant:** Chrysto Lube MC 129.\n5. **Stabilizers:** Cherry type for plates.\n6. **Cables:** 22 AWG thickness.\n7. **MDF cuts:** Plates made with laser cutting for sandwich-type assembly.\n8. **Keyset:** Chocolate Keycaps with SA profile.\n9. **Silicone:** to seal the switches through the plate.\n10. **Soldering iron, solder, and a multimeter.**\n\n![Keyboard components](/media/art002-keeb-01.jpg)\n\n## 3. Assembly\n\nAs a first step, I started by lubricating the switches. I disassembled each one, lubricated them, and reassembled the more than 70 switches needed for this keyboard.\n\nThe next task was to mount the switches on the MDF plate and then secure them using silicone. This way, the switches are secured to the plate, which reduces flex when typing and makes it easier to swap keycaps.\n\nOnce the silicone dried and the switches were sufficiently secured, I proceeded to solder the diodes to each switch.\n\n![Diode soldering](/media/art002-keeb-03.jpg)\n\nOnce the diodes were in place, the hand wiring step began, which basically consists of the following:\n\n1. A cable must be soldered for each diode to form the rows (red cable).\n2. A cable must be soldered for each switch forming the columns (blue cable).\n3. Each complete row must be soldered to the microcontroller (yellow cable).\n4. Each column must be soldered to the microcontroller (green cable).\n\nWith patience, you can successfully perform each solder joint without any cables touching each other.\n\n![Hand wiring](/media/art002-keeb-04.jpg)\n\nThe next step was to go to the [Keyboard Firmware Builder](https://kbfirmware.com) site, copy and paste the design (RAW Data) from the Keyboard Layout Editor website, and start modifying the pin layout so it would work with the number of pins that the Arduino Pro Micro has.\n\nOnce the pin layout was established and the keyboard layers were configured, I exported the configuration to a *.hex* file and then flashed the Arduino. **DONE!**\n\n## 4. Final result\n\n![Finished keyboard](/media/art002-keeb-05.jpg)\n\nIt's a keyboard that undoubtedly brings together several of the characteristics I was looking for. I will definitely make a next version, perhaps with better detail in the construction process.\n\nAs I remember specific details about the keyboard construction, I will update this post.\n\n## 5. Typing test\n\nThe best part of building something for yourself is when you can start using what you built.\n\nI'm always open to giving recommendations about mechanical keyboards if anyone is interested. Contact links are below.\n\nHere's a video of how the keyboard looks and sounds when typing :)\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SxFczmAr2y8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\u003C/iframe>\n\u003C/div>","src/content/blog/custom-mechanical-keyboard-en.md","3d3d711d149a0067",{"html":213,"metadata":214},"\u003Cp>A few years ago, I discovered a completely new and very exciting world: \u003Cem>mechanical keyboards\u003C/em>. I’ve always liked creating things with my hands, which is why I became very fond of this \u003Cstrong>expensive and uncommon\u003C/strong> hobby.\u003C/p>\n\u003Cp>Today, it’s more common to hear about mechanical keyboards. In the gaming world, they became completely viral when various streamers and professional gamers started mentioning that they use this type of keyboard for the reliability they offer when pressing keys.\u003C/p>\n\u003Cp>Previously, it was a little-known hobby, comprised of elite groups of people who understood both electronics and programming to turn the most incredible ideas into computer keyboards.\u003C/p>\n\u003Cp>While there’s a lot of information on the Internet about this topic, this post is more of an appreciation of something I did some time ago: \u003Cstrong>building a keyboard completely from scratch\u003C/strong>.\u003C/p>\n\u003Cp>When I say from scratch, I mean from scratch, with nothing in my hands and an idea in my head.\u003C/p>\n\u003Ch2 id=\"1-the-idea\">1. The idea\u003C/h2>\n\u003Cp>My idea was to make something that would fulfill some desires I had after spending a couple of years mainly using two keyboards: the \u003Ca href=\"https://codekeyboards.com\">CODE Keyboard\u003C/a> and an \u003Ca href=\"https://www.ergodox.io\">Ergodox\u003C/a>.\u003C/p>\n\u003Cp>In my mind, the keyboard had to meet the following points:\u003C/p>\n\u003Col>\n\u003Cli>Ergonomic and ortholinear, like the Ergodox.\u003C/li>\n\u003Cli>Separated into two specific sections for each hand but built as one piece.\u003C/li>\n\u003Cli>Just the right distance between both sectors for each hand.\u003C/li>\n\u003Cli>Directional arrow keys in inverted T format.\u003C/li>\n\u003Cli>Specific keys for page jumps and going to the beginning and end of each line.\u003C/li>\n\u003Cli>Use the keycap format of a standard keyboard.\u003C/li>\n\u003C/ol>\n\u003Cp>Those were the foundations of the concept I had been planning. In the end, the final design result was as follows:\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-00.png\" alt=\"Keyboard design\">\u003C/p>\n\u003Cp>With this in my head, the next step was to get the pieces to start assembling the keyboard.\u003C/p>\n\u003Cp>\u003Cem>If you want to make your own version, here’s the link to the \u003Ca href=\"http://www.keyboard-layout-editor.com/##@_name=yoryerkeeb%20v2&#x26;author=Jorge%20Noguera&#x26;switchMount=cherry&#x26;switchBrand=kailh&#x26;switchType=PG151101D49%2F%2FD09&#x26;plate:true%3B&#x26;@_y:0.125%3B&#x26;=Esc&#x26;_x:3.25%3B&#x26;=%23%0A3&#x26;_x:5.25%3B&#x26;=*%0A8%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=%2F@%0A2&#x26;_x:1%3B&#x26;=$%0A4&#x26;_x:3.25%3B&#x26;=%2F&#x26;%0A7&#x26;_x:1%3B&#x26;=(%0A9%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=%25%0A5&#x26;_x:1.25%3B&#x26;=%5E%0A6%3B&#x26;@_y:-0.875&#x26;x:1.25%3B&#x26;=~%0A%60&#x26;=!%0A1&#x26;_x:9.25%3B&#x26;=)%0A0&#x26;=%2F_%0A-&#x26;=+%0A%2F=&#x26;_w:2%3B&#x26;=Backspace&#x26;_x:0.25%3B&#x26;=Home&#x26;=PgUp%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=E&#x26;_x:5.25%3B&#x26;=I%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=W&#x26;_x:1%3B&#x26;=R&#x26;_x:3.25%3B&#x26;=U&#x26;_x:1%3B&#x26;=O%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=T&#x26;_x:1.25%3B&#x26;=Y%3B&#x26;@_y:-0.875&#x26;x:0.75&#x26;w:1.5%3B&#x26;=Tab&#x26;=Q&#x26;_x:9.25%3B&#x26;=P&#x26;=%7B%0A%5B&#x26;=%7D%0A%5D&#x26;_w:1.5%3B&#x26;=%7C%0A%5C&#x26;_x:0.75%3B&#x26;=End&#x26;=PgDn%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=D&#x26;_x:5.25%3B&#x26;=K%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=S&#x26;_x:1%3B&#x26;=F&#x26;_x:3.25%3B&#x26;=J&#x26;_x:1%3B&#x26;=L%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=G&#x26;_x:1.25%3B&#x26;=H%3B&#x26;@_y:-0.875&#x26;x:0.5&#x26;w:1.75%3B&#x26;=Caps%20Lock&#x26;=A&#x26;_x:9.25%3B&#x26;=%2F:%0A%2F%3B&#x26;=%22%0A&#x27;&#x26;_w:2.25%3B&#x26;=Enter%3B&#x26;@_y:-0.375&#x26;x:4.25%3B&#x26;=C&#x26;_x:5.25%3B&#x26;=%3C%0A,%3B&#x26;@_y:-0.875&#x26;x:3.25%3B&#x26;=X&#x26;_x:1%3B&#x26;=V&#x26;_x:3.25%3B&#x26;=M&#x26;_x:1%3B&#x26;=%3E%0A.%3B&#x26;@_y:-0.875&#x26;x:6.25%3B&#x26;=B&#x26;_x:1.25%3B&#x26;=N%3B&#x26;@_y:-0.875&#x26;w:2.25%3B&#x26;=Shift&#x26;=Z&#x26;_x:9.25%3B&#x26;=%3F%0A%2F%2F&#x26;_w:2.75%3B&#x26;=Shift&#x26;_x:1.5%3B&#x26;=Up%3B&#x26;@_x:1&#x26;w:1.25%3B&#x26;=Ctrl&#x26;_w:1.25%3B&#x26;=Alt&#x26;_w:1.25%3B&#x26;=Cmd&#x26;_x:0.25&#x26;w:2.25%3B&#x26;=Space&#x26;_x:1.25&#x26;w:2.25%3B&#x26;=Space&#x26;_x:0.25&#x26;w:1.25%3B&#x26;=Cmd&#x26;_w:1.25%3B&#x26;=Alt&#x26;_w:1.25%3B&#x26;=Ctrl&#x26;_x:0.5%3B&#x26;=Fn&#x26;_x:0.5%3B&#x26;=Left&#x26;=Down&#x26;=Right\">Keyboard Layout Editor\u003C/a> site where I configured this design.\u003C/em>\u003C/p>\n\u003Ch2 id=\"2-the-parts\">2. The parts\u003C/h2>\n\u003Cp>Ultimately, there was no keyboard plate with anything similar to what I wanted, so there was no possibility of using a PCB since I didn’t know how to design one. The solution was \u003Cstrong>hand wiring\u003C/strong>.\u003C/p>\n\u003Cp>What I needed to assemble the keyboard, besides the common things like cables and a soldering iron, was the following:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Microcontroller:\u003C/strong> Arduino Pro Micro.\u003C/li>\n\u003Cli>\u003Cstrong>Switches:\u003C/strong> Gateron Yellow.\u003C/li>\n\u003Cli>\u003Cstrong>Diodes:\u003C/strong> 1N4148.\u003C/li>\n\u003Cli>\u003Cstrong>Lubricant:\u003C/strong> Chrysto Lube MC 129.\u003C/li>\n\u003Cli>\u003Cstrong>Stabilizers:\u003C/strong> Cherry type for plates.\u003C/li>\n\u003Cli>\u003Cstrong>Cables:\u003C/strong> 22 AWG thickness.\u003C/li>\n\u003Cli>\u003Cstrong>MDF cuts:\u003C/strong> Plates made with laser cutting for sandwich-type assembly.\u003C/li>\n\u003Cli>\u003Cstrong>Keyset:\u003C/strong> Chocolate Keycaps with SA profile.\u003C/li>\n\u003Cli>\u003Cstrong>Silicone:\u003C/strong> to seal the switches through the plate.\u003C/li>\n\u003Cli>\u003Cstrong>Soldering iron, solder, and a multimeter.\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-01.jpg\" alt=\"Keyboard components\">\u003C/p>\n\u003Ch2 id=\"3-assembly\">3. Assembly\u003C/h2>\n\u003Cp>As a first step, I started by lubricating the switches. I disassembled each one, lubricated them, and reassembled the more than 70 switches needed for this keyboard.\u003C/p>\n\u003Cp>The next task was to mount the switches on the MDF plate and then secure them using silicone. This way, the switches are secured to the plate, which reduces flex when typing and makes it easier to swap keycaps.\u003C/p>\n\u003Cp>Once the silicone dried and the switches were sufficiently secured, I proceeded to solder the diodes to each switch.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-03.jpg\" alt=\"Diode soldering\">\u003C/p>\n\u003Cp>Once the diodes were in place, the hand wiring step began, which basically consists of the following:\u003C/p>\n\u003Col>\n\u003Cli>A cable must be soldered for each diode to form the rows (red cable).\u003C/li>\n\u003Cli>A cable must be soldered for each switch forming the columns (blue cable).\u003C/li>\n\u003Cli>Each complete row must be soldered to the microcontroller (yellow cable).\u003C/li>\n\u003Cli>Each column must be soldered to the microcontroller (green cable).\u003C/li>\n\u003C/ol>\n\u003Cp>With patience, you can successfully perform each solder joint without any cables touching each other.\u003C/p>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-04.jpg\" alt=\"Hand wiring\">\u003C/p>\n\u003Cp>The next step was to go to the \u003Ca href=\"https://kbfirmware.com\">Keyboard Firmware Builder\u003C/a> site, copy and paste the design (RAW Data) from the Keyboard Layout Editor website, and start modifying the pin layout so it would work with the number of pins that the Arduino Pro Micro has.\u003C/p>\n\u003Cp>Once the pin layout was established and the keyboard layers were configured, I exported the configuration to a \u003Cem>.hex\u003C/em> file and then flashed the Arduino. \u003Cstrong>DONE!\u003C/strong>\u003C/p>\n\u003Ch2 id=\"4-final-result\">4. Final result\u003C/h2>\n\u003Cp>\u003Cimg src=\"/media/art002-keeb-05.jpg\" alt=\"Finished keyboard\">\u003C/p>\n\u003Cp>It’s a keyboard that undoubtedly brings together several of the characteristics I was looking for. I will definitely make a next version, perhaps with better detail in the construction process.\u003C/p>\n\u003Cp>As I remember specific details about the keyboard construction, I will update this post.\u003C/p>\n\u003Ch2 id=\"5-typing-test\">5. Typing test\u003C/h2>\n\u003Cp>The best part of building something for yourself is when you can start using what you built.\u003C/p>\n\u003Cp>I’m always open to giving recommendations about mechanical keyboards if anyone is interested. Contact links are below.\u003C/p>\n\u003Cp>Here’s a video of how the keyboard looks and sounds when typing :)\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SxFczmAr2y8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\u003C/iframe>\n\u003C/div>",{"headings":215,"localImagePaths":229,"remoteImagePaths":230,"frontmatter":231,"imagePaths":234},[216,219,222,225,228],{"depth":38,"slug":217,"text":218},"1-the-idea","1. The idea",{"depth":38,"slug":220,"text":221},"2-the-parts","2. The parts",{"depth":38,"slug":223,"text":224},"3-assembly","3. Assembly",{"depth":38,"slug":226,"text":227},"4-final-result","4. Final result",{"depth":38,"slug":109,"text":110},[],[],{"title":205,"description":206,"date":232,"tags":233,"featured":85,"lang":24,"slug":202,"previewImg":87,"imageCredit":88},["Date","2020-11-20T00:00:00.000Z"],[80,81,82,83,84],[],"custom-mechanical-keyboard-en.md","building-personal-website-es",{"id":236,"data":238,"body":245,"filePath":246,"digest":247,"rendered":248,"legacyId":287},{"title":239,"description":240,"date":241,"tags":242,"featured":23,"lang":86,"previewImg":25,"imageCredit":26},"Construyendo Mi Sitio Web Personal con Astro","Cómo construí mi sitio web de portafolio personal usando Astro, React y Tailwind CSS con soporte multiidioma.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,243,244],"portafolio","desarrollo-web","# Construyendo Mi Sitio Web Personal con Astro\n\nCrear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\n\n## ¿Por qué Astro?\n\nElegí Astro por varias razones convincentes:\n\n- **Rendimiento Primero**: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\n- **Agnóstico de Framework**: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\n- **Experiencia de Desarrollador**: Gran soporte para TypeScript y herramientas modernas listas para usar\n\n## Stack Tecnológico\n\nEl sitio web está construido con:\n\n- **Astro v5** - El framework principal\n- **React** - Para componentes interactivos\n- **Tailwind CSS** - Para estilos con un tema personalizado\n- **TypeScript** - Seguridad de tipos en todo el proyecto\n\n## Características Principales\n\n### Soporte Multiidioma\n\nUna característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\n\n### Arquitectura de Componentes\n\nEstructuré el sitio usando componentes reutilizables:\n\n- `SectionContainer` - Espaciado y diseño consistente\n- `SectionTitle` - Tipografía unificada para encabezados de sección\n- Patrones de diseño responsivo en todo el sitio\n\n### Optimizaciones de Rendimiento\n\n- Imágenes y assets optimizados\n- Bundle de JavaScript mínimo\n- Tiempos de carga rápidos en todos los dispositivos\n\n## Desafíos y Soluciones\n\nEl mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\n\n## ¿Qué Sigue?\n\nEstoy planeando agregar:\n\n- Funcionalidad de blog con colecciones de contenido\n- Vitrina de proyectos con estudios de caso detallados\n- Elementos interactivos para demostrar mis habilidades\n\nConstruir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\n\n## Conclusión\n\nEste proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\n\n¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!","src/content/blog/building-personal-website-es.md","f2723eba72bbd40b",{"html":249,"metadata":250},"\u003Ch1 id=\"construyendo-mi-sitio-web-personal-con-astro\">Construyendo Mi Sitio Web Personal con Astro\u003C/h1>\n\u003Cp>Crear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\u003C/p>\n\u003Ch2 id=\"por-qué-astro\">¿Por qué Astro?\u003C/h2>\n\u003Cp>Elegí Astro por varias razones convincentes:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rendimiento Primero\u003C/strong>: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\u003C/li>\n\u003Cli>\u003Cstrong>Agnóstico de Framework\u003C/strong>: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\u003C/li>\n\u003Cli>\u003Cstrong>Experiencia de Desarrollador\u003C/strong>: Gran soporte para TypeScript y herramientas modernas listas para usar\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"stack-tecnológico\">Stack Tecnológico\u003C/h2>\n\u003Cp>El sitio web está construido con:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - El framework principal\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - Para componentes interactivos\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - Para estilos con un tema personalizado\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Seguridad de tipos en todo el proyecto\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"características-principales\">Características Principales\u003C/h2>\n\u003Ch3 id=\"soporte-multiidioma\">Soporte Multiidioma\u003C/h3>\n\u003Cp>Una característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\u003C/p>\n\u003Ch3 id=\"arquitectura-de-componentes\">Arquitectura de Componentes\u003C/h3>\n\u003Cp>Estructuré el sitio usando componentes reutilizables:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Espaciado y diseño consistente\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Tipografía unificada para encabezados de sección\u003C/li>\n\u003Cli>Patrones de diseño responsivo en todo el sitio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"optimizaciones-de-rendimiento\">Optimizaciones de Rendimiento\u003C/h3>\n\u003Cul>\n\u003Cli>Imágenes y assets optimizados\u003C/li>\n\u003Cli>Bundle de JavaScript mínimo\u003C/li>\n\u003Cli>Tiempos de carga rápidos en todos los dispositivos\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"desafíos-y-soluciones\">Desafíos y Soluciones\u003C/h2>\n\u003Cp>El mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\u003C/p>\n\u003Ch2 id=\"qué-sigue\">¿Qué Sigue?\u003C/h2>\n\u003Cp>Estoy planeando agregar:\u003C/p>\n\u003Cul>\n\u003Cli>Funcionalidad de blog con colecciones de contenido\u003C/li>\n\u003Cli>Vitrina de proyectos con estudios de caso detallados\u003C/li>\n\u003Cli>Elementos interactivos para demostrar mis habilidades\u003C/li>\n\u003C/ul>\n\u003Cp>Construir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\u003C/p>\n\u003Ch2 id=\"conclusión\">Conclusión\u003C/h2>\n\u003Cp>Este proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\u003C/p>\n\u003Cp>¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!\u003C/p>",{"headings":251,"localImagePaths":281,"remoteImagePaths":282,"frontmatter":283,"imagePaths":286},[252,254,257,260,263,266,269,272,275,278],{"depth":35,"slug":253,"text":239},"construyendo-mi-sitio-web-personal-con-astro",{"depth":38,"slug":255,"text":256},"por-qué-astro","¿Por qué Astro?",{"depth":38,"slug":258,"text":259},"stack-tecnológico","Stack Tecnológico",{"depth":38,"slug":261,"text":262},"características-principales","Características Principales",{"depth":48,"slug":264,"text":265},"soporte-multiidioma","Soporte Multiidioma",{"depth":48,"slug":267,"text":268},"arquitectura-de-componentes","Arquitectura de Componentes",{"depth":48,"slug":270,"text":271},"optimizaciones-de-rendimiento","Optimizaciones de Rendimiento",{"depth":38,"slug":273,"text":274},"desafíos-y-soluciones","Desafíos y Soluciones",{"depth":38,"slug":276,"text":277},"qué-sigue","¿Qué Sigue?",{"depth":38,"slug":279,"text":280},"conclusión","Conclusión",[],[],{"title":239,"description":240,"date":284,"tags":285,"featured":23,"lang":86,"slug":236,"previewImg":25,"imageCredit":26},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,243,244],[],"building-personal-website-es.md"]