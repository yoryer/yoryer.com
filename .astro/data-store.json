[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.0","content-config-digest","73c3d589685fdaf1","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://yoryer.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"prism\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\",\"es\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,71,72,185,186,235,236,343,344],"construyendo-sitio-web-personal",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"rendered":28,"legacyId":70},{"title":14,"description":15,"date":16,"tags":17,"featured":23,"lang":24},"Construyendo Mi Sitio Web Personal con Astro","Cómo construí mi sitio web de portafolio personal usando Astro, React y Tailwind CSS con soporte multiidioma.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],"astro","react","tailwind","portafolio","desarrollo-web",true,"es","# Construyendo Mi Sitio Web Personal con Astro\n\nCrear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\n\n## ¿Por qué Astro?\n\nElegí Astro por varias razones convincentes:\n\n- **Rendimiento Primero**: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\n- **Agnóstico de Framework**: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\n- **Experiencia de Desarrollador**: Gran soporte para TypeScript y herramientas modernas listas para usar\n\n## Stack Tecnológico\n\nEl sitio web está construido con:\n\n- **Astro v5** - El framework principal\n- **React** - Para componentes interactivos\n- **Tailwind CSS** - Para estilos con un tema personalizado\n- **TypeScript** - Seguridad de tipos en todo el proyecto\n\n## Características Principales\n\n### Soporte Multiidioma\n\nUna característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\n\n### Arquitectura de Componentes\n\nEstructuré el sitio usando componentes reutilizables:\n\n- `SectionContainer` - Espaciado y diseño consistente\n- `SectionTitle` - Tipografía unificada para encabezados de sección\n- Patrones de diseño responsivo en todo el sitio\n\n### Optimizaciones de Rendimiento\n\n- Imágenes y assets optimizados\n- Bundle de JavaScript mínimo\n- Tiempos de carga rápidos en todos los dispositivos\n\n## Desafíos y Soluciones\n\nEl mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\n\n## ¿Qué Sigue?\n\nEstoy planeando agregar:\n\n- Funcionalidad de blog con colecciones de contenido\n- Vitrina de proyectos con estudios de caso detallados\n- Elementos interactivos para demostrar mis habilidades\n\nConstruir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\n\n## Conclusión\n\nEste proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\n\n¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!","src/content/blog/building-personal-website-es.md","cdfdc155fa203449",{"html":29,"metadata":30},"\u003Ch1 id=\"construyendo-mi-sitio-web-personal-con-astro\">Construyendo Mi Sitio Web Personal con Astro\u003C/h1>\n\u003Cp>Crear un sitio web personal siempre ha estado en mi lista de tareas pendientes, y después de años de posponerlo, finalmente decidí construir algo que realmente me represente como desarrollador.\u003C/p>\n\u003Ch2 id=\"por-qué-astro\">¿Por qué Astro?\u003C/h2>\n\u003Cp>Elegí Astro por varias razones convincentes:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Rendimiento Primero\u003C/strong>: La arquitectura de islas de Astro asegura cero JavaScript por defecto, enviando solo lo necesario\u003C/li>\n\u003Cli>\u003Cstrong>Agnóstico de Framework\u003C/strong>: Puedo usar componentes de React donde sea necesario mientras mantengo el resto estático\u003C/li>\n\u003Cli>\u003Cstrong>Experiencia de Desarrollador\u003C/strong>: Gran soporte para TypeScript y herramientas modernas listas para usar\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"stack-tecnológico\">Stack Tecnológico\u003C/h2>\n\u003Cp>El sitio web está construido con:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - El framework principal\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - Para componentes interactivos\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - Para estilos con un tema personalizado\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Seguridad de tipos en todo el proyecto\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"características-principales\">Características Principales\u003C/h2>\n\u003Ch3 id=\"soporte-multiidioma\">Soporte Multiidioma\u003C/h3>\n\u003Cp>Una característica de la que estoy particularmente orgulloso es la implementación de i18n. El sitio soporta tanto inglés como español, permitiéndome alcanzar una audiencia más amplia. El selector de idioma es intuitivo y mantiene el contexto a través de las secciones de la página.\u003C/p>\n\u003Ch3 id=\"arquitectura-de-componentes\">Arquitectura de Componentes\u003C/h3>\n\u003Cp>Estructuré el sitio usando componentes reutilizables:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Espaciado y diseño consistente\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Tipografía unificada para encabezados de sección\u003C/li>\n\u003Cli>Patrones de diseño responsivo en todo el sitio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"optimizaciones-de-rendimiento\">Optimizaciones de Rendimiento\u003C/h3>\n\u003Cul>\n\u003Cli>Imágenes y assets optimizados\u003C/li>\n\u003Cli>Bundle de JavaScript mínimo\u003C/li>\n\u003Cli>Tiempos de carga rápidos en todos los dispositivos\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"desafíos-y-soluciones\">Desafíos y Soluciones\u003C/h2>\n\u003Cp>El mayor desafío fue implementar navegación de scroll suave para la aplicación de página única mientras mantenía la accesibilidad. Lo resolví usando CSS scroll-behavior y asegurándome de que la navegación por teclado funcione perfectamente.\u003C/p>\n\u003Ch2 id=\"qué-sigue\">¿Qué Sigue?\u003C/h2>\n\u003Cp>Estoy planeando agregar:\u003C/p>\n\u003Cul>\n\u003Cli>Funcionalidad de blog con colecciones de contenido\u003C/li>\n\u003Cli>Vitrina de proyectos con estudios de caso detallados\u003C/li>\n\u003Cli>Elementos interactivos para demostrar mis habilidades\u003C/li>\n\u003C/ul>\n\u003Cp>Construir este sitio web ha sido una gran experiencia de aprendizaje, y estoy emocionado de continuar iterando en él mientras mis habilidades y carrera evolucionan.\u003C/p>\n\u003Ch2 id=\"conclusión\">Conclusión\u003C/h2>\n\u003Cp>Este proyecto representa no solo mis habilidades técnicas, sino también mi atención al detalle y experiencia de usuario. Está construido con rendimiento, accesibilidad y mantenibilidad en mente.\u003C/p>\n\u003Cp>¡Siéntete libre de explorar el código fuente en mi GitHub o contactarme si tienes alguna pregunta sobre la implementación!\u003C/p>",{"headings":31,"localImagePaths":64,"remoteImagePaths":65,"frontmatter":66,"imagePaths":69},[32,35,39,42,45,49,52,55,58,61],{"depth":33,"slug":34,"text":14},1,"construyendo-mi-sitio-web-personal-con-astro",{"depth":36,"slug":37,"text":38},2,"por-qué-astro","¿Por qué Astro?",{"depth":36,"slug":40,"text":41},"stack-tecnológico","Stack Tecnológico",{"depth":36,"slug":43,"text":44},"características-principales","Características Principales",{"depth":46,"slug":47,"text":48},3,"soporte-multiidioma","Soporte Multiidioma",{"depth":46,"slug":50,"text":51},"arquitectura-de-componentes","Arquitectura de Componentes",{"depth":46,"slug":53,"text":54},"optimizaciones-de-rendimiento","Optimizaciones de Rendimiento",{"depth":36,"slug":56,"text":57},"desafíos-y-soluciones","Desafíos y Soluciones",{"depth":36,"slug":59,"text":60},"qué-sigue","¿Qué Sigue?",{"depth":36,"slug":62,"text":63},"conclusión","Conclusión",[],[],{"title":14,"description":15,"date":67,"tags":68,"featured":23,"lang":24,"slug":11},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,21,22],[],"building-personal-website-es.md","custom-mechanical-keyboard",{"id":71,"data":73,"body":85,"filePath":86,"digest":87,"rendered":88,"legacyId":184},{"title":74,"description":75,"date":76,"tags":77,"featured":83,"lang":84},"Building My Custom Mechanical Keyboard","The journey of designing and building a custom mechanical keyboard from scratch, including component selection and assembly process.",["Date","2024-10-05T00:00:00.000Z"],[78,79,80,81,82],"mechanical-keyboard","diy","hardware","productivity","tools",false,"en","# Building My Custom Mechanical Keyboard\n\nAs a software developer who spends countless hours typing, I've always been fascinated by mechanical keyboards. After using various off-the-shelf options, I decided it was time to build something truly customized to my needs and preferences.\n\n## Why Build a Custom Keyboard?\n\nThe decision to build a custom mechanical keyboard came from several pain points with commercial options:\n\n- **Limited Layout Options**: Most keyboards don't offer the exact layout I wanted\n- **Switch Preferences**: I wanted to experiment with different switch types\n- **Build Quality**: Many keyboards compromise on materials to hit price points\n- **Personalization**: I wanted something uniquely mine\n\n## Planning the Build\n\n### Layout Decision\n\nAfter much research, I settled on a 75% layout because it offers:\n\n- Function keys (essential for development)\n- Compact footprint\n- Arrow keys and navigation cluster\n- Good balance between functionality and desk space\n\n### Component Selection\n\n**PCB**: I chose a hot-swappable PCB to allow switch experimentation without soldering.\n\n**Switches**: After testing various options, I went with:\n\n- **Gateron Oil Kings** for alphas (smooth linear switches)\n- **Boba U4T** for modifiers (tactile switches for intentional key presses)\n\n**Keycaps**: PBT double-shot keycaps in a clean, minimalist profile that doesn't distract from code.\n\n**Case**: Aluminum case for durability and premium feel.\n\n## The Build Process\n\n### Step 1: PCB Preparation\n\nFirst, I tested the PCB to ensure all switches registered correctly:\n\n```bash\n# Used VIA software to test each key position\n# Flashed QMK firmware with my custom layout\n```\n\n### Step 2: Stabilizer Installation\n\nProper stabilizer installation is crucial for larger keys:\n\n- Clipped and lubed stabilizers for smooth operation\n- Band-aid mod on mounting points to reduce rattle\n- Balanced wire tension for consistent feel\n\n### Step 3: Switch Installation\n\nThe hot-swap PCB made this straightforward:\n\n- Carefully aligned each switch to prevent bent pins\n- Ensured consistent seating across all positions\n- Double-checked actuation before proceeding\n\n### Step 4: Assembly\n\nFinal assembly was satisfying but required patience:\n\n- Foam dampening material between PCB and case\n- Careful cable routing for clean internal layout\n- Multiple test fittings to ensure perfect alignment\n\n## Custom Programming\n\nOne of the biggest advantages of a custom keyboard is programmability. Using QMK firmware, I implemented:\n\n### Layer System\n\n```c\n// Layer 0: Base QWERTY layout\n// Layer 1: Function keys and media controls\n// Layer 2: Development-specific shortcuts\n```\n\n### Development-Focused Features\n\n- **Bracket Macros**: Quick access to different bracket types\n- **Git Shortcuts**: Common git commands on a dedicated layer\n- **IDE Navigation**: Custom shortcuts for VS Code and other editors\n\n### Productivity Enhancements\n\n- **Auto-shift**: Hold any key longer for its shifted version\n- **Tap Dance**: Multi-function keys that do different things based on tap count\n- **Leader Key**: Vim-style leader sequences for complex actions\n\n## The Programming Experience\n\n### QMK Configuration\n\nSetting up QMK was surprisingly approachable:\n\n```c\n// keymap.c snippet\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = LAYOUT(\n        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\n        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\n        // ... rest of layout\n    ),\n};\n```\n\n### Custom Macros\n\nI implemented several macros for common development tasks:\n\n```c\n// Auto-bracket macro\ncase BRACKETS:\n    if (record->event.pressed) {\n        SEND_STRING(\"()\");\n        tap_code(KC_LEFT);\n    }\n    break;\n```\n\n## Lessons Learned\n\n### What Worked Well\n\n- **Hot-swap PCB**: Game-changer for experimentation\n- **Multiple Switch Types**: Using different switches for different key groups\n- **QMK Firmware**: Incredibly powerful and flexible\n- **Quality Components**: Worth investing in good switches and keycaps\n\n### Challenges Faced\n\n- **Learning Curve**: QMK documentation can be overwhelming initially\n- **Component Compatibility**: Not all parts work together seamlessly\n- **Time Investment**: The build process took much longer than expected\n- **Cost**: Quality components add up quickly\n\n### Unexpected Benefits\n\n- **Typing Improvement**: More intentional typing due to the tactile feedback\n- **Desk Aesthetics**: The custom board became a conversation piece\n- **Technical Skills**: Learned about electronics, firmware, and hardware design\n- **Community**: Connected with the mechanical keyboard enthusiast community\n\n## Impact on Development Work\n\nAfter using the custom keyboard for several months:\n\n### Productivity Gains\n\n- **Faster Navigation**: Custom shortcuts reduced time spent in menus\n- **Reduced RSI**: Better ergonomics and switch choice reduced hand strain\n- **Improved Accuracy**: Quality switches reduced typos\n- **Mental Focus**: The satisfying typing experience improved concentration\n\n### Workflow Integration\n\nThe keyboard integrates seamlessly with my development environment:\n\n- **IDE Shortcuts**: Custom layer for VS Code, IntelliJ, and Vim\n- **Terminal Navigation**: Optimized for command-line work\n- **Git Integration**: Quick access to common git operations\n- **Documentation**: Shortcuts for quickly accessing docs and references\n\n## Future Improvements\n\nI'm already planning the next iteration:\n\n### Hardware Upgrades\n\n- **Gasket Mount**: For improved typing feel\n- **Rotary Encoder**: For volume and scroll control\n- **OLED Display**: To show current layer and system info\n- **Wireless Option**: Exploring ZMK firmware for wireless builds\n\n### Software Enhancements\n\n- **Advanced Macros**: More sophisticated text manipulation\n- **Context-Aware Layers**: Different layouts for different applications\n- **RGB Integration**: Functional lighting that indicates layer state\n- **Productivity Metrics**: Tracking typing patterns and efficiency\n\n## Conclusion\n\nBuilding a custom mechanical keyboard has been one of the most rewarding technical projects I've undertaken. It combines hardware, software, and design in a way that directly impacts my daily work.\n\nThe process taught me:\n\n- The importance of quality tools for professional work\n- How deep customization can improve efficiency\n- The value of community knowledge and open-source projects\n- That the best solutions often require time and iteration\n\nFor fellow developers considering a custom keyboard: the investment in time and money pays dividends in daily comfort and productivity. Start with a simple build and iterate—you'll be surprised how much it improves your development experience.\n\n## Resources\n\n- **QMK Firmware**: [qmk.fm](https://qmk.fm)\n- **Keyboard University**: Comprehensive learning resource\n- **r/MechanicalKeyboards**: Active community for advice and inspiration\n- **Vendor Recommendations**: Based on personal experience with quality and service\n\nThe custom keyboard has become an essential part of my development setup, and I can't imagine going back to off-the-shelf options. If you spend significant time typing, investing in a quality, customized input device is one of the best upgrades you can make.","src/content/blog/custom-mechanical-keyboard-en.md","635df01f07ac8e3e",{"html":89,"metadata":90},"\u003Ch1 id=\"building-my-custom-mechanical-keyboard\">Building My Custom Mechanical Keyboard\u003C/h1>\n\u003Cp>As a software developer who spends countless hours typing, I’ve always been fascinated by mechanical keyboards. After using various off-the-shelf options, I decided it was time to build something truly customized to my needs and preferences.\u003C/p>\n\u003Ch2 id=\"why-build-a-custom-keyboard\">Why Build a Custom Keyboard?\u003C/h2>\n\u003Cp>The decision to build a custom mechanical keyboard came from several pain points with commercial options:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Limited Layout Options\u003C/strong>: Most keyboards don’t offer the exact layout I wanted\u003C/li>\n\u003Cli>\u003Cstrong>Switch Preferences\u003C/strong>: I wanted to experiment with different switch types\u003C/li>\n\u003Cli>\u003Cstrong>Build Quality\u003C/strong>: Many keyboards compromise on materials to hit price points\u003C/li>\n\u003Cli>\u003Cstrong>Personalization\u003C/strong>: I wanted something uniquely mine\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"planning-the-build\">Planning the Build\u003C/h2>\n\u003Ch3 id=\"layout-decision\">Layout Decision\u003C/h3>\n\u003Cp>After much research, I settled on a 75% layout because it offers:\u003C/p>\n\u003Cul>\n\u003Cli>Function keys (essential for development)\u003C/li>\n\u003Cli>Compact footprint\u003C/li>\n\u003Cli>Arrow keys and navigation cluster\u003C/li>\n\u003Cli>Good balance between functionality and desk space\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"component-selection\">Component Selection\u003C/h3>\n\u003Cp>\u003Cstrong>PCB\u003C/strong>: I chose a hot-swappable PCB to allow switch experimentation without soldering.\u003C/p>\n\u003Cp>\u003Cstrong>Switches\u003C/strong>: After testing various options, I went with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gateron Oil Kings\u003C/strong> for alphas (smooth linear switches)\u003C/li>\n\u003Cli>\u003Cstrong>Boba U4T\u003C/strong> for modifiers (tactile switches for intentional key presses)\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Keycaps\u003C/strong>: PBT double-shot keycaps in a clean, minimalist profile that doesn’t distract from code.\u003C/p>\n\u003Cp>\u003Cstrong>Case\u003C/strong>: Aluminum case for durability and premium feel.\u003C/p>\n\u003Ch2 id=\"the-build-process\">The Build Process\u003C/h2>\n\u003Ch3 id=\"step-1-pcb-preparation\">Step 1: PCB Preparation\u003C/h3>\n\u003Cp>First, I tested the PCB to ensure all switches registered correctly:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">\u003Cspan class=\"token comment\"># Used VIA software to test each key position\u003C/span>\n\u003Cspan class=\"token comment\"># Flashed QMK firmware with my custom layout\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"step-2-stabilizer-installation\">Step 2: Stabilizer Installation\u003C/h3>\n\u003Cp>Proper stabilizer installation is crucial for larger keys:\u003C/p>\n\u003Cul>\n\u003Cli>Clipped and lubed stabilizers for smooth operation\u003C/li>\n\u003Cli>Band-aid mod on mounting points to reduce rattle\u003C/li>\n\u003Cli>Balanced wire tension for consistent feel\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-3-switch-installation\">Step 3: Switch Installation\u003C/h3>\n\u003Cp>The hot-swap PCB made this straightforward:\u003C/p>\n\u003Cul>\n\u003Cli>Carefully aligned each switch to prevent bent pins\u003C/li>\n\u003Cli>Ensured consistent seating across all positions\u003C/li>\n\u003Cli>Double-checked actuation before proceeding\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"step-4-assembly\">Step 4: Assembly\u003C/h3>\n\u003Cp>Final assembly was satisfying but required patience:\u003C/p>\n\u003Cul>\n\u003Cli>Foam dampening material between PCB and case\u003C/li>\n\u003Cli>Careful cable routing for clean internal layout\u003C/li>\n\u003Cli>Multiple test fittings to ensure perfect alignment\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"custom-programming\">Custom Programming\u003C/h2>\n\u003Cp>One of the biggest advantages of a custom keyboard is programmability. Using QMK firmware, I implemented:\u003C/p>\n\u003Ch3 id=\"layer-system\">Layer System\u003C/h3>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// Layer 0: Base QWERTY layout\u003C/span>\n\u003Cspan class=\"token comment\">// Layer 1: Function keys and media controls\u003C/span>\n\u003Cspan class=\"token comment\">// Layer 2: Development-specific shortcuts\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"development-focused-features\">Development-Focused Features\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Bracket Macros\u003C/strong>: Quick access to different bracket types\u003C/li>\n\u003Cli>\u003Cstrong>Git Shortcuts\u003C/strong>: Common git commands on a dedicated layer\u003C/li>\n\u003Cli>\u003Cstrong>IDE Navigation\u003C/strong>: Custom shortcuts for VS Code and other editors\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"productivity-enhancements\">Productivity Enhancements\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Auto-shift\u003C/strong>: Hold any key longer for its shifted version\u003C/li>\n\u003Cli>\u003Cstrong>Tap Dance\u003C/strong>: Multi-function keys that do different things based on tap count\u003C/li>\n\u003Cli>\u003Cstrong>Leader Key\u003C/strong>: Vim-style leader sequences for complex actions\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-programming-experience\">The Programming Experience\u003C/h2>\n\u003Ch3 id=\"qmk-configuration\">QMK Configuration\u003C/h3>\n\u003Cp>Setting up QMK was surprisingly approachable:\u003C/p>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// keymap.c snippet\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token class-name\">uint16_t\u003C/span> PROGMEM keymaps\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>MATRIX_ROWS\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>MATRIX_COLS\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">LAYOUT\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n        KC_ESC\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F1\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F2\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F3\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F4\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F5\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F6\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F7\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F8\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F9\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F10\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F11\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F12\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_PSCR\u003Cspan class=\"token punctuation\">,\u003C/span> KC_DEL\u003Cspan class=\"token punctuation\">,\u003C/span>\n        KC_GRV\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_1\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_2\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_3\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_4\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_5\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_6\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_7\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_8\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_9\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_0\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_MINS\u003Cspan class=\"token punctuation\">,\u003C/span> KC_EQL\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_BSPC\u003Cspan class=\"token punctuation\">,\u003C/span> KC_HOME\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token comment\">// ... rest of layout\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"custom-macros\">Custom Macros\u003C/h3>\n\u003Cp>I implemented several macros for common development tasks:\u003C/p>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// Auto-bracket macro\u003C/span>\n\u003Cspan class=\"token keyword\">case\u003C/span> BRACKETS\u003Cspan class=\"token operator\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>record\u003Cspan class=\"token operator\">->\u003C/span>event\u003Cspan class=\"token punctuation\">.\u003C/span>pressed\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token function\">SEND_STRING\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"()\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n        \u003Cspan class=\"token function\">tap_code\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>KC_LEFT\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"lessons-learned\">Lessons Learned\u003C/h2>\n\u003Ch3 id=\"what-worked-well\">What Worked Well\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Hot-swap PCB\u003C/strong>: Game-changer for experimentation\u003C/li>\n\u003Cli>\u003Cstrong>Multiple Switch Types\u003C/strong>: Using different switches for different key groups\u003C/li>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: Incredibly powerful and flexible\u003C/li>\n\u003Cli>\u003Cstrong>Quality Components\u003C/strong>: Worth investing in good switches and keycaps\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"challenges-faced\">Challenges Faced\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Learning Curve\u003C/strong>: QMK documentation can be overwhelming initially\u003C/li>\n\u003Cli>\u003Cstrong>Component Compatibility\u003C/strong>: Not all parts work together seamlessly\u003C/li>\n\u003Cli>\u003Cstrong>Time Investment\u003C/strong>: The build process took much longer than expected\u003C/li>\n\u003Cli>\u003Cstrong>Cost\u003C/strong>: Quality components add up quickly\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"unexpected-benefits\">Unexpected Benefits\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Typing Improvement\u003C/strong>: More intentional typing due to the tactile feedback\u003C/li>\n\u003Cli>\u003Cstrong>Desk Aesthetics\u003C/strong>: The custom board became a conversation piece\u003C/li>\n\u003Cli>\u003Cstrong>Technical Skills\u003C/strong>: Learned about electronics, firmware, and hardware design\u003C/li>\n\u003Cli>\u003Cstrong>Community\u003C/strong>: Connected with the mechanical keyboard enthusiast community\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"impact-on-development-work\">Impact on Development Work\u003C/h2>\n\u003Cp>After using the custom keyboard for several months:\u003C/p>\n\u003Ch3 id=\"productivity-gains\">Productivity Gains\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Faster Navigation\u003C/strong>: Custom shortcuts reduced time spent in menus\u003C/li>\n\u003Cli>\u003Cstrong>Reduced RSI\u003C/strong>: Better ergonomics and switch choice reduced hand strain\u003C/li>\n\u003Cli>\u003Cstrong>Improved Accuracy\u003C/strong>: Quality switches reduced typos\u003C/li>\n\u003Cli>\u003Cstrong>Mental Focus\u003C/strong>: The satisfying typing experience improved concentration\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"workflow-integration\">Workflow Integration\u003C/h3>\n\u003Cp>The keyboard integrates seamlessly with my development environment:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>IDE Shortcuts\u003C/strong>: Custom layer for VS Code, IntelliJ, and Vim\u003C/li>\n\u003Cli>\u003Cstrong>Terminal Navigation\u003C/strong>: Optimized for command-line work\u003C/li>\n\u003Cli>\u003Cstrong>Git Integration\u003C/strong>: Quick access to common git operations\u003C/li>\n\u003Cli>\u003Cstrong>Documentation\u003C/strong>: Shortcuts for quickly accessing docs and references\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"future-improvements\">Future Improvements\u003C/h2>\n\u003Cp>I’m already planning the next iteration:\u003C/p>\n\u003Ch3 id=\"hardware-upgrades\">Hardware Upgrades\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gasket Mount\u003C/strong>: For improved typing feel\u003C/li>\n\u003Cli>\u003Cstrong>Rotary Encoder\u003C/strong>: For volume and scroll control\u003C/li>\n\u003Cli>\u003Cstrong>OLED Display\u003C/strong>: To show current layer and system info\u003C/li>\n\u003Cli>\u003Cstrong>Wireless Option\u003C/strong>: Exploring ZMK firmware for wireless builds\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"software-enhancements\">Software Enhancements\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Advanced Macros\u003C/strong>: More sophisticated text manipulation\u003C/li>\n\u003Cli>\u003Cstrong>Context-Aware Layers\u003C/strong>: Different layouts for different applications\u003C/li>\n\u003Cli>\u003Cstrong>RGB Integration\u003C/strong>: Functional lighting that indicates layer state\u003C/li>\n\u003Cli>\u003Cstrong>Productivity Metrics\u003C/strong>: Tracking typing patterns and efficiency\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Building a custom mechanical keyboard has been one of the most rewarding technical projects I’ve undertaken. It combines hardware, software, and design in a way that directly impacts my daily work.\u003C/p>\n\u003Cp>The process taught me:\u003C/p>\n\u003Cul>\n\u003Cli>The importance of quality tools for professional work\u003C/li>\n\u003Cli>How deep customization can improve efficiency\u003C/li>\n\u003Cli>The value of community knowledge and open-source projects\u003C/li>\n\u003Cli>That the best solutions often require time and iteration\u003C/li>\n\u003C/ul>\n\u003Cp>For fellow developers considering a custom keyboard: the investment in time and money pays dividends in daily comfort and productivity. Start with a simple build and iterate—you’ll be surprised how much it improves your development experience.\u003C/p>\n\u003Ch2 id=\"resources\">Resources\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: \u003Ca href=\"https://qmk.fm\">qmk.fm\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Keyboard University\u003C/strong>: Comprehensive learning resource\u003C/li>\n\u003Cli>\u003Cstrong>r/MechanicalKeyboards\u003C/strong>: Active community for advice and inspiration\u003C/li>\n\u003Cli>\u003Cstrong>Vendor Recommendations\u003C/strong>: Based on personal experience with quality and service\u003C/li>\n\u003C/ul>\n\u003Cp>The custom keyboard has become an essential part of my development setup, and I can’t imagine going back to off-the-shelf options. If you spend significant time typing, investing in a quality, customized input device is one of the best upgrades you can make.\u003C/p>",{"headings":91,"localImagePaths":178,"remoteImagePaths":179,"frontmatter":180,"imagePaths":183},[92,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175],{"depth":33,"slug":93,"text":74},"building-my-custom-mechanical-keyboard",{"depth":36,"slug":95,"text":96},"why-build-a-custom-keyboard","Why Build a Custom Keyboard?",{"depth":36,"slug":98,"text":99},"planning-the-build","Planning the Build",{"depth":46,"slug":101,"text":102},"layout-decision","Layout Decision",{"depth":46,"slug":104,"text":105},"component-selection","Component Selection",{"depth":36,"slug":107,"text":108},"the-build-process","The Build Process",{"depth":46,"slug":110,"text":111},"step-1-pcb-preparation","Step 1: PCB Preparation",{"depth":46,"slug":113,"text":114},"step-2-stabilizer-installation","Step 2: Stabilizer Installation",{"depth":46,"slug":116,"text":117},"step-3-switch-installation","Step 3: Switch Installation",{"depth":46,"slug":119,"text":120},"step-4-assembly","Step 4: Assembly",{"depth":36,"slug":122,"text":123},"custom-programming","Custom Programming",{"depth":46,"slug":125,"text":126},"layer-system","Layer System",{"depth":46,"slug":128,"text":129},"development-focused-features","Development-Focused Features",{"depth":46,"slug":131,"text":132},"productivity-enhancements","Productivity Enhancements",{"depth":36,"slug":134,"text":135},"the-programming-experience","The Programming Experience",{"depth":46,"slug":137,"text":138},"qmk-configuration","QMK Configuration",{"depth":46,"slug":140,"text":141},"custom-macros","Custom Macros",{"depth":36,"slug":143,"text":144},"lessons-learned","Lessons Learned",{"depth":46,"slug":146,"text":147},"what-worked-well","What Worked Well",{"depth":46,"slug":149,"text":150},"challenges-faced","Challenges Faced",{"depth":46,"slug":152,"text":153},"unexpected-benefits","Unexpected Benefits",{"depth":36,"slug":155,"text":156},"impact-on-development-work","Impact on Development Work",{"depth":46,"slug":158,"text":159},"productivity-gains","Productivity Gains",{"depth":46,"slug":161,"text":162},"workflow-integration","Workflow Integration",{"depth":36,"slug":164,"text":165},"future-improvements","Future Improvements",{"depth":46,"slug":167,"text":168},"hardware-upgrades","Hardware Upgrades",{"depth":46,"slug":170,"text":171},"software-enhancements","Software Enhancements",{"depth":36,"slug":173,"text":174},"conclusion","Conclusion",{"depth":36,"slug":176,"text":177},"resources","Resources",[],[],{"title":74,"description":75,"date":181,"tags":182,"featured":83,"lang":84,"slug":71},["Date","2024-10-05T00:00:00.000Z"],[78,79,80,81,82],[],"custom-mechanical-keyboard-en.md","building-personal-website",{"id":185,"data":187,"body":194,"filePath":195,"digest":196,"rendered":197,"legacyId":234},{"title":188,"description":189,"date":190,"tags":191,"featured":23,"lang":84},"Building My Personal Website with Astro","How I built my personal portfolio website using Astro, React, and Tailwind CSS with multilingual support.",["Date","2024-12-15T00:00:00.000Z"],[18,19,20,192,193],"portfolio","web-development","# Building My Personal Website with Astro\n\nCreating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\n\n## Why Astro?\n\nI chose Astro for several compelling reasons:\n\n- **Performance First**: Astro's island architecture ensures zero JavaScript by default, shipping only what's necessary\n- **Framework Agnostic**: I can use React components where needed while keeping the rest static\n- **Developer Experience**: Great TypeScript support and modern tooling out of the box\n\n## Technology Stack\n\nThe website is built with:\n\n- **Astro v5** - The core framework\n- **React** - For interactive components\n- **Tailwind CSS** - For styling with a custom theme\n- **TypeScript** - Type safety throughout\n\n## Key Features\n\n### Multilingual Support\n\nOne feature I'm particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\n\n### Component Architecture\n\nI structured the site using reusable components:\n\n- `SectionContainer` - Consistent spacing and layout\n- `SectionTitle` - Unified typography for section headers\n- Responsive design patterns throughout\n\n### Performance Optimizations\n\n- Optimized images and assets\n- Minimal JavaScript bundle\n- Fast loading times across all devices\n\n## Challenges and Solutions\n\nThe biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\n\n## What's Next?\n\nI'm planning to add:\n\n- Blog functionality with content collections\n- Project showcase with detailed case studies\n- Interactive elements to demonstrate my skills\n\nBuilding this website has been a great learning experience, and I'm excited to continue iterating on it as my skills and career evolve.\n\n## Conclusion\n\nThis project represents not just my technical skills, but also my attention to detail and user experience. It's built with performance, accessibility, and maintainability in mind.\n\nFeel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!","src/content/blog/building-personal-website-en.md","73779b7bcc7bbab5",{"html":198,"metadata":199},"\u003Ch1 id=\"building-my-personal-website-with-astro\">Building My Personal Website with Astro\u003C/h1>\n\u003Cp>Creating a personal website has always been on my todo list, and after years of putting it off, I finally decided to build something that truly represents me as a developer.\u003C/p>\n\u003Ch2 id=\"why-astro\">Why Astro?\u003C/h2>\n\u003Cp>I chose Astro for several compelling reasons:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Performance First\u003C/strong>: Astro’s island architecture ensures zero JavaScript by default, shipping only what’s necessary\u003C/li>\n\u003Cli>\u003Cstrong>Framework Agnostic\u003C/strong>: I can use React components where needed while keeping the rest static\u003C/li>\n\u003Cli>\u003Cstrong>Developer Experience\u003C/strong>: Great TypeScript support and modern tooling out of the box\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"technology-stack\">Technology Stack\u003C/h2>\n\u003Cp>The website is built with:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro v5\u003C/strong> - The core framework\u003C/li>\n\u003Cli>\u003Cstrong>React\u003C/strong> - For interactive components\u003C/li>\n\u003Cli>\u003Cstrong>Tailwind CSS\u003C/strong> - For styling with a custom theme\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - Type safety throughout\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-features\">Key Features\u003C/h2>\n\u003Ch3 id=\"multilingual-support\">Multilingual Support\u003C/h3>\n\u003Cp>One feature I’m particularly proud of is the i18n implementation. The site supports both English and Spanish, allowing me to reach a broader audience. The language switcher is intuitive and maintains context across page sections.\u003C/p>\n\u003Ch3 id=\"component-architecture\">Component Architecture\u003C/h3>\n\u003Cp>I structured the site using reusable components:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>SectionContainer\u003C/code> - Consistent spacing and layout\u003C/li>\n\u003Cli>\u003Ccode>SectionTitle\u003C/code> - Unified typography for section headers\u003C/li>\n\u003Cli>Responsive design patterns throughout\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"performance-optimizations\">Performance Optimizations\u003C/h3>\n\u003Cul>\n\u003Cli>Optimized images and assets\u003C/li>\n\u003Cli>Minimal JavaScript bundle\u003C/li>\n\u003Cli>Fast loading times across all devices\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"challenges-and-solutions\">Challenges and Solutions\u003C/h2>\n\u003Cp>The biggest challenge was implementing smooth scroll navigation for the single-page application while maintaining accessibility. I solved this by using CSS scroll-behavior and ensuring keyboard navigation works seamlessly.\u003C/p>\n\u003Ch2 id=\"whats-next\">What’s Next?\u003C/h2>\n\u003Cp>I’m planning to add:\u003C/p>\n\u003Cul>\n\u003Cli>Blog functionality with content collections\u003C/li>\n\u003Cli>Project showcase with detailed case studies\u003C/li>\n\u003Cli>Interactive elements to demonstrate my skills\u003C/li>\n\u003C/ul>\n\u003Cp>Building this website has been a great learning experience, and I’m excited to continue iterating on it as my skills and career evolve.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This project represents not just my technical skills, but also my attention to detail and user experience. It’s built with performance, accessibility, and maintainability in mind.\u003C/p>\n\u003Cp>Feel free to explore the source code on my GitHub or reach out if you have any questions about the implementation!\u003C/p>",{"headings":200,"localImagePaths":228,"remoteImagePaths":229,"frontmatter":230,"imagePaths":233},[201,203,206,209,212,215,218,221,224,227],{"depth":33,"slug":202,"text":188},"building-my-personal-website-with-astro",{"depth":36,"slug":204,"text":205},"why-astro","Why Astro?",{"depth":36,"slug":207,"text":208},"technology-stack","Technology Stack",{"depth":36,"slug":210,"text":211},"key-features","Key Features",{"depth":46,"slug":213,"text":214},"multilingual-support","Multilingual Support",{"depth":46,"slug":216,"text":217},"component-architecture","Component Architecture",{"depth":46,"slug":219,"text":220},"performance-optimizations","Performance Optimizations",{"depth":36,"slug":222,"text":223},"challenges-and-solutions","Challenges and Solutions",{"depth":36,"slug":225,"text":226},"whats-next","What’s Next?",{"depth":36,"slug":173,"text":174},[],[],{"title":188,"description":189,"date":231,"tags":232,"featured":23,"lang":84,"slug":185},["Date","2024-12-15T00:00:00.000Z"],[18,19,20,192,193],[],"building-personal-website-en.md","teclado-mecánico-personalizado",{"id":235,"data":237,"body":245,"filePath":246,"digest":247,"rendered":248,"legacyId":342},{"title":238,"description":239,"date":240,"tags":241,"featured":83,"lang":24},"Construyendo Mi Teclado Mecánico Personalizado","El viaje de diseñar y construir un teclado mecánico personalizado desde cero, incluyendo selección de componentes y proceso de ensamblaje.",["Date","2024-10-05T00:00:00.000Z"],[242,79,80,243,244],"teclado-mecánico","productividad","herramientas","# Construyendo Mi Teclado Mecánico Personalizado\n\nComo desarrollador de software que pasa incontables horas escribiendo, siempre me han fascinado los teclados mecánicos. Después de usar varias opciones comerciales, decidí que era hora de construir algo verdaderamente personalizado para mis necesidades y preferencias.\n\n## ¿Por qué Construir un Teclado Personalizado?\n\nLa decisión de construir un teclado mecánico personalizado surgió de varios problemas con las opciones comerciales:\n\n- **Opciones de Layout Limitadas**: La mayoría de teclados no ofrecen exactamente el layout que quería\n- **Preferencias de Switches**: Quería experimentar con diferentes tipos de switches\n- **Calidad de Construcción**: Muchos teclados comprometen materiales para alcanzar ciertos precios\n- **Personalización**: Quería algo únicamente mío\n\n## Planificando la Construcción\n\n### Decisión de Layout\n\nDespués de mucha investigación, me decidí por un layout 75% porque ofrece:\n\n- Teclas de función (esenciales para desarrollo)\n- Huella compacta\n- Teclas de dirección y cluster de navegación\n- Buen balance entre funcionalidad y espacio en el escritorio\n\n### Selección de Componentes\n\n**PCB**: Elegí un PCB hot-swappable para permitir experimentación de switches sin soldadura.\n\n**Switches**: Después de probar varias opciones, opté por:\n\n- **Gateron Oil Kings** para alfas (switches lineales suaves)\n- **Boba U4T** para modificadores (switches táctiles para pulsaciones intencionales)\n\n**Keycaps**: Keycaps PBT double-shot en un perfil limpio y minimalista que no distrae del código.\n\n**Case**: Case de aluminio para durabilidad y sensación premium.\n\n## El Proceso de Construcción\n\n### Paso 1: Preparación del PCB\n\nPrimero, probé el PCB para asegurar que todos los switches registraran correctamente:\n\n```bash\n# Usé software VIA para probar cada posición de tecla\n# Flasheé firmware QMK con mi layout personalizado\n```\n\n### Paso 2: Instalación de Estabilizadores\n\nLa instalación adecuada de estabilizadores es crucial para teclas más grandes:\n\n- Recorté y lubrifiqué estabilizadores para operación suave\n- Mod de band-aid en puntos de montaje para reducir ruido\n- Tensión balanceada del alambre para sensación consistente\n\n### Paso 3: Instalación de Switches\n\nEl PCB hot-swap hizo esto sencillo:\n\n- Alineé cuidadosamente cada switch para prevenir pines doblados\n- Aseguré asentamiento consistente en todas las posiciones\n- Verifiqué doble activación antes de proceder\n\n### Paso 4: Ensamblaje\n\nEl ensamblaje final fue satisfactorio pero requirió paciencia:\n\n- Material amortiguador de espuma entre PCB y case\n- Enrutado cuidadoso de cables para layout interno limpio\n- Múltiples pruebas de ajuste para asegurar alineación perfecta\n\n## Programación Personalizada\n\nUna de las mayores ventajas de un teclado personalizado es la programabilidad. Usando firmware QMK, implementé:\n\n### Sistema de Capas\n\n```c\n// Capa 0: Layout base QWERTY\n// Capa 1: Teclas de función y controles multimedia\n// Capa 2: Atajos específicos para desarrollo\n```\n\n### Características Enfocadas en Desarrollo\n\n- **Macros de Brackets**: Acceso rápido a diferentes tipos de brackets\n- **Atajos de Git**: Comandos git comunes en una capa dedicada\n- **Navegación IDE**: Atajos personalizados para VS Code y otros editores\n\n### Mejoras de Productividad\n\n- **Auto-shift**: Mantener cualquier tecla más tiempo para su versión shifteada\n- **Tap Dance**: Teclas multifunción que hacen cosas diferentes basadas en número de toques\n- **Leader Key**: Secuencias estilo Vim para acciones complejas\n\n## La Experiencia de Programación\n\n### Configuración QMK\n\nConfigurar QMK fue sorprendentemente accesible:\n\n```c\n// fragmento de keymap.c\nconst uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    [0] = LAYOUT(\n        KC_ESC,  KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  KC_PSCR, KC_DEL,\n        KC_GRV,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  KC_BSPC, KC_HOME,\n        // ... resto del layout\n    ),\n};\n```\n\n### Macros Personalizados\n\nImplementé varios macros para tareas comunes de desarrollo:\n\n```c\n// Macro auto-bracket\ncase BRACKETS:\n    if (record->event.pressed) {\n        SEND_STRING(\"()\");\n        tap_code(KC_LEFT);\n    }\n    break;\n```\n\n## Lecciones Aprendidas\n\n### Lo que Funcionó Bien\n\n- **PCB Hot-swap**: Cambió el juego para experimentación\n- **Múltiples Tipos de Switches**: Usar diferentes switches para diferentes grupos de teclas\n- **Firmware QMK**: Increíblemente poderoso y flexible\n- **Componentes de Calidad**: Vale la pena invertir en buenos switches y keycaps\n\n### Desafíos Enfrentados\n\n- **Curva de Aprendizaje**: La documentación de QMK puede ser abrumadora inicialmente\n- **Compatibilidad de Componentes**: No todas las partes funcionan juntas perfectamente\n- **Inversión de Tiempo**: El proceso de construcción tomó mucho más tiempo del esperado\n- **Costo**: Los componentes de calidad se suman rápidamente\n\n### Beneficios Inesperados\n\n- **Mejora en Escritura**: Escritura más intencional debido al feedback táctil\n- **Estética del Escritorio**: El teclado personalizado se convirtió en pieza de conversación\n- **Habilidades Técnicas**: Aprendí sobre electrónica, firmware y diseño de hardware\n- **Comunidad**: Me conecté con la comunidad de entusiastas de teclados mecánicos\n\n## Impacto en el Trabajo de Desarrollo\n\nDespués de usar el teclado personalizado por varios meses:\n\n### Ganancias de Productividad\n\n- **Navegación Más Rápida**: Atajos personalizados redujeron tiempo en menús\n- **RSI Reducido**: Mejor ergonomía y elección de switches redujo tensión en manos\n- **Precisión Mejorada**: Switches de calidad redujeron errores de tipeo\n- **Enfoque Mental**: La experiencia satisfactoria de escritura mejoró concentración\n\n### Integración de Flujo de Trabajo\n\nEl teclado se integra perfectamente con mi entorno de desarrollo:\n\n- **Atajos IDE**: Capa personalizada para VS Code, IntelliJ y Vim\n- **Navegación Terminal**: Optimizado para trabajo en línea de comandos\n- **Integración Git**: Acceso rápido a operaciones git comunes\n- **Documentación**: Atajos para acceder rápidamente a docs y referencias\n\n## Mejoras Futuras\n\nYa estoy planeando la siguiente iteración:\n\n### Mejoras de Hardware\n\n- **Gasket Mount**: Para mejor sensación de escritura\n- **Rotary Encoder**: Para control de volumen y scroll\n- **Pantalla OLED**: Para mostrar capa actual e info del sistema\n- **Opción Inalámbrica**: Explorando firmware ZMK para builds inalámbricos\n\n### Mejoras de Software\n\n- **Macros Avanzados**: Manipulación de texto más sofisticada\n- **Capas Context-Aware**: Diferentes layouts para diferentes aplicaciones\n- **Integración RGB**: Iluminación funcional que indica estado de capa\n- **Métricas de Productividad**: Seguimiento de patrones de escritura y eficiencia\n\n## Conclusión\n\nConstruir un teclado mecánico personalizado ha sido uno de los proyectos técnicos más gratificantes que he emprendido. Combina hardware, software y diseño de una manera que impacta directamente mi trabajo diario.\n\nEl proceso me enseñó:\n\n- La importancia de herramientas de calidad para trabajo profesional\n- Cómo la personalización profunda puede mejorar eficiencia\n- El valor del conocimiento comunitario y proyectos open-source\n- Que las mejores soluciones a menudo requieren tiempo e iteración\n\nPara compañeros desarrolladores considerando un teclado personalizado: la inversión en tiempo y dinero paga dividendos en comodidad y productividad diaria. Comienza con una construcción simple e itera—te sorprenderá cuánto mejora tu experiencia de desarrollo.\n\n## Recursos\n\n- **QMK Firmware**: [qmk.fm](https://qmk.fm)\n- **Keyboard University**: Recurso de aprendizaje integral\n- **r/MechanicalKeyboards**: Comunidad activa para consejos e inspiración\n- **Recomendaciones de Vendedores**: Basadas en experiencia personal con calidad y servicio\n\nEl teclado personalizado se ha convertido en una parte esencial de mi setup de desarrollo, y no puedo imaginar volver a opciones comerciales. Si pasas tiempo significativo escribiendo, invertir en un dispositivo de entrada de calidad y personalizado es una de las mejores mejoras que puedes hacer.","src/content/blog/custom-mechanical-keyboard-es.md","2833b842b0da7be1",{"html":249,"metadata":250},"\u003Ch1 id=\"construyendo-mi-teclado-mecánico-personalizado\">Construyendo Mi Teclado Mecánico Personalizado\u003C/h1>\n\u003Cp>Como desarrollador de software que pasa incontables horas escribiendo, siempre me han fascinado los teclados mecánicos. Después de usar varias opciones comerciales, decidí que era hora de construir algo verdaderamente personalizado para mis necesidades y preferencias.\u003C/p>\n\u003Ch2 id=\"por-qué-construir-un-teclado-personalizado\">¿Por qué Construir un Teclado Personalizado?\u003C/h2>\n\u003Cp>La decisión de construir un teclado mecánico personalizado surgió de varios problemas con las opciones comerciales:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Opciones de Layout Limitadas\u003C/strong>: La mayoría de teclados no ofrecen exactamente el layout que quería\u003C/li>\n\u003Cli>\u003Cstrong>Preferencias de Switches\u003C/strong>: Quería experimentar con diferentes tipos de switches\u003C/li>\n\u003Cli>\u003Cstrong>Calidad de Construcción\u003C/strong>: Muchos teclados comprometen materiales para alcanzar ciertos precios\u003C/li>\n\u003Cli>\u003Cstrong>Personalización\u003C/strong>: Quería algo únicamente mío\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"planificando-la-construcción\">Planificando la Construcción\u003C/h2>\n\u003Ch3 id=\"decisión-de-layout\">Decisión de Layout\u003C/h3>\n\u003Cp>Después de mucha investigación, me decidí por un layout 75% porque ofrece:\u003C/p>\n\u003Cul>\n\u003Cli>Teclas de función (esenciales para desarrollo)\u003C/li>\n\u003Cli>Huella compacta\u003C/li>\n\u003Cli>Teclas de dirección y cluster de navegación\u003C/li>\n\u003Cli>Buen balance entre funcionalidad y espacio en el escritorio\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"selección-de-componentes\">Selección de Componentes\u003C/h3>\n\u003Cp>\u003Cstrong>PCB\u003C/strong>: Elegí un PCB hot-swappable para permitir experimentación de switches sin soldadura.\u003C/p>\n\u003Cp>\u003Cstrong>Switches\u003C/strong>: Después de probar varias opciones, opté por:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gateron Oil Kings\u003C/strong> para alfas (switches lineales suaves)\u003C/li>\n\u003Cli>\u003Cstrong>Boba U4T\u003C/strong> para modificadores (switches táctiles para pulsaciones intencionales)\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Keycaps\u003C/strong>: Keycaps PBT double-shot en un perfil limpio y minimalista que no distrae del código.\u003C/p>\n\u003Cp>\u003Cstrong>Case\u003C/strong>: Case de aluminio para durabilidad y sensación premium.\u003C/p>\n\u003Ch2 id=\"el-proceso-de-construcción\">El Proceso de Construcción\u003C/h2>\n\u003Ch3 id=\"paso-1-preparación-del-pcb\">Paso 1: Preparación del PCB\u003C/h3>\n\u003Cp>Primero, probé el PCB para asegurar que todos los switches registraran correctamente:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">\u003Cspan class=\"token comment\"># Usé software VIA para probar cada posición de tecla\u003C/span>\n\u003Cspan class=\"token comment\"># Flasheé firmware QMK con mi layout personalizado\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"paso-2-instalación-de-estabilizadores\">Paso 2: Instalación de Estabilizadores\u003C/h3>\n\u003Cp>La instalación adecuada de estabilizadores es crucial para teclas más grandes:\u003C/p>\n\u003Cul>\n\u003Cli>Recorté y lubrifiqué estabilizadores para operación suave\u003C/li>\n\u003Cli>Mod de band-aid en puntos de montaje para reducir ruido\u003C/li>\n\u003Cli>Tensión balanceada del alambre para sensación consistente\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"paso-3-instalación-de-switches\">Paso 3: Instalación de Switches\u003C/h3>\n\u003Cp>El PCB hot-swap hizo esto sencillo:\u003C/p>\n\u003Cul>\n\u003Cli>Alineé cuidadosamente cada switch para prevenir pines doblados\u003C/li>\n\u003Cli>Aseguré asentamiento consistente en todas las posiciones\u003C/li>\n\u003Cli>Verifiqué doble activación antes de proceder\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"paso-4-ensamblaje\">Paso 4: Ensamblaje\u003C/h3>\n\u003Cp>El ensamblaje final fue satisfactorio pero requirió paciencia:\u003C/p>\n\u003Cul>\n\u003Cli>Material amortiguador de espuma entre PCB y case\u003C/li>\n\u003Cli>Enrutado cuidadoso de cables para layout interno limpio\u003C/li>\n\u003Cli>Múltiples pruebas de ajuste para asegurar alineación perfecta\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"programación-personalizada\">Programación Personalizada\u003C/h2>\n\u003Cp>Una de las mayores ventajas de un teclado personalizado es la programabilidad. Usando firmware QMK, implementé:\u003C/p>\n\u003Ch3 id=\"sistema-de-capas\">Sistema de Capas\u003C/h3>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// Capa 0: Layout base QWERTY\u003C/span>\n\u003Cspan class=\"token comment\">// Capa 1: Teclas de función y controles multimedia\u003C/span>\n\u003Cspan class=\"token comment\">// Capa 2: Atajos específicos para desarrollo\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"características-enfocadas-en-desarrollo\">Características Enfocadas en Desarrollo\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Macros de Brackets\u003C/strong>: Acceso rápido a diferentes tipos de brackets\u003C/li>\n\u003Cli>\u003Cstrong>Atajos de Git\u003C/strong>: Comandos git comunes en una capa dedicada\u003C/li>\n\u003Cli>\u003Cstrong>Navegación IDE\u003C/strong>: Atajos personalizados para VS Code y otros editores\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"mejoras-de-productividad\">Mejoras de Productividad\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Auto-shift\u003C/strong>: Mantener cualquier tecla más tiempo para su versión shifteada\u003C/li>\n\u003Cli>\u003Cstrong>Tap Dance\u003C/strong>: Teclas multifunción que hacen cosas diferentes basadas en número de toques\u003C/li>\n\u003Cli>\u003Cstrong>Leader Key\u003C/strong>: Secuencias estilo Vim para acciones complejas\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"la-experiencia-de-programación\">La Experiencia de Programación\u003C/h2>\n\u003Ch3 id=\"configuración-qmk\">Configuración QMK\u003C/h3>\n\u003Cp>Configurar QMK fue sorprendentemente accesible:\u003C/p>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// fragmento de keymap.c\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token class-name\">uint16_t\u003C/span> PROGMEM keymaps\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>MATRIX_ROWS\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>MATRIX_COLS\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">LAYOUT\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n        KC_ESC\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F1\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F2\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F3\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F4\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F5\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F6\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F7\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F8\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F9\u003Cspan class=\"token punctuation\">,\u003C/span>   KC_F10\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F11\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_F12\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_PSCR\u003Cspan class=\"token punctuation\">,\u003C/span> KC_DEL\u003Cspan class=\"token punctuation\">,\u003C/span>\n        KC_GRV\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_1\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_2\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_3\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_4\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_5\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_6\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_7\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_8\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_9\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_0\u003Cspan class=\"token punctuation\">,\u003C/span>    KC_MINS\u003Cspan class=\"token punctuation\">,\u003C/span> KC_EQL\u003Cspan class=\"token punctuation\">,\u003C/span>  KC_BSPC\u003Cspan class=\"token punctuation\">,\u003C/span> KC_HOME\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token comment\">// ... resto del layout\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"macros-personalizados\">Macros Personalizados\u003C/h3>\n\u003Cp>Implementé varios macros para tareas comunes de desarrollo:\u003C/p>\n\u003Cpre class=\"language-c\" data-language=\"c\">\u003Ccode is:raw=\"\" class=\"language-c\">\u003Cspan class=\"token comment\">// Macro auto-bracket\u003C/span>\n\u003Cspan class=\"token keyword\">case\u003C/span> BRACKETS\u003Cspan class=\"token operator\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>record\u003Cspan class=\"token operator\">->\u003C/span>event\u003Cspan class=\"token punctuation\">.\u003C/span>pressed\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token function\">SEND_STRING\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"()\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n        \u003Cspan class=\"token function\">tap_code\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>KC_LEFT\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"lecciones-aprendidas\">Lecciones Aprendidas\u003C/h2>\n\u003Ch3 id=\"lo-que-funcionó-bien\">Lo que Funcionó Bien\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>PCB Hot-swap\u003C/strong>: Cambió el juego para experimentación\u003C/li>\n\u003Cli>\u003Cstrong>Múltiples Tipos de Switches\u003C/strong>: Usar diferentes switches para diferentes grupos de teclas\u003C/li>\n\u003Cli>\u003Cstrong>Firmware QMK\u003C/strong>: Increíblemente poderoso y flexible\u003C/li>\n\u003Cli>\u003Cstrong>Componentes de Calidad\u003C/strong>: Vale la pena invertir en buenos switches y keycaps\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"desafíos-enfrentados\">Desafíos Enfrentados\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Curva de Aprendizaje\u003C/strong>: La documentación de QMK puede ser abrumadora inicialmente\u003C/li>\n\u003Cli>\u003Cstrong>Compatibilidad de Componentes\u003C/strong>: No todas las partes funcionan juntas perfectamente\u003C/li>\n\u003Cli>\u003Cstrong>Inversión de Tiempo\u003C/strong>: El proceso de construcción tomó mucho más tiempo del esperado\u003C/li>\n\u003Cli>\u003Cstrong>Costo\u003C/strong>: Los componentes de calidad se suman rápidamente\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"beneficios-inesperados\">Beneficios Inesperados\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Mejora en Escritura\u003C/strong>: Escritura más intencional debido al feedback táctil\u003C/li>\n\u003Cli>\u003Cstrong>Estética del Escritorio\u003C/strong>: El teclado personalizado se convirtió en pieza de conversación\u003C/li>\n\u003Cli>\u003Cstrong>Habilidades Técnicas\u003C/strong>: Aprendí sobre electrónica, firmware y diseño de hardware\u003C/li>\n\u003Cli>\u003Cstrong>Comunidad\u003C/strong>: Me conecté con la comunidad de entusiastas de teclados mecánicos\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"impacto-en-el-trabajo-de-desarrollo\">Impacto en el Trabajo de Desarrollo\u003C/h2>\n\u003Cp>Después de usar el teclado personalizado por varios meses:\u003C/p>\n\u003Ch3 id=\"ganancias-de-productividad\">Ganancias de Productividad\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Navegación Más Rápida\u003C/strong>: Atajos personalizados redujeron tiempo en menús\u003C/li>\n\u003Cli>\u003Cstrong>RSI Reducido\u003C/strong>: Mejor ergonomía y elección de switches redujo tensión en manos\u003C/li>\n\u003Cli>\u003Cstrong>Precisión Mejorada\u003C/strong>: Switches de calidad redujeron errores de tipeo\u003C/li>\n\u003Cli>\u003Cstrong>Enfoque Mental\u003C/strong>: La experiencia satisfactoria de escritura mejoró concentración\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"integración-de-flujo-de-trabajo\">Integración de Flujo de Trabajo\u003C/h3>\n\u003Cp>El teclado se integra perfectamente con mi entorno de desarrollo:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Atajos IDE\u003C/strong>: Capa personalizada para VS Code, IntelliJ y Vim\u003C/li>\n\u003Cli>\u003Cstrong>Navegación Terminal\u003C/strong>: Optimizado para trabajo en línea de comandos\u003C/li>\n\u003Cli>\u003Cstrong>Integración Git\u003C/strong>: Acceso rápido a operaciones git comunes\u003C/li>\n\u003Cli>\u003Cstrong>Documentación\u003C/strong>: Atajos para acceder rápidamente a docs y referencias\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"mejoras-futuras\">Mejoras Futuras\u003C/h2>\n\u003Cp>Ya estoy planeando la siguiente iteración:\u003C/p>\n\u003Ch3 id=\"mejoras-de-hardware\">Mejoras de Hardware\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Gasket Mount\u003C/strong>: Para mejor sensación de escritura\u003C/li>\n\u003Cli>\u003Cstrong>Rotary Encoder\u003C/strong>: Para control de volumen y scroll\u003C/li>\n\u003Cli>\u003Cstrong>Pantalla OLED\u003C/strong>: Para mostrar capa actual e info del sistema\u003C/li>\n\u003Cli>\u003Cstrong>Opción Inalámbrica\u003C/strong>: Explorando firmware ZMK para builds inalámbricos\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"mejoras-de-software\">Mejoras de Software\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Cstrong>Macros Avanzados\u003C/strong>: Manipulación de texto más sofisticada\u003C/li>\n\u003Cli>\u003Cstrong>Capas Context-Aware\u003C/strong>: Diferentes layouts para diferentes aplicaciones\u003C/li>\n\u003Cli>\u003Cstrong>Integración RGB\u003C/strong>: Iluminación funcional que indica estado de capa\u003C/li>\n\u003Cli>\u003Cstrong>Métricas de Productividad\u003C/strong>: Seguimiento de patrones de escritura y eficiencia\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"conclusión\">Conclusión\u003C/h2>\n\u003Cp>Construir un teclado mecánico personalizado ha sido uno de los proyectos técnicos más gratificantes que he emprendido. Combina hardware, software y diseño de una manera que impacta directamente mi trabajo diario.\u003C/p>\n\u003Cp>El proceso me enseñó:\u003C/p>\n\u003Cul>\n\u003Cli>La importancia de herramientas de calidad para trabajo profesional\u003C/li>\n\u003Cli>Cómo la personalización profunda puede mejorar eficiencia\u003C/li>\n\u003Cli>El valor del conocimiento comunitario y proyectos open-source\u003C/li>\n\u003Cli>Que las mejores soluciones a menudo requieren tiempo e iteración\u003C/li>\n\u003C/ul>\n\u003Cp>Para compañeros desarrolladores considerando un teclado personalizado: la inversión en tiempo y dinero paga dividendos en comodidad y productividad diaria. Comienza con una construcción simple e itera—te sorprenderá cuánto mejora tu experiencia de desarrollo.\u003C/p>\n\u003Ch2 id=\"recursos\">Recursos\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>QMK Firmware\u003C/strong>: \u003Ca href=\"https://qmk.fm\">qmk.fm\u003C/a>\u003C/li>\n\u003Cli>\u003Cstrong>Keyboard University\u003C/strong>: Recurso de aprendizaje integral\u003C/li>\n\u003Cli>\u003Cstrong>r/MechanicalKeyboards\u003C/strong>: Comunidad activa para consejos e inspiración\u003C/li>\n\u003Cli>\u003Cstrong>Recomendaciones de Vendedores\u003C/strong>: Basadas en experiencia personal con calidad y servicio\u003C/li>\n\u003C/ul>\n\u003Cp>El teclado personalizado se ha convertido en una parte esencial de mi setup de desarrollo, y no puedo imaginar volver a opciones comerciales. Si pasas tiempo significativo escribiendo, invertir en un dispositivo de entrada de calidad y personalizado es una de las mejores mejoras que puedes hacer.\u003C/p>",{"headings":251,"localImagePaths":336,"remoteImagePaths":337,"frontmatter":338,"imagePaths":341},[252,254,257,260,263,266,269,272,275,278,281,284,287,290,293,296,299,302,305,308,311,314,317,320,323,326,329,332,333],{"depth":33,"slug":253,"text":238},"construyendo-mi-teclado-mecánico-personalizado",{"depth":36,"slug":255,"text":256},"por-qué-construir-un-teclado-personalizado","¿Por qué Construir un Teclado Personalizado?",{"depth":36,"slug":258,"text":259},"planificando-la-construcción","Planificando la Construcción",{"depth":46,"slug":261,"text":262},"decisión-de-layout","Decisión de Layout",{"depth":46,"slug":264,"text":265},"selección-de-componentes","Selección de Componentes",{"depth":36,"slug":267,"text":268},"el-proceso-de-construcción","El Proceso de Construcción",{"depth":46,"slug":270,"text":271},"paso-1-preparación-del-pcb","Paso 1: Preparación del PCB",{"depth":46,"slug":273,"text":274},"paso-2-instalación-de-estabilizadores","Paso 2: Instalación de Estabilizadores",{"depth":46,"slug":276,"text":277},"paso-3-instalación-de-switches","Paso 3: Instalación de Switches",{"depth":46,"slug":279,"text":280},"paso-4-ensamblaje","Paso 4: Ensamblaje",{"depth":36,"slug":282,"text":283},"programación-personalizada","Programación Personalizada",{"depth":46,"slug":285,"text":286},"sistema-de-capas","Sistema de Capas",{"depth":46,"slug":288,"text":289},"características-enfocadas-en-desarrollo","Características Enfocadas en Desarrollo",{"depth":46,"slug":291,"text":292},"mejoras-de-productividad","Mejoras de Productividad",{"depth":36,"slug":294,"text":295},"la-experiencia-de-programación","La Experiencia de Programación",{"depth":46,"slug":297,"text":298},"configuración-qmk","Configuración QMK",{"depth":46,"slug":300,"text":301},"macros-personalizados","Macros Personalizados",{"depth":36,"slug":303,"text":304},"lecciones-aprendidas","Lecciones Aprendidas",{"depth":46,"slug":306,"text":307},"lo-que-funcionó-bien","Lo que Funcionó Bien",{"depth":46,"slug":309,"text":310},"desafíos-enfrentados","Desafíos Enfrentados",{"depth":46,"slug":312,"text":313},"beneficios-inesperados","Beneficios Inesperados",{"depth":36,"slug":315,"text":316},"impacto-en-el-trabajo-de-desarrollo","Impacto en el Trabajo de Desarrollo",{"depth":46,"slug":318,"text":319},"ganancias-de-productividad","Ganancias de Productividad",{"depth":46,"slug":321,"text":322},"integración-de-flujo-de-trabajo","Integración de Flujo de Trabajo",{"depth":36,"slug":324,"text":325},"mejoras-futuras","Mejoras Futuras",{"depth":46,"slug":327,"text":328},"mejoras-de-hardware","Mejoras de Hardware",{"depth":46,"slug":330,"text":331},"mejoras-de-software","Mejoras de Software",{"depth":36,"slug":62,"text":63},{"depth":36,"slug":334,"text":335},"recursos","Recursos",[],[],{"title":238,"description":239,"date":339,"tags":340,"featured":83,"lang":24,"slug":235},["Date","2024-10-05T00:00:00.000Z"],[242,79,80,243,244],[],"custom-mechanical-keyboard-es.md","flutter-certificate-pinning",{"id":343,"data":345,"body":354,"filePath":355,"digest":356,"rendered":357,"legacyId":385},{"title":346,"description":347,"date":348,"tags":349,"featured":83,"lang":24},"Certificate Pinning con Flutter","Guía para implementar certificate pinning en aplicaciones Flutter utilizando Dart.",["Date","2020-11-11T00:00:00.000Z"],[350,351,352,353],"flutter","dart","certificate","certificate-pinning","Una de las recomendaciones más comunes a la hora de desarrollar aplicaciones móviles es el _Certificate Pinning_, y en este artículo vamos a ver un método sencillo para incluir en nuestras aplicaciones hechas con **Flutter**.\n\n## Qué es?\n\nEl _Certificate Pinning_ es en pocas palabras una forma de verificar la identidad del servidor con el que nos estamos comunicando y de esa forma asegurar el tráfico de red de una aplicación. Así nuestra aplicación solo confía de manera _exclusiva_ en las peticiones desde y hasta el servidor cuyo certificado estemos especificando dentro de nuestra aplicación.\n\nTodo el resto del flujo de red a servidores cuyos certificados nuestra aplicación no reconozca serán rechazados.\n\n## Implementar Certificate Pinning\n\nVamos a ver en pocos pasos una manera sencilla y fácil de implementar _Certificate Pinning_ en **Flutter**. En este ejemplo vamos a utilizar una de las APIs abiertas más conocidas y reconocidas [**PokeAPI**](https://pokeapi.co/).\n\n_PokeAPI es una RestfulAPI abierta al público que no requiere registro ni clave de acceso, y que dispone de manera gratuita la lista de todos los Pokemon._\n\n### Paso 1: Obtener el Certificado SSL del servidor\n\nLo primero que debemos hacer es obtener el _Certificado SSL_ en el formato _.pem_, un formato amigable para trabajar. En este caso para obtener el certificado vamos a usar el navegador web _Firefox_, el cual tiene como parte del propio navegador una herramienta muy útil para revisar los certificados de las páginas web que visitamos.\n\nIngresamos al sitio web de _PokeAPI_ y para poder ver el certificado vamos a la opción _Tools → Page Info_ o también utilizando el atajo de teclado _Cmd + i_.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\" />\n\u003C/div>\n\nUna vez hayamos seleccionado la opción para visualizar la información de la página, vamos a la pestaña _Security_ y pulsamos sobre el botón _View Certificate_.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\" />\n\u003C/div>\n\nAl pulsar sobre la opción que nos va a permitir ver el certificado se nos va a abrir una nueva pestaña en el navegador, mostrandonos una serie de cabeceras, normalmente van a ser tres elementos y el primero que está seleccionado es el que nos importa.\n\nLa cuestión en este punto es poder descargar el archivo _.pem_ del certificado del servidor, las otras opciones que se pueden ver son los _certificados intermedios_ y los _certificados en las entidades emisoras_ que forman parte de la [cadena de confianza](https://es.wikipedia.org/wiki/Cadena_de_confianza) entre certificados.\n\nMoviéndonos un poco hacia abajo en la pestaña que contiene la información del certificado vamos a encontrar la opción para descargar el certificado dentro del apartado _Miscellaneous_, la opción que nos interesa es la primera **PEM (cert)**, que descargará solamente el certificado del servidor.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\" />\n\u003C/div>\n\nLuego de haber descargado el archivo en nuestra computadora, deberíamos tener un archivo con la extensión _.pem_ que es el certificado en el que estamos interesados, su aspecto debería ser similar al siguiente.\n\n```text\n-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n```\n\u003Cbr />\n\n### Paso 2: Convertir el archivo PEM en una variable de Dart\n\nPara poder utilizar el certificado debemos convertir el contenido del archivo _.pem_ en una variable de Dart, que pueda ser usada a la hora de construir el objeto que nos va a permitir realizar consultas http.\n\nCon este objetivo en mente creé un pequeño **gist** que puede ser usado para convertir este archivo en una variable de tipo Uint8List.\n\n\u003Cdiv class=\"not-prose\">\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\u003C/div>\n\nPreparamos los directorios y el script para ejecutar la conversión de los archivos.\n\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\nPara ejecutar el script sencillamente nos dirigimos al directorio donde está nuestro script y ejecutamos lo siguiente:\n\n```bash\ndart main.dart\n```\n\nAl finalizar la ejecución debe de aparecer un nuevo archivo en el directorio _generated_, el contenido de ese archivo debe ser parecido a esto:\n\n```dart\nimport 'dart:typed_data';\n\nUint8List certificate = Uint8List.fromList([\n  45,\n  45,\n  45,\n  ...\n  45,\n  13,\n  10\n]);\n```\n\nCon esto ya tendremos nuestro certificado listo para ser utilizado en nuestras peticiones!\n\n### Paso 3: Incluir el certificado en el cliente HTTP\n\nEn este paso vamos a crear nuestro cliente HTTP para poder comenzar a enviarle nuestras peticiones al servidor de PokeAPI, para esto vamos a ver algunos puntos a tomar en cuenta.\n\nIncluir la dependencia del paquete _http_\n\n```yaml\n# ...\ndependencies:\n  flutter:\n    sdk: flutter\n  http: ^0.12.0+2\n# ...\n```\n\u003Cbr/>\n\nCon las siguientes líneas podemos generar el cliente HTTP con el certificado incluído.\n\n```dart\nimport 'package:http/http.dart' as http;\nimport 'package:http/io_client.dart';\n\nimport 'sni-cloudflaressl-com.dart';\n\nSecurityContext securityContext = SecurityContext(withTrustedRoots: false);\nsecurityContext.setTrustedCertificatesBytes(certificate);\n\nHttpClient httpClient = HttpClient(context: securityContext);\n\nhttp.Client client = IOClient(httpClient);\n```\n\n1. **import 'sni-cloudflaressl-com.dart';** Importamos el archivo que contiene la variable con la información del certificado.\n2. **withTrustedRoots: false** Especificamos que no queremos incluir los certificados de las entidades emisoras.\n3. **securityContext.setTrustedCertificatesBytes(certificate)** Establecemos el certificado de confianza en el _SecurityContext_ usando la variable _certificate_.\n4. **http.Client** Crear el http.Client a partir del IOClient que puede incluir el certificado.\n\n### Paso 4: Probar una solicitud a la API\n\nJuntamos todo lo que vimos y debajo de nuestro nuevo cliente HTTP que ya incluye el certificate pinning realizamos al llamada a la API para consultar los datos que estamos buscando.\n\n```dart\nString result;\n\ntry {\n  http.Response response = await client.get(\n    'https://pokeapi.co/api/v2/pokemon/pikachu',\n  );\n  result = response.body;\n} catch (exception) {\n  result = exception.toString();\n}\n```\n\nCon el código de arriba estamos pidiendo a PokeAPI los datos del pókemon **Pikachu**. En caso de que nuestra petición sea exitosa nos va a retornar un texto en formato JSON con toda la información del Pokemon, caso contrario nos devolverá un error.\n\nSi quieres ver un ejemplo más claro de la implementación de un certificate pinning puedes revisar el [repositorio en Github](https://github.com/yoryer/flutter_certificate_pinning) donde muestro un caso exitoso y otro fallido.\n\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\" />\n\u003C/div>","src/content/blog/flutter-certificate-pinning-es.md","371564b5ee7e0bcd",{"html":358,"metadata":359},"\u003Cp>Una de las recomendaciones más comunes a la hora de desarrollar aplicaciones móviles es el \u003Cem>Certificate Pinning\u003C/em>, y en este artículo vamos a ver un método sencillo para incluir en nuestras aplicaciones hechas con \u003Cstrong>Flutter\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"qué-es\">Qué es?\u003C/h2>\n\u003Cp>El \u003Cem>Certificate Pinning\u003C/em> es en pocas palabras una forma de verificar la identidad del servidor con el que nos estamos comunicando y de esa forma asegurar el tráfico de red de una aplicación. Así nuestra aplicación solo confía de manera \u003Cem>exclusiva\u003C/em> en las peticiones desde y hasta el servidor cuyo certificado estemos especificando dentro de nuestra aplicación.\u003C/p>\n\u003Cp>Todo el resto del flujo de red a servidores cuyos certificados nuestra aplicación no reconozca serán rechazados.\u003C/p>\n\u003Ch2 id=\"implementar-certificate-pinning\">Implementar Certificate Pinning\u003C/h2>\n\u003Cp>Vamos a ver en pocos pasos una manera sencilla y fácil de implementar \u003Cem>Certificate Pinning\u003C/em> en \u003Cstrong>Flutter\u003C/strong>. En este ejemplo vamos a utilizar una de las APIs abiertas más conocidas y reconocidas \u003Ca href=\"https://pokeapi.co/\">\u003Cstrong>PokeAPI\u003C/strong>\u003C/a>.\u003C/p>\n\u003Cp>\u003Cem>PokeAPI es una RestfulAPI abierta al público que no requiere registro ni clave de acceso, y que dispone de manera gratuita la lista de todos los Pokemon.\u003C/em>\u003C/p>\n\u003Ch3 id=\"paso-1-obtener-el-certificado-ssl-del-servidor\">Paso 1: Obtener el Certificado SSL del servidor\u003C/h3>\n\u003Cp>Lo primero que debemos hacer es obtener el \u003Cem>Certificado SSL\u003C/em> en el formato \u003Cem>.pem\u003C/em>, un formato amigable para trabajar. En este caso para obtener el certificado vamos a usar el navegador web \u003Cem>Firefox\u003C/em>, el cual tiene como parte del propio navegador una herramienta muy útil para revisar los certificados de las páginas web que visitamos.\u003C/p>\n\u003Cp>Ingresamos al sitio web de \u003Cem>PokeAPI\u003C/em> y para poder ver el certificado vamos a la opción \u003Cem>Tools → Page Info\u003C/em> o también utilizando el atajo de teclado \u003Cem>Cmd + i\u003C/em>.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-firefox-01.png\" alt=\"Firefox Tools Menu\">\n\u003C/div>\n\u003Cp>Una vez hayamos seleccionado la opción para visualizar la información de la página, vamos a la pestaña \u003Cem>Security\u003C/em> y pulsamos sobre el botón \u003Cem>View Certificate\u003C/em>.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg src=\"/media/art001-cp-firefox-02.png\" alt=\"Firefox Security Tab\" width=\"550px\">\n\u003C/div>\n\u003Cp>Al pulsar sobre la opción que nos va a permitir ver el certificado se nos va a abrir una nueva pestaña en el navegador, mostrandonos una serie de cabeceras, normalmente van a ser tres elementos y el primero que está seleccionado es el que nos importa.\u003C/p>\n\u003Cp>La cuestión en este punto es poder descargar el archivo \u003Cem>.pem\u003C/em> del certificado del servidor, las otras opciones que se pueden ver son los \u003Cem>certificados intermedios\u003C/em> y los \u003Cem>certificados en las entidades emisoras\u003C/em> que forman parte de la \u003Ca href=\"https://es.wikipedia.org/wiki/Cadena_de_confianza\">cadena de confianza\u003C/a> entre certificados.\u003C/p>\n\u003Cp>Moviéndonos un poco hacia abajo en la pestaña que contiene la información del certificado vamos a encontrar la opción para descargar el certificado dentro del apartado \u003Cem>Miscellaneous\u003C/em>, la opción que nos interesa es la primera \u003Cstrong>PEM (cert)\u003C/strong>, que descargará solamente el certificado del servidor.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[450px]\" src=\"/media/art001-cp-firefox-03.png\" alt=\"Firefox Certificate Download\">\n\u003C/div>\n\u003Cp>Luego de haber descargado el archivo en nuestra computadora, deberíamos tener un archivo con la extensión \u003Cem>.pem\u003C/em> que es el certificado en el que estamos interesados, su aspecto debería ser similar al siguiente.\u003C/p>\n\u003Cpre class=\"language-text\" data-language=\"text\">\u003Ccode is:raw=\"\" class=\"language-text\">-----BEGIN CERTIFICATE-----\nMIIEvjCCBGSgAwIBAgIQAp2/CYVt9VZ7Sf2GIJyGuDAKBggqhkjOPQQDAjBKMQsw\nCQYDVQQGEwJVUzEZMBcGA1UEChMQQ2xvdWRmbGFyZSwgSW5jLjEgMB4GA1UEAxMX\nQ2xvdWRmbGFyZSBJbmMgRUNDIENBLTMwHhcNMjAwODE0MDAwMDAwWhcNMjEwODE0\nMTIwMDAwWjBtMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xGTAXBgNVBAoTEENsb3VkZmxhcmUsIEluYy4xHjAcBgNVBAMT\nFXNuaS5jbG91ZGZsYXJlc3NsLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA\nBO3d/E4ml2Adhff/ziIlpAr+ULUlG3RyG+fxngarxdh/8h2p3ChO+0EWSOo1y5rN\nryTIKgUcafhwYI3Q0ApzgHyjggMHMIIDAzAfBgNVHSMEGDAWgBSlzjfq67B1DpRn\niLRF+tkkEIeWHzAdBgNVHQ4EFgQUwQrggFiZrQJLGp2FJqeYx+qMKC4wOgYDVR0R\nBDMwMYIMKi5wb2tlYXBpLmNvghVzbmkuY2xvdWRmbGFyZXNzbC5jb22CCnBva2Vh\ncGkuY28wDgYDVR0PAQH/BAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF\nBQcDAjB7BgNVHR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20v\nQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdp\nY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3JsMEwGA1UdIARFMEMwNwYJ\nYIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv\nbS9DUFMwCAYGZ4EMAQICMHYGCCsGAQUFBwEBBGowaDAkBggrBgEFBQcwAYYYaHR0\ncDovL29jc3AuZGlnaWNlcnQuY29tMEAGCCsGAQUFBzAChjRodHRwOi8vY2FjZXJ0\ncy5kaWdpY2VydC5jb20vQ2xvdWRmbGFyZUluY0VDQ0NBLTMuY3J0MAwGA1UdEwEB\n/wQCMAAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgD2XJQv0XcwIhRUGAgwlFaO\n400TGTO/3wwvIAvMTvFk4wAAAXPsGBnRAAAEAwBHMEUCIANDBwmRfQuryBQGuJEC\njrQpU5gEjxdz/oFLrIlhgzsOAiEA8oCU/zVLpBmSFgXSOnbQyRhQgBV9PYmcAI6p\n+F7ApEEAdQBc3EOS/uarRUSxXprUVuYQN/vV+kfcoXOUsl7m9scOygAAAXPsGBn9\nAAAEAwBGMEQCIDcY6cPBaLt7+6aOKLZUn1ke3DhnObmXcYlJ3pa8jVu9AiBwAgik\nHldztAA2V0bRbny+mBmwhxjwJfYpO/MEOCJ20TAKBggqhkjOPQQDAgNIADBFAiAf\nSveArpf/TS8nWvx58hjlZZFSgus5CI/Tqg7ws9Nm0wIhALJSYFQM6oHVOJHvYHrb\nUvrcjElb+g5XwjIEeFVJudnI\n-----END CERTIFICATE-----\n\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Ch3 id=\"paso-2-convertir-el-archivo-pem-en-una-variable-de-dart\">Paso 2: Convertir el archivo PEM en una variable de Dart\u003C/h3>\n\u003Cp>Para poder utilizar el certificado debemos convertir el contenido del archivo \u003Cem>.pem\u003C/em> en una variable de Dart, que pueda ser usada a la hora de construir el objeto que nos va a permitir realizar consultas http.\u003C/p>\n\u003Cp>Con este objetivo en mente creé un pequeño \u003Cstrong>gist\u003C/strong> que puede ser usado para convertir este archivo en una variable de tipo Uint8List.\u003C/p>\n\u003Cdiv class=\"not-prose\">\n\u003Cscript src=\"https://gist.github.com/yoryer/52ced7b661003e9ad3d85569e114b0d2.js\">\u003C/script>\n\u003C/div>\n\u003Cp>Preparamos los directorios y el script para ejecutar la conversión de los archivos.\u003C/p>\n\u003Cdiv class=\"not-prose flex justify-center\">\n\u003Cimg class=\"w-[250px]\" src=\"/media/art001-cp-finder.png\">\n\u003C/div>\n\u003Cp>Para ejecutar el script sencillamente nos dirigimos al directorio donde está nuestro script y ejecutamos lo siguiente:\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">dart main.dart\n\u003C/code>\u003C/pre>\n\u003Cp>Al finalizar la ejecución debe de aparecer un nuevo archivo en el directorio \u003Cem>generated\u003C/em>, el contenido de ese archivo debe ser parecido a esto:\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'dart:typed_data'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">Uint8List\u003C/span> certificate \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">Uint8List\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fromList\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\n  \u003Cspan class=\"token number\">45\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">13\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Con esto ya tendremos nuestro certificado listo para ser utilizado en nuestras peticiones!\u003C/p>\n\u003Ch3 id=\"paso-3-incluir-el-certificado-en-el-cliente-http\">Paso 3: Incluir el certificado en el cliente HTTP\u003C/h3>\n\u003Cp>En este paso vamos a crear nuestro cliente HTTP para poder comenzar a enviarle nuestras peticiones al servidor de PokeAPI, para esto vamos a ver algunos puntos a tomar en cuenta.\u003C/p>\n\u003Cp>Incluir la dependencia del paquete \u003Cem>http\u003C/em>\u003C/p>\n\u003Cpre class=\"language-yaml\" data-language=\"yaml\">\u003Ccode is:raw=\"\" class=\"language-yaml\">\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003Cspan class=\"token key atrule\">dependencies\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">flutter\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">sdk\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> flutter\n  \u003Cspan class=\"token key atrule\">http\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> ^0.12.0+2\n\u003Cspan class=\"token comment\"># ...\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>Con las siguientes líneas podemos generar el cliente HTTP con el certificado incluído.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/http.dart'\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">as\u003C/span> http\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'package:http/io_client.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'sni-cloudflaressl-com.dart'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">SecurityContext\u003C/span> securityContext \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">SecurityContext\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>withTrustedRoots\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nsecurityContext\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setTrustedCertificatesBytes\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>certificate\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">HttpClient\u003C/span> httpClient \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">HttpClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>context\u003Cspan class=\"token punctuation\">:\u003C/span> securityContext\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Client\u003C/span> client \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token class-name\">IOClient\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>httpClient\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>\u003Cstrong>import ‘sni-cloudflaressl-com.dart’;\u003C/strong> Importamos el archivo que contiene la variable con la información del certificado.\u003C/li>\n\u003Cli>\u003Cstrong>withTrustedRoots: false\u003C/strong> Especificamos que no queremos incluir los certificados de las entidades emisoras.\u003C/li>\n\u003Cli>\u003Cstrong>securityContext.setTrustedCertificatesBytes(certificate)\u003C/strong> Establecemos el certificado de confianza en el \u003Cem>SecurityContext\u003C/em> usando la variable \u003Cem>certificate\u003C/em>.\u003C/li>\n\u003Cli>\u003Cstrong>http.Client\u003C/strong> Crear el http.Client a partir del IOClient que puede incluir el certificado.\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"paso-4-probar-una-solicitud-a-la-api\">Paso 4: Probar una solicitud a la API\u003C/h3>\n\u003Cp>Juntamos todo lo que vimos y debajo de nuestro nuevo cliente HTTP que ya incluye el certificate pinning realizamos al llamada a la API para consultar los datos que estamos buscando.\u003C/p>\n\u003Cpre class=\"language-dart\" data-language=\"dart\">\u003Ccode is:raw=\"\" class=\"language-dart\">\u003Cspan class=\"token class-name\">String\u003C/span> result\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">try\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token class-name\">\u003Cspan class=\"token namespace\">http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003C/span>Response\u003C/span> response \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> client\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token keyword\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token string-literal\">\u003Cspan class=\"token string\">'https://pokeapi.co/api/v2/pokemon/pikachu'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> response\u003Cspan class=\"token punctuation\">.\u003C/span>body\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">catch\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>exception\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  result \u003Cspan class=\"token operator\">=\u003C/span> exception\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Con el código de arriba estamos pidiendo a PokeAPI los datos del pókemon \u003Cstrong>Pikachu\u003C/strong>. En caso de que nuestra petición sea exitosa nos va a retornar un texto en formato JSON con toda la información del Pokemon, caso contrario nos devolverá un error.\u003C/p>\n\u003Cp>Si quieres ver un ejemplo más claro de la implementación de un certificate pinning puedes revisar el \u003Ca href=\"https://github.com/yoryer/flutter_certificate_pinning\">repositorio en Github\u003C/a> donde muestro un caso exitoso y otro fallido.\u003C/p>\n\u003Cdiv class=\"flex justify-center\">\n\u003Cimg class=\"w-[250px] p-2\" src=\"/media/art001-cp-pikachu.png\" alt=\"Pikachu Result\">\n\u003C/div>",{"headings":360,"localImagePaths":379,"remoteImagePaths":380,"frontmatter":381,"imagePaths":384},[361,364,367,370,373,376],{"depth":36,"slug":362,"text":363},"qué-es","Qué es?",{"depth":36,"slug":365,"text":366},"implementar-certificate-pinning","Implementar Certificate Pinning",{"depth":46,"slug":368,"text":369},"paso-1-obtener-el-certificado-ssl-del-servidor","Paso 1: Obtener el Certificado SSL del servidor",{"depth":46,"slug":371,"text":372},"paso-2-convertir-el-archivo-pem-en-una-variable-de-dart","Paso 2: Convertir el archivo PEM en una variable de Dart",{"depth":46,"slug":374,"text":375},"paso-3-incluir-el-certificado-en-el-cliente-http","Paso 3: Incluir el certificado en el cliente HTTP",{"depth":46,"slug":377,"text":378},"paso-4-probar-una-solicitud-a-la-api","Paso 4: Probar una solicitud a la API",[],[],{"title":346,"description":347,"date":382,"tags":383,"featured":83,"lang":24,"slug":343},["Date","2020-11-11T00:00:00.000Z"],[350,351,352,353],[],"flutter-certificate-pinning-es.md"]